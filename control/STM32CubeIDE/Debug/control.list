
control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af4  08006af4  000205fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006afc  08006afc  000205fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006afc  08006afc  00016afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005fc  20000000  08006b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200005fc  08007100  000205fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a28  08007100  00020a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205fc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002e9d7  00000000  00000000  0002062c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004c580  00000000  00000000  0004f003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007897  00000000  00000000  0009b583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d8  00000000  00000000  000a2e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e0aa8  00000000  00000000  000a44f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002f48  00000000  00000000  00184fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002908e  00000000  00000000  00187ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  001b0f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe4  00000000  00000000  001b1048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000155f8  00000000  00000000  001b502c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005fc 	.word	0x200005fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800686c 	.word	0x0800686c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000600 	.word	0x20000600
 80001c4:	0800686c 	.word	0x0800686c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004c6:	e003      	b.n	80004d0 <LoopCopyDataInit>

080004c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004ce:	3104      	adds	r1, #4

080004d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004d0:	480b      	ldr	r0, [pc, #44]	; (8000500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004d8:	d3f6      	bcc.n	80004c8 <CopyDataInit>
  ldr  r2, =_sbss
 80004da:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004dc:	e002      	b.n	80004e4 <LoopFillZerobss>

080004de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004e0:	f842 3b04 	str.w	r3, [r2], #4

080004e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004e8:	d3f9      	bcc.n	80004de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004ea:	f002 fe97 	bl	800321c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ee:	f006 f911 	bl	8006714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004f2:	f000 f863 	bl	80005bc <main>
  bx  lr    
 80004f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004fc:	08006b04 	.word	0x08006b04
  ldr  r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000504:	200005fc 	.word	0x200005fc
  ldr  r2, =_sbss
 8000508:	200005fc 	.word	0x200005fc
  ldr  r3, = _ebss
 800050c:	20000a28 	.word	0x20000a28

08000510 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <BusFault_Handler>
	...

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	2300      	movs	r3, #0
{
 8000518:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800051e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000522:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000526:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4922      	ldr	r1, [pc, #136]	; (80005b4 <SystemClock_Config+0xa0>)
 800052c:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	4a20      	ldr	r2, [pc, #128]	; (80005b8 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800053a:	6408      	str	r0, [r1, #64]	; 0x40
 800053c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800053e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000542:	9100      	str	r1, [sp, #0]
 8000544:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	6813      	ldr	r3, [r2, #0]
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	6813      	ldr	r3, [r2, #0]
 8000552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000556:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2202      	movs	r2, #2
 8000562:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	e9cd 410b 	strd	r4, r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	25a8      	movs	r5, #168	; 0xa8
 8000570:	2408      	movs	r4, #8
 8000572:	2202      	movs	r2, #2
 8000574:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 800057c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f003 face 	bl	8003b20 <HAL_RCC_OscConfig>
 8000584:	b108      	cbz	r0, 800058a <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000586:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	260f      	movs	r6, #15
 800058c:	2702      	movs	r7, #2
 800058e:	2400      	movs	r4, #0
 8000590:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000598:	a802      	add	r0, sp, #8
 800059a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80005a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a6:	f003 fcd1 	bl	8003f4c <HAL_RCC_ClockConfig>
 80005aa:	b108      	cbz	r0, 80005b0 <SystemClock_Config+0x9c>
 80005ac:	b672      	cpsid	i
  while (1)
 80005ae:	e7fe      	b.n	80005ae <SystemClock_Config+0x9a>
}
 80005b0:	b015      	add	sp, #84	; 0x54
 80005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <main>:
{
 80005bc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  POWER = 0x02;
 80005c0:	4baa      	ldr	r3, [pc, #680]	; (800086c <main+0x2b0>)
  hadc1.Instance = ADC1;
 80005c2:	4cab      	ldr	r4, [pc, #684]	; (8000870 <main+0x2b4>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8000890 <main+0x2d4>
{
 80005c8:	b09f      	sub	sp, #124	; 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	2700      	movs	r7, #0
  POWER = 0x02;
 80005cc:	2202      	movs	r2, #2
 80005ce:	701a      	strb	r2, [r3, #0]
  HAL_Init();
 80005d0:	f002 fe56 	bl	8003280 <HAL_Init>
  SystemClock_Config();
 80005d4:	f7ff ff9e 	bl	8000514 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	e9cd 7716 	strd	r7, r7, [sp, #88]	; 0x58
 80005dc:	e9cd 7718 	strd	r7, r7, [sp, #96]	; 0x60
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e0:	4aa4      	ldr	r2, [pc, #656]	; (8000874 <main+0x2b8>)
 80005e2:	9702      	str	r7, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	971a      	str	r7, [sp, #104]	; 0x68
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, SAFETY_LIGHT_Pin|HEARTBEAT_Pin|POWER_INDICATOR_Pin, GPIO_PIN_RESET);
 80005e8:	48a3      	ldr	r0, [pc, #652]	; (8000878 <main+0x2bc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ea:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80005ee:	6311      	str	r1, [r2, #48]	; 0x30
 80005f0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80005f2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80005f6:	9102      	str	r1, [sp, #8]
 80005f8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	9703      	str	r7, [sp, #12]
 80005fc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80005fe:	f041 0104 	orr.w	r1, r1, #4
 8000602:	6311      	str	r1, [r2, #48]	; 0x30
 8000604:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000606:	f001 0104 	and.w	r1, r1, #4
 800060a:	9103      	str	r1, [sp, #12]
 800060c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	9704      	str	r7, [sp, #16]
 8000610:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000612:	f041 0101 	orr.w	r1, r1, #1
 8000616:	6311      	str	r1, [r2, #48]	; 0x30
 8000618:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800061a:	f001 0101 	and.w	r1, r1, #1
 800061e:	9104      	str	r1, [sp, #16]
 8000620:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	9705      	str	r7, [sp, #20]
 8000624:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000626:	f041 0102 	orr.w	r1, r1, #2
 800062a:	6311      	str	r1, [r2, #48]	; 0x30
 800062c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800062e:	f002 0202 	and.w	r2, r2, #2
 8000632:	9205      	str	r2, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, SAFETY_LIGHT_Pin|HEARTBEAT_Pin|POWER_INDICATOR_Pin, GPIO_PIN_RESET);
 8000634:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000638:	463a      	mov	r2, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	9d05      	ldr	r5, [sp, #20]
  GPIO_InitStruct.Pin = SAFETY_LIGHT_Pin|HEARTBEAT_Pin|POWER_INDICATOR_Pin;
 800063c:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_WritePin(GPIOC, SAFETY_LIGHT_Pin|HEARTBEAT_Pin|POWER_INDICATOR_Pin, GPIO_PIN_RESET);
 8000640:	f003 fa52 	bl	8003ae8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SAFETY_LIGHT_Pin|HEARTBEAT_Pin|POWER_INDICATOR_Pin;
 8000644:	f04f 0900 	mov.w	r9, #0
 8000648:	2301      	movs	r3, #1
 800064a:	f44f 7260 	mov.w	r2, #896	; 0x380
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	488a      	ldr	r0, [pc, #552]	; (8000878 <main+0x2bc>)
 8000650:	a916      	add	r1, sp, #88	; 0x58
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000652:	2620      	movs	r6, #32
  GPIO_InitStruct.Pin = SAFETY_LIGHT_Pin|HEARTBEAT_Pin|POWER_INDICATOR_Pin;
 8000654:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000658:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065c:	f003 f920 	bl	80038a0 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000660:	4632      	mov	r2, r6
 8000662:	4639      	mov	r1, r7
 8000664:	a816      	add	r0, sp, #88	; 0x58
 8000666:	f006 f881 	bl	800676c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ScanConvMode = ENABLE;
 800066e:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 8000670:	4a82      	ldr	r2, [pc, #520]	; (800087c <main+0x2c0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000672:	6063      	str	r3, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4620      	mov	r0, r4
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000676:	f44f 6300 	mov.w	r3, #2048	; 0x800
  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	e9cd 770f 	strd	r7, r7, [sp, #60]	; 0x3c
 800067e:	970e      	str	r7, [sp, #56]	; 0x38
 8000680:	9711      	str	r7, [sp, #68]	; 0x44
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000682:	60a7      	str	r7, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000684:	7627      	strb	r7, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	f884 7020 	strb.w	r7, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068a:	62e7      	str	r7, [r4, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068c:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
  hadc1.Instance = ADC1;
 8000690:	6022      	str	r2, [r4, #0]
  hadc1.Init.ScanConvMode = ENABLE;
 8000692:	6125      	str	r5, [r4, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000694:	61e5      	str	r5, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000696:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000698:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800069c:	60e3      	str	r3, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069e:	f002 fe35 	bl	800330c <HAL_ADC_Init>
 80006a2:	b108      	cbz	r0, 80006a8 <main+0xec>
 80006a4:	b672      	cpsid	i
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0xea>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006a8:	4684      	mov	ip, r0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80006aa:	220a      	movs	r2, #10
 80006ac:	2301      	movs	r3, #1
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006ae:	f8ad c06c 	strh.w	ip, [sp, #108]	; 0x6c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006b2:	a916      	add	r1, sp, #88	; 0x58
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006b8:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006ba:	f04f 0b00 	mov.w	fp, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80006be:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006c2:	e9cd bc1c 	strd	fp, ip, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80006c6:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  sConfigInjected.InjectedNbrOfConversion = 1;
 80006ca:	951a      	str	r5, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006cc:	f002 ff74 	bl	80035b8 <HAL_ADCEx_InjectedConfigChannel>
 80006d0:	220a      	movs	r2, #10
 80006d2:	4684      	mov	ip, r0
 80006d4:	2301      	movs	r3, #1
 80006d6:	b108      	cbz	r0, 80006dc <main+0x120>
 80006d8:	b672      	cpsid	i
  while (1)
 80006da:	e7fe      	b.n	80006da <main+0x11e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	a90e      	add	r1, sp, #56	; 0x38
 80006de:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_10;
 80006e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	f002 febe 	bl	8003468 <HAL_ADC_ConfigChannel>
 80006ec:	4601      	mov	r1, r0
 80006ee:	b108      	cbz	r0, 80006f4 <main+0x138>
 80006f0:	b672      	cpsid	i
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x136>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006f4:	4632      	mov	r2, r6
 80006f6:	9001      	str	r0, [sp, #4]
 80006f8:	a816      	add	r0, sp, #88	; 0x58
 80006fa:	f006 f837 	bl	800676c <memset>
  hadc2.Instance = ADC2;
 80006fe:	4c60      	ldr	r4, [pc, #384]	; (8000880 <main+0x2c4>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000700:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000702:	4b60      	ldr	r3, [pc, #384]	; (8000884 <main+0x2c8>)
 8000704:	6023      	str	r3, [r4, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800070a:	e9c4 2101 	strd	r2, r1, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800070e:	4620      	mov	r0, r4
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000710:	f44f 6200 	mov.w	r2, #2048	; 0x800
  ADC_ChannelConfTypeDef sConfig = {0};
 8000714:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	e9c4 a10a 	strd	sl, r1, [r4, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 800071c:	910e      	str	r1, [sp, #56]	; 0x38
 800071e:	9111      	str	r1, [sp, #68]	; 0x44
  hadc2.Init.ScanConvMode = ENABLE;
 8000720:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000722:	7621      	strb	r1, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000724:	f884 1020 	strb.w	r1, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000728:	60e2      	str	r2, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 800072a:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800072c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000730:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000732:	f002 fdeb 	bl	800330c <HAL_ADC_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	b108      	cbz	r0, 800073e <main+0x182>
 800073a:	b672      	cpsid	i
  while (1)
 800073c:	e7fe      	b.n	800073c <main+0x180>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800073e:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000742:	a916      	add	r1, sp, #88	; 0x58
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000744:	f04f 0a00 	mov.w	sl, #0
 8000748:	f44f 1b80 	mov.w	fp, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800074c:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800074e:	f04f 080b 	mov.w	r8, #11
 8000752:	f04f 0901 	mov.w	r9, #1
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000756:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800075a:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800075e:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000762:	951a      	str	r5, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000764:	f002 ff28 	bl	80035b8 <HAL_ADCEx_InjectedConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	b108      	cbz	r0, 8000770 <main+0x1b4>
 800076c:	b672      	cpsid	i
  while (1)
 800076e:	e7fe      	b.n	800076e <main+0x1b2>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000770:	4620      	mov	r0, r4
 8000772:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_11;
 8000774:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000778:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077a:	f002 fe75 	bl	8003468 <HAL_ADC_ConfigChannel>
 800077e:	4604      	mov	r4, r0
 8000780:	b108      	cbz	r0, 8000786 <main+0x1ca>
 8000782:	b672      	cpsid	i
  while (1)
 8000784:	e7fe      	b.n	8000784 <main+0x1c8>
  htim1.Instance = TIM1;
 8000786:	4f40      	ldr	r7, [pc, #256]	; (8000888 <main+0x2cc>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000788:	9008      	str	r0, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800078a:	4601      	mov	r1, r0
 800078c:	4632      	mov	r2, r6
 800078e:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000790:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000794:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000798:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800079c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80007a0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a6:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007aa:	f005 ffdf 	bl	800676c <memset>
  htim1.Instance = TIM1;
 80007ae:	4937      	ldr	r1, [pc, #220]	; (800088c <main+0x2d0>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80007b0:	607c      	str	r4, [r7, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80007b2:	f241 4282 	movw	r2, #5250	; 0x1482
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80007b6:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ba:	4638      	mov	r0, r7
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	e9c7 5405 	strd	r5, r4, [r7, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80007c0:	e9c7 2303 	strd	r2, r3, [r7, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80007c4:	60be      	str	r6, [r7, #8]
  htim1.Instance = TIM1;
 80007c6:	6039      	str	r1, [r7, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007c8:	f003 fc84 	bl	80040d4 <HAL_TIM_Base_Init>
 80007cc:	b108      	cbz	r0, 80007d2 <main+0x216>
 80007ce:	b672      	cpsid	i
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x214>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007d2:	4638      	mov	r0, r7
 80007d4:	f003 fd22 	bl	800421c <HAL_TIM_PWM_Init>
 80007d8:	b108      	cbz	r0, 80007de <main+0x222>
 80007da:	b672      	cpsid	i
  while (1)
 80007dc:	e7fe      	b.n	80007dc <main+0x220>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007de:	2206      	movs	r2, #6
 80007e0:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007e2:	a908      	add	r1, sp, #32
 80007e4:	4638      	mov	r0, r7
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007ea:	f003 ff43 	bl	8004674 <HAL_TIM_SlaveConfigSynchro>
 80007ee:	b108      	cbz	r0, 80007f4 <main+0x238>
 80007f0:	b672      	cpsid	i
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <main+0x236>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007f4:	2220      	movs	r2, #32
 80007f6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f8:	a906      	add	r1, sp, #24
 80007fa:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000800:	f004 f990 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000804:	b108      	cbz	r0, 800080a <main+0x24e>
 8000806:	b672      	cpsid	i
  while (1)
 8000808:	e7fe      	b.n	8000808 <main+0x24c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080a:	2600      	movs	r6, #0
 800080c:	2700      	movs	r7, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800080e:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000810:	2460      	movs	r4, #96	; 0x60
 8000812:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000814:	481c      	ldr	r0, [pc, #112]	; (8000888 <main+0x2cc>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000816:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000818:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 800081e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8000822:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000826:	f003 fd75 	bl	8004314 <HAL_TIM_PWM_ConfigChannel>
 800082a:	b108      	cbz	r0, 8000830 <main+0x274>
 800082c:	b672      	cpsid	i
  while (1)
 800082e:	e7fe      	b.n	800082e <main+0x272>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000830:	4815      	ldr	r0, [pc, #84]	; (8000888 <main+0x2cc>)
 8000832:	2204      	movs	r2, #4
 8000834:	a90e      	add	r1, sp, #56	; 0x38
 8000836:	f003 fd6d 	bl	8004314 <HAL_TIM_PWM_ConfigChannel>
 800083a:	b108      	cbz	r0, 8000840 <main+0x284>
 800083c:	b672      	cpsid	i
  while (1)
 800083e:	e7fe      	b.n	800083e <main+0x282>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <main+0x2cc>)
 8000842:	2208      	movs	r2, #8
 8000844:	a90e      	add	r1, sp, #56	; 0x38
 8000846:	f003 fd65 	bl	8004314 <HAL_TIM_PWM_ConfigChannel>
 800084a:	b108      	cbz	r0, 8000850 <main+0x294>
 800084c:	b672      	cpsid	i
  while (1)
 800084e:	e7fe      	b.n	800084e <main+0x292>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000850:	2470      	movs	r4, #112	; 0x70
 8000852:	f241 4581 	movw	r5, #5249	; 0x1481
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <main+0x2cc>)
 8000858:	220c      	movs	r2, #12
 800085a:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800085c:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000860:	f003 fd58 	bl	8004314 <HAL_TIM_PWM_ConfigChannel>
 8000864:	b1b0      	cbz	r0, 8000894 <main+0x2d8>
 8000866:	b672      	cpsid	i
  while (1)
 8000868:	e7fe      	b.n	8000868 <main+0x2ac>
 800086a:	bf00      	nop
 800086c:	200007c4 	.word	0x200007c4
 8000870:	2000073c 	.word	0x2000073c
 8000874:	40023800 	.word	0x40023800
 8000878:	40020800 	.word	0x40020800
 800087c:	40012000 	.word	0x40012000
 8000880:	200006b4 	.word	0x200006b4
 8000884:	40012100 	.word	0x40012100
 8000888:	200007c8 	.word	0x200007c8
 800088c:	40010000 	.word	0x40010000
 8000890:	0f000001 	.word	0x0f000001
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80008a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a4:	2343      	movs	r3, #67	; 0x43
 80008a6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008aa:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80008ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008b0:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b2:	484c      	ldr	r0, [pc, #304]	; (80009e4 <main+0x428>)
 80008b4:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80008b6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ba:	f004 f975 	bl	8004ba8 <HAL_TIMEx_ConfigBreakDeadTime>
 80008be:	4604      	mov	r4, r0
 80008c0:	b108      	cbz	r0, 80008c6 <main+0x30a>
 80008c2:	b672      	cpsid	i
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <main+0x308>
  htim3.Instance = TIM3;
 80008c6:	4d48      	ldr	r5, [pc, #288]	; (80009e8 <main+0x42c>)
  HAL_TIM_MspPostInit(&htim1);
 80008c8:	4846      	ldr	r0, [pc, #280]	; (80009e4 <main+0x428>)
 80008ca:	f001 fdd5 	bl	8002478 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 80008ce:	4a47      	ldr	r2, [pc, #284]	; (80009ec <main+0x430>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	612c      	str	r4, [r5, #16]
  htim3.Init.Period = M1_HALL_TIM_PERIOD;
 80008d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008d6:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d8:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80008dc:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80008e0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80008e4:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	61ac      	str	r4, [r5, #24]
  htim3.Instance = TIM3;
 80008f2:	602a      	str	r2, [r5, #0]
  htim3.Init.Period = M1_HALL_TIM_PERIOD;
 80008f4:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008f6:	f003 fbed 	bl	80040d4 <HAL_TIM_Base_Init>
 80008fa:	b108      	cbz	r0, 8000900 <main+0x344>
 80008fc:	b672      	cpsid	i
  while (1)
 80008fe:	e7fe      	b.n	80008fe <main+0x342>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000904:	a916      	add	r1, sp, #88	; 0x58
 8000906:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800090a:	f003 fe0f 	bl	800452c <HAL_TIM_ConfigClockSource>
 800090e:	b108      	cbz	r0, 8000914 <main+0x358>
 8000910:	b672      	cpsid	i
  while (1)
 8000912:	e7fe      	b.n	8000912 <main+0x356>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000914:	220f      	movs	r2, #15
 8000916:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000918:	a90e      	add	r1, sp, #56	; 0x38
 800091a:	4628      	mov	r0, r5
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800091c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8000920:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000924:	f004 f8a4 	bl	8004a70 <HAL_TIMEx_HallSensor_Init>
 8000928:	b108      	cbz	r0, 800092e <main+0x372>
 800092a:	b672      	cpsid	i
  while (1)
 800092c:	e7fe      	b.n	800092c <main+0x370>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800092e:	2250      	movs	r2, #80	; 0x50
 8000930:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000932:	a908      	add	r1, sp, #32
 8000934:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000936:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093a:	f004 f8f3 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4602      	mov	r2, r0
 8000940:	b108      	cbz	r0, 8000946 <main+0x38a>
 8000942:	b672      	cpsid	i
  while (1)
 8000944:	e7fe      	b.n	8000944 <main+0x388>
  huart1.Instance = USART1;
 8000946:	482a      	ldr	r0, [pc, #168]	; (80009f0 <main+0x434>)
 8000948:	4d2a      	ldr	r5, [pc, #168]	; (80009f4 <main+0x438>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	6082      	str	r2, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800094c:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	210c      	movs	r1, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8000952:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000956:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart1.Init.BaudRate = 115200;
 800095a:	e9c0 5400 	strd	r5, r4, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800095e:	6141      	str	r1, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000960:	f004 f950 	bl	8004c04 <HAL_UART_Init>
 8000964:	b108      	cbz	r0, 800096a <main+0x3ae>
 8000966:	b672      	cpsid	i
  while (1)
 8000968:	e7fe      	b.n	8000968 <main+0x3ac>
  MX_MotorControl_Init();
 800096a:	f001 fa29 	bl	8001dc0 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2102      	movs	r1, #2
 8000972:	2012      	movs	r0, #18
 8000974:	f002 ff1c 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000978:	2012      	movs	r0, #18
 800097a:	f002 ff51 	bl	8003820 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	4611      	mov	r1, r2
 8000982:	2019      	movs	r0, #25
 8000984:	f002 ff14 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000988:	2019      	movs	r0, #25
 800098a:	f002 ff49 	bl	8003820 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 800098e:	2201      	movs	r2, #1
 8000990:	2104      	movs	r1, #4
 8000992:	2018      	movs	r0, #24
 8000994:	f002 ff0c 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000998:	2018      	movs	r0, #24
 800099a:	f002 ff41 	bl	8003820 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2103      	movs	r1, #3
 80009a2:	201d      	movs	r0, #29
 80009a4:	f002 ff04 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009a8:	201d      	movs	r0, #29
 80009aa:	f002 ff39 	bl	8003820 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2103      	movs	r1, #3
 80009b2:	2025      	movs	r0, #37	; 0x25
 80009b4:	f002 fefc 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b8:	2025      	movs	r0, #37	; 0x25
 80009ba:	f002 ff31 	bl	8003820 <HAL_NVIC_EnableIRQ>
  POWER_CONTROL_SETTING();
 80009be:	f001 faf5 	bl	8001fac <POWER_CONTROL_SETTING>
  TIMER_CONTROL_SETTING();
 80009c2:	f002 f80f 	bl	80029e4 <TIMER_CONTROL_SETTING>
  LIGHT_CONTROL_SETTING();
 80009c6:	f002 f813 	bl	80029f0 <LIGHT_CONTROL_SETTING>
  MESSAGE_CONTROL_SETTING();
 80009ca:	f002 f817 	bl	80029fc <MESSAGE_CONTROL_SETTING>
  TX_TIMER_CONTROL_SETTING();
 80009ce:	f002 f81b 	bl	8002a08 <TX_TIMER_CONTROL_SETTING>
  msg_retransmission_control();
 80009d2:	f001 ff33 	bl	800283c <msg_retransmission_control>
  Tail_Light_Control(0x01);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f001 fefa 	bl	80027d0 <Tail_Light_Control>
	  power_ctl();
 80009dc:	f001 fa22 	bl	8001e24 <power_ctl>
  while (1)
 80009e0:	e7fc      	b.n	80009dc <main+0x420>
 80009e2:	bf00      	nop
 80009e4:	200007c8 	.word	0x200007c8
 80009e8:	200006fc 	.word	0x200006fc
 80009ec:	40000400 	.word	0x40000400
 80009f0:	20000784 	.word	0x20000784
 80009f4:	40011000 	.word	0x40011000

080009f8 <Error_Handler>:
 80009f8:	b672      	cpsid	i
  while (1)
 80009fa:	e7fe      	b.n	80009fa <Error_Handler+0x2>

080009fc <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 80009fc:	4b01      	ldr	r3, [pc, #4]	; (8000a04 <MC_StopMotor1+0x8>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	f000 b842 	b.w	8000a88 <MCI_StopMotor>
 8000a04:	200008e0 	.word	0x200008e0

08000a08 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000a08:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <MC_ProgramSpeedRampMotor1+0xc>)
{
 8000a0a:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000a0c:	4601      	mov	r1, r0
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	f000 b810 	b.w	8000a34 <MCI_ExecSpeedRamp>
 8000a14:	200008e0 	.word	0x200008e0

08000a18 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000a18:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000a1a:	2400      	movs	r4, #0
 8000a1c:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000a1e:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8000a20:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 8000a22:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000a24:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8000a26:	e9c0 1200 	strd	r1, r2, [r0]
}
 8000a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8000a2e:	6083      	str	r3, [r0, #8]
}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000a34:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a36:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000a3a:	2401      	movs	r4, #1
 8000a3c:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000a3e:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000a40:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000a44:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a46:	8303      	strh	r3, [r0, #24]
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000a4c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a4e:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000a50:	2402      	movs	r4, #2
 8000a52:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000a54:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000a56:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000a5a:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a5c:	8303      	strh	r3, [r0, #24]
}
 8000a5e:	4770      	bx	lr

08000a60 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000a60:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000a62:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a64:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8000a66:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000a6a:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a6c:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000a6e:	b002      	add	sp, #8
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000a74:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000a76:	2103      	movs	r1, #3
{
 8000a78:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000a7a:	6800      	ldr	r0, [r0, #0]
 8000a7c:	f005 fc74 	bl	8006368 <STM_NextState>

  if ( RetVal == true )
 8000a80:	b108      	cbz	r0, 8000a86 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a82:	2301      	movs	r3, #1
 8000a84:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000a86:	bd10      	pop	{r4, pc}

08000a88 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000a88:	6800      	ldr	r0, [r0, #0]
 8000a8a:	2107      	movs	r1, #7
 8000a8c:	f005 bc6c 	b.w	8006368 <STM_NextState>

08000a90 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000a90:	6800      	ldr	r0, [r0, #0]
 8000a92:	f005 bcdf 	b.w	8006454 <STM_FaultAcknowledged>
 8000a96:	bf00      	nop

08000a98 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000a98:	6800      	ldr	r0, [r0, #0]
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	f005 bc64 	b.w	8006368 <STM_NextState>

08000aa0 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000aa0:	b178      	cbz	r0, 8000ac2 <MCI_ExecBufferedCommands+0x22>
{
 8000aa2:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000aa4:	7e03      	ldrb	r3, [r0, #24]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	d000      	beq.n	8000aae <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000aac:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000aae:	7b01      	ldrb	r1, [r0, #12]
 8000ab0:	2902      	cmp	r1, #2
 8000ab2:	d020      	beq.n	8000af6 <MCI_ExecBufferedCommands+0x56>
 8000ab4:	2903      	cmp	r1, #3
 8000ab6:	d005      	beq.n	8000ac4 <MCI_ExecBufferedCommands+0x24>
 8000ab8:	2901      	cmp	r1, #1
 8000aba:	d00c      	beq.n	8000ad6 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000abc:	2303      	movs	r3, #3
 8000abe:	7623      	strb	r3, [r4, #24]
}
 8000ac0:	bd10      	pop	{r4, pc}
 8000ac2:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000ac4:	6882      	ldr	r2, [r0, #8]
 8000ac6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000aca:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000ace:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	7623      	strb	r3, [r4, #24]
}
 8000ad4:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000ad6:	6883      	ldr	r3, [r0, #8]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000ade:	6840      	ldr	r0, [r0, #4]
 8000ae0:	f005 fb7c 	bl	80061dc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000ae4:	8ae2      	ldrh	r2, [r4, #22]
 8000ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aea:	6860      	ldr	r0, [r4, #4]
 8000aec:	f005 fb7a 	bl	80061e4 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d0e3      	beq.n	8000abc <MCI_ExecBufferedCommands+0x1c>
 8000af4:	e7ec      	b.n	8000ad0 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000af6:	6883      	ldr	r3, [r0, #8]
 8000af8:	2100      	movs	r1, #0
 8000afa:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000afe:	6840      	ldr	r0, [r0, #4]
 8000b00:	f005 fb6c 	bl	80061dc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000b04:	8ae2      	ldrh	r2, [r4, #22]
 8000b06:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000b0a:	6860      	ldr	r0, [r4, #4]
 8000b0c:	f005 fb6a 	bl	80061e4 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d0d3      	beq.n	8000abc <MCI_ExecBufferedCommands+0x1c>
 8000b14:	e7dc      	b.n	8000ad0 <MCI_ExecBufferedCommands+0x30>
 8000b16:	bf00      	nop

08000b18 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000b18:	6800      	ldr	r0, [r0, #0]
 8000b1a:	f005 bc99 	b.w	8006450 <STM_GetState>
 8000b1e:	bf00      	nop

08000b20 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000b20:	7e40      	ldrb	r0, [r0, #25]
 8000b22:	4770      	bx	lr

08000b24 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000b24:	7b03      	ldrb	r3, [r0, #12]
 8000b26:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000b28:	bf0c      	ite	eq
 8000b2a:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000b2e:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000b34:	6840      	ldr	r0, [r0, #4]
 8000b36:	f005 bb9d 	b.w	8006274 <STC_StopRamp>
 8000b3a:	bf00      	nop

08000b3c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000b3c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000b3e:	6840      	ldr	r0, [r0, #4]
 8000b40:	f005 fb32 	bl	80061a8 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000b44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000b48:	f005 badc 	b.w	8006104 <SPD_GetAvrgMecSpeedUnit>

08000b4c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000b4c:	6840      	ldr	r0, [r0, #4]
 8000b4e:	f005 bb35 	b.w	80061bc <STC_GetMecSpeedRefUnit>
 8000b52:	bf00      	nop

08000b54 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000b54:	6882      	ldr	r2, [r0, #8]
 8000b56:	6810      	ldr	r0, [r2, #0]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	b282      	uxth	r2, r0
 8000b5c:	f362 030f 	bfi	r3, r2, #0, #16
 8000b60:	0c00      	lsrs	r0, r0, #16
 8000b62:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b66:	b082      	sub	sp, #8
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	b002      	add	sp, #8
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000b70:	6882      	ldr	r2, [r0, #8]
 8000b72:	6850      	ldr	r0, [r2, #4]
 8000b74:	2300      	movs	r3, #0
 8000b76:	b282      	uxth	r2, r0
 8000b78:	f362 030f 	bfi	r3, r2, #0, #16
 8000b7c:	0c00      	lsrs	r0, r0, #16
 8000b7e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b82:	b082      	sub	sp, #8
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	b002      	add	sp, #8
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000b8c:	6882      	ldr	r2, [r0, #8]
 8000b8e:	68d0      	ldr	r0, [r2, #12]
 8000b90:	2300      	movs	r3, #0
 8000b92:	b282      	uxth	r2, r0
 8000b94:	f362 030f 	bfi	r3, r2, #0, #16
 8000b98:	0c00      	lsrs	r0, r0, #16
 8000b9a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b9e:	b082      	sub	sp, #8
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	b002      	add	sp, #8
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000ba8:	6882      	ldr	r2, [r0, #8]
 8000baa:	6910      	ldr	r0, [r2, #16]
 8000bac:	2300      	movs	r3, #0
 8000bae:	b282      	uxth	r2, r0
 8000bb0:	f362 030f 	bfi	r3, r2, #0, #16
 8000bb4:	0c00      	lsrs	r0, r0, #16
 8000bb6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000bba:	b082      	sub	sp, #8
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	b002      	add	sp, #8
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000bc4:	6882      	ldr	r2, [r0, #8]
 8000bc6:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	b282      	uxth	r2, r0
 8000bce:	f362 030f 	bfi	r3, r2, #0, #16
 8000bd2:	0c00      	lsrs	r0, r0, #16
 8000bd4:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000bd8:	b082      	sub	sp, #8
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	b002      	add	sp, #8
 8000bde:	4770      	bx	lr

08000be0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000be0:	6882      	ldr	r2, [r0, #8]
 8000be2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000be6:	2300      	movs	r3, #0
 8000be8:	b282      	uxth	r2, r0
 8000bea:	f362 030f 	bfi	r3, r2, #0, #16
 8000bee:	0c00      	lsrs	r0, r0, #16
 8000bf0:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000bf4:	b082      	sub	sp, #8
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	b002      	add	sp, #8
 8000bfa:	4770      	bx	lr

08000bfc <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000bfc:	6883      	ldr	r3, [r0, #8]
}
 8000bfe:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000c02:	4770      	bx	lr

08000c04 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000c04:	2300      	movs	r3, #0
 8000c06:	6882      	ldr	r2, [r0, #8]
 8000c08:	f361 030f 	bfi	r3, r1, #0, #16
 8000c0c:	f361 431f 	bfi	r3, r1, #16, #16
 8000c10:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000c18:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000c1a:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000c1e:	f005 fb69 	bl	80062f4 <STC_GetDefaultIqdref>
 8000c22:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000c26:	8220      	strh	r0, [r4, #16]
 8000c28:	8263      	strh	r3, [r4, #18]
}
 8000c2a:	bd10      	pop	{r4, pc}

08000c2c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000c2c:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000c2e:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000c32:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000c36:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000c3a:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000c3e:	4250      	negs	r0, r2
 8000c40:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000c44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000c48:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000c4a:	da05      	bge.n	8000c58 <MCM_Clarke+0x2c>
 8000c4c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000c4e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000c52:	da0c      	bge.n	8000c6e <MCM_Clarke+0x42>
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <MCM_Clarke+0x50>)
 8000c56:	e001      	b.n	8000c5c <MCM_Clarke+0x30>
 8000c58:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	2000      	movs	r0, #0
 8000c60:	b292      	uxth	r2, r2
 8000c62:	f363 000f 	bfi	r0, r3, #0, #16
 8000c66:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000c6a:	b004      	add	sp, #16
 8000c6c:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <MCM_Clarke+0x50>)
 8000c70:	b20a      	sxth	r2, r1
 8000c72:	4282      	cmp	r2, r0
 8000c74:	bfb8      	it	lt
 8000c76:	4602      	movlt	r2, r0
 8000c78:	e7f0      	b.n	8000c5c <MCM_Clarke+0x30>
 8000c7a:	bf00      	nop
 8000c7c:	ffff8001 	.word	0xffff8001

08000c80 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000c80:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000c84:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c88:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000c8c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8000c90:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c92:	d028      	beq.n	8000ce6 <MCM_Trig_Functions+0x66>
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	d816      	bhi.n	8000cca <MCM_Trig_Functions+0x4a>
 8000c9c:	b361      	cbz	r1, 8000cf8 <MCM_Trig_Functions+0x78>
 8000c9e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000ca2:	d109      	bne.n	8000cb8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ca4:	b2c0      	uxtb	r0, r0
 8000ca6:	43c3      	mvns	r3, r0
 8000ca8:	491a      	ldr	r1, [pc, #104]	; (8000d14 <MCM_Trig_Functions+0x94>)
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cb0:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	2000      	movs	r0, #0
 8000cbc:	b292      	uxth	r2, r2
 8000cbe:	f363 000f 	bfi	r0, r3, #0, #16
 8000cc2:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000cc6:	b002      	add	sp, #8
 8000cc8:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000cca:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000cce:	d1f3      	bne.n	8000cb8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cd0:	4910      	ldr	r1, [pc, #64]	; (8000d14 <MCM_Trig_Functions+0x94>)
 8000cd2:	b2c0      	uxtb	r0, r0
 8000cd4:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cd6:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cda:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cdc:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cde:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ce2:	b21b      	sxth	r3, r3
      break;
 8000ce4:	e7e8      	b.n	8000cb8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ce6:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ce8:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cf2:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 8000cf6:	e7df      	b.n	8000cb8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cf8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cfa:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cfc:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d04:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d08:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d0a:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d0c:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d0e:	b212      	sxth	r2, r2
      break;
 8000d10:	e7d2      	b.n	8000cb8 <MCM_Trig_Functions+0x38>
 8000d12:	bf00      	nop
 8000d14:	08006884 	.word	0x08006884

08000d18 <MCM_Park>:
{
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	4605      	mov	r5, r0
 8000d1e:	9001      	str	r0, [sp, #4]
 8000d20:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000d22:	4608      	mov	r0, r1
 8000d24:	f7ff ffac 	bl	8000c80 <MCM_Trig_Functions>
 8000d28:	b22d      	sxth	r5, r5
 8000d2a:	b204      	sxth	r4, r0
 8000d2c:	1436      	asrs	r6, r6, #16
 8000d2e:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000d30:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000d34:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8000d38:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000d3c:	da12      	bge.n	8000d64 <MCM_Park+0x4c>
 8000d3e:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000d40:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000d44:	4914      	ldr	r1, [pc, #80]	; (8000d98 <MCM_Park+0x80>)
 8000d46:	da21      	bge.n	8000d8c <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000d48:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000d4c:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000d50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000d54:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000d58:	da07      	bge.n	8000d6a <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8000d5a:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000d5e:	da0f      	bge.n	8000d80 <MCM_Park+0x68>
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <MCM_Park+0x80>)
 8000d62:	e004      	b.n	8000d6e <MCM_Park+0x56>
 8000d64:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000d68:	e7ee      	b.n	8000d48 <MCM_Park+0x30>
 8000d6a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000d6e:	b28a      	uxth	r2, r1
 8000d70:	2000      	movs	r0, #0
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	f362 000f 	bfi	r0, r2, #0, #16
 8000d78:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000d7c:	b004      	add	sp, #16
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MCM_Park+0x80>)
 8000d82:	b213      	sxth	r3, r2
 8000d84:	4283      	cmp	r3, r0
 8000d86:	bfb8      	it	lt
 8000d88:	4603      	movlt	r3, r0
 8000d8a:	e7f0      	b.n	8000d6e <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	4291      	cmp	r1, r2
 8000d90:	bfb8      	it	lt
 8000d92:	4611      	movlt	r1, r2
 8000d94:	e7d8      	b.n	8000d48 <MCM_Park+0x30>
 8000d96:	bf00      	nop
 8000d98:	ffff8001 	.word	0xffff8001

08000d9c <MCM_Rev_Park>:
{
 8000d9c:	b530      	push	{r4, r5, lr}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	4604      	mov	r4, r0
 8000da2:	9001      	str	r0, [sp, #4]
 8000da4:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000da6:	4608      	mov	r0, r1
 8000da8:	f7ff ff6a 	bl	8000c80 <MCM_Trig_Functions>
 8000dac:	142d      	asrs	r5, r5, #16
 8000dae:	1403      	asrs	r3, r0, #16
 8000db0:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000db2:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000db6:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000db8:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000dbc:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000dc0:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000dc4:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000dce:	f362 000f 	bfi	r0, r2, #0, #16
 8000dd2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000dd6:	b005      	add	sp, #20
 8000dd8:	bd30      	pop	{r4, r5, pc}
 8000dda:	bf00      	nop

08000ddc <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <FOC_Clear+0x74>)
 8000de4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8000de8:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000dec:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8000dee:	2500      	movs	r5, #0
{
 8000df0:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 8000df2:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000df6:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8000df8:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8000dfa:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000dfe:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 8000e02:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000e06:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8000e0a:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000e10:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000e12:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000e16:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000e1a:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000e1c:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000e1e:	50d5      	str	r5, [r2, r3]
 8000e20:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000e24:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000e26:	f004 ff2f 	bl	8005c88 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <FOC_Clear+0x7c>)
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000e32:	f004 ff29 	bl	8005c88 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <FOC_Clear+0x80>)
 8000e38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000e3c:	f005 f9b6 	bl	80061ac <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <FOC_Clear+0x84>)
 8000e42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000e4a:	f005 b921 	b.w	8006090 <PWMC_SwitchOffPWM>
 8000e4e:	bf00      	nop
 8000e50:	20000828 	.word	0x20000828
 8000e54:	2000081c 	.word	0x2000081c
 8000e58:	200008d8 	.word	0x200008d8
 8000e5c:	200008dc 	.word	0x200008dc
 8000e60:	20000814 	.word	0x20000814

08000e64 <MCboot>:
{
 8000e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e68:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 8000e6c:	ed9f 8a5e 	vldr	s16, [pc, #376]	; 8000fe8 <MCboot+0x184>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000e70:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8001040 <MCboot+0x1dc>
  HALL_Init (&HALL_M1);
 8000e74:	4f5d      	ldr	r7, [pc, #372]	; (8000fec <MCboot+0x188>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000e76:	4d5e      	ldr	r5, [pc, #376]	; (8000ff0 <MCboot+0x18c>)
  pBusSensorM1 = &VirtualBusVoltageSensorParamsM1;
 8000e78:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8001044 <MCboot+0x1e0>
  NTC_Init(&TempSensorParamsM1);
 8000e7c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8001048 <MCboot+0x1e4>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000e80:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 800104c <MCboot+0x1e8>
{
 8000e84:	b085      	sub	sp, #20
 8000e86:	4602      	mov	r2, r0
  STM_Init(&STM[M1]);
 8000e88:	ee18 0a10 	vmov	r0, s16
{
 8000e8c:	e9cd 2100 	strd	r2, r1, [sp]
  STM_Init(&STM[M1]);
 8000e90:	f005 fa46 	bl	8006320 <STM_Init>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000e94:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <MCboot+0x190>)
 8000e96:	4858      	ldr	r0, [pc, #352]	; (8000ff8 <MCboot+0x194>)
  pCLM[M1] = &CircleLimitationM1;
 8000e98:	4a58      	ldr	r2, [pc, #352]	; (8000ffc <MCboot+0x198>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000e9a:	6018      	str	r0, [r3, #0]
  bMCBootCompleted = 0;
 8000e9c:	4b58      	ldr	r3, [pc, #352]	; (8001000 <MCboot+0x19c>)
  pCLM[M1] = &CircleLimitationM1;
 8000e9e:	4959      	ldr	r1, [pc, #356]	; (8001004 <MCboot+0x1a0>)
 8000ea0:	6011      	str	r1, [r2, #0]
  bMCBootCompleted = 0;
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	701c      	strb	r4, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8000ea6:	f004 fc8d 	bl	80057c4 <ICS_Init>
  startTimers();
 8000eaa:	f004 ff73 	bl	8005d94 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000eae:	4640      	mov	r0, r8
 8000eb0:	f004 fed6 	bl	8005c60 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000eb4:	4b54      	ldr	r3, [pc, #336]	; (8001008 <MCboot+0x1a4>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000eb6:	4a55      	ldr	r2, [pc, #340]	; (800100c <MCboot+0x1a8>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000eb8:	f8c3 8000 	str.w	r8, [r3]
 8000ebc:	461e      	mov	r6, r3
  HALL_Init (&HALL_M1);
 8000ebe:	4638      	mov	r0, r7
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000ec0:	602a      	str	r2, [r5, #0]
  HALL_Init (&HALL_M1);
 8000ec2:	f004 f837 	bl	8004f34 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000ec6:	6831      	ldr	r1, [r6, #0]
 8000ec8:	6828      	ldr	r0, [r5, #0]
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000eca:	4e51      	ldr	r6, [pc, #324]	; (8001010 <MCboot+0x1ac>)
  oMCInterface[M1] = & Mci[M1];
 8000ecc:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8001050 <MCboot+0x1ec>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000ed0:	463a      	mov	r2, r7
 8000ed2:	f005 f955 	bl	8006180 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000ed6:	484e      	ldr	r0, [pc, #312]	; (8001010 <MCboot+0x1ac>)
 8000ed8:	f004 fec2 	bl	8005c60 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000edc:	484d      	ldr	r0, [pc, #308]	; (8001014 <MCboot+0x1b0>)
 8000ede:	f004 febf 	bl	8005c60 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000ee2:	494d      	ldr	r1, [pc, #308]	; (8001018 <MCboot+0x1b4>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000ee4:	4a4d      	ldr	r2, [pc, #308]	; (800101c <MCboot+0x1b8>)
  pBusSensorM1 = &VirtualBusVoltageSensorParamsM1;
 8000ee6:	484e      	ldr	r0, [pc, #312]	; (8001020 <MCboot+0x1bc>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000ee8:	600e      	str	r6, [r1, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000eea:	4e4a      	ldr	r6, [pc, #296]	; (8001014 <MCboot+0x1b0>)
 8000eec:	6016      	str	r6, [r2, #0]
  pBusSensorM1 = &VirtualBusVoltageSensorParamsM1;
 8000eee:	f8cb 0000 	str.w	r0, [fp]
  VVBS_Init(pBusSensorM1);
 8000ef2:	f005 fbd3 	bl	800669c <VVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000ef6:	4a4b      	ldr	r2, [pc, #300]	; (8001024 <MCboot+0x1c0>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000ef8:	f8db 1000 	ldr.w	r1, [fp]
 8000efc:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000f00:	4949      	ldr	r1, [pc, #292]	; (8001028 <MCboot+0x1c4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000f02:	4e4a      	ldr	r6, [pc, #296]	; (800102c <MCboot+0x1c8>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000f04:	600a      	str	r2, [r1, #0]
  NTC_Init(&TempSensorParamsM1);
 8000f06:	4648      	mov	r0, r9
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000f08:	f8c2 a10c 	str.w	sl, [r2, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000f0c:	f004 fe64 	bl	8005bd8 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000f10:	4a47      	ldr	r2, [pc, #284]	; (8001030 <MCboot+0x1cc>)
 8000f12:	4848      	ldr	r0, [pc, #288]	; (8001034 <MCboot+0x1d0>)
 8000f14:	6010      	str	r0, [r2, #0]
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000f16:	f8c6 9000 	str.w	r9, [r6]
  REMNG_Init(pREMNG[M1]);
 8000f1a:	f005 f8e7 	bl	80060ec <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000f1e:	f04f 0901 	mov.w	r9, #1
  FOC_Clear(M1);
 8000f22:	4620      	mov	r0, r4
 8000f24:	f7ff ff5a 	bl	8000ddc <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000f28:	f88a 9024 	strb.w	r9, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000f2c:	6828      	ldr	r0, [r5, #0]
 8000f2e:	f005 f9e1 	bl	80062f4 <STC_GetDefaultIqdref>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f3c0 410f 	ubfx	r1, r0, #16, #16
 8000f38:	f8aa 2010 	strh.w	r2, [sl, #16]
 8000f3c:	f8aa 1012 	strh.w	r1, [sl, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f40:	6828      	ldr	r0, [r5, #0]
 8000f42:	f005 f9d7 	bl	80062f4 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000f46:	493c      	ldr	r1, [pc, #240]	; (8001038 <MCboot+0x1d4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f48:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000f4a:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f4e:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f52:	4653      	mov	r3, sl
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f54:	f8aa c014 	strh.w	ip, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f58:	4608      	mov	r0, r1
 8000f5a:	ee18 1a10 	vmov	r1, s16
 8000f5e:	f7ff fd5b 	bl	8000a18 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000f62:	6828      	ldr	r0, [r5, #0]
 8000f64:	f8d8 a000 	ldr.w	sl, [r8]
 8000f68:	f005 f9ba 	bl	80062e0 <STC_GetMecSpeedRefUnitDefault>
 8000f6c:	4622      	mov	r2, r4
 8000f6e:	4601      	mov	r1, r0
 8000f70:	4650      	mov	r0, sl
 8000f72:	f7ff fd5f 	bl	8000a34 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000f76:	4824      	ldr	r0, [pc, #144]	; (8001008 <MCboot+0x1a4>)
  pMCIList[M1] = oMCInterface[M1];
 8000f78:	f8d8 e000 	ldr.w	lr, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000f7c:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000f80:	f8d6 8000 	ldr.w	r8, [r6]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000f84:	4824      	ldr	r0, [pc, #144]	; (8001018 <MCboot+0x1b4>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f86:	4e28      	ldr	r6, [pc, #160]	; (8001028 <MCboot+0x1c4>)
  MCT[M1].pPIDId = pPIDId[M1];
 8000f88:	4924      	ldr	r1, [pc, #144]	; (800101c <MCboot+0x1b8>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <MCboot+0x190>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <MCboot+0x1d8>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000f8e:	f8db a000 	ldr.w	sl, [fp]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000f92:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f94:	f8d6 b000 	ldr.w	fp, [r6]
  pMCIList[M1] = oMCInterface[M1];
 8000f98:	9e00      	ldr	r6, [sp, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000f9a:	6809      	ldr	r1, [r1, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000f9c:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000f9e:	6812      	ldr	r2, [r2, #0]
  pMCIList[M1] = oMCInterface[M1];
 8000fa0:	f8c6 e000 	str.w	lr, [r6]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000fa4:	e9c3 c000 	strd	ip, r0, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000fa8:	e9c3 8a0b 	strd	r8, sl, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000fac:	e9c3 4705 	strd	r4, r7, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000fb0:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000fb4:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8000fb8:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8000fbc:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  MCT[M1].pPIDId = pPIDId[M1];
 8000fc0:	6099      	str	r1, [r3, #8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000fc2:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000fc4:	f8c3 b03c 	str.w	fp, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000fc8:	60dc      	str	r4, [r3, #12]
  MCT[M1].pStateMachine = &STM[M1];
 8000fca:	ed83 8a0a 	vstr	s16, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 8000fce:	651c      	str	r4, [r3, #80]	; 0x50
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000fd0:	611a      	str	r2, [r3, #16]
  pMCTList[M1] = &MCT[M1];
 8000fd2:	9a01      	ldr	r2, [sp, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <MCboot+0x19c>)
 8000fd8:	f883 9000 	strb.w	r9, [r3]
}
 8000fdc:	b005      	add	sp, #20
 8000fde:	ecbd 8b02 	vpop	{d8}
 8000fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200008c8 	.word	0x200008c8
 8000fec:	200000b4 	.word	0x200000b4
 8000ff0:	200008dc 	.word	0x200008dc
 8000ff4:	20000814 	.word	0x20000814
 8000ff8:	20000314 	.word	0x20000314
 8000ffc:	200008a4 	.word	0x200008a4
 8001000:	20000630 	.word	0x20000630
 8001004:	20000000 	.word	0x20000000
 8001008:	20000818 	.word	0x20000818
 800100c:	200003a0 	.word	0x200003a0
 8001010:	200001a8 	.word	0x200001a8
 8001014:	2000017c 	.word	0x2000017c
 8001018:	2000081c 	.word	0x2000081c
 800101c:	200008d8 	.word	0x200008d8
 8001020:	200003fc 	.word	0x200003fc
 8001024:	20000200 	.word	0x20000200
 8001028:	200008d4 	.word	0x200008d4
 800102c:	20000810 	.word	0x20000810
 8001030:	200008d0 	.word	0x200008d0
 8001034:	20000388 	.word	0x20000388
 8001038:	200008ac 	.word	0x200008ac
 800103c:	20000850 	.word	0x20000850
 8001040:	200001d4 	.word	0x200001d4
 8001044:	200008a8 	.word	0x200008a8
 8001048:	200003d4 	.word	0x200003d4
 800104c:	20000828 	.word	0x20000828
 8001050:	20000820 	.word	0x20000820

08001054 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001058:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <FOC_CalcCurrRef+0x24>)
 800105c:	2426      	movs	r4, #38	; 0x26
 800105e:	fb04 3400 	mla	r4, r4, r0, r3
 8001062:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001066:	b103      	cbz	r3, 800106a <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001068:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <FOC_CalcCurrRef+0x28>)
 800106c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001070:	f005 f904 	bl	800627c <STC_CalcTorqueReference>
 8001074:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001076:	8220      	strh	r0, [r4, #16]
}
 8001078:	bd10      	pop	{r4, pc}
 800107a:	bf00      	nop
 800107c:	20000828 	.word	0x20000828
 8001080:	200008dc 	.word	0x200008dc

08001084 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001084:	4b01      	ldr	r3, [pc, #4]	; (800108c <TSK_SetChargeBootCapDelayM1+0x8>)
 8001086:	8018      	strh	r0, [r3, #0]
}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000632 	.word	0x20000632

08001090 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001092:	8818      	ldrh	r0, [r3, #0]
 8001094:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001096:	fab0 f080 	clz	r0, r0
 800109a:	0940      	lsrs	r0, r0, #5
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000632 	.word	0x20000632

080010a4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80010a4:	4b01      	ldr	r3, [pc, #4]	; (80010ac <TSK_SetStopPermanencyTimeM1+0x8>)
 80010a6:	8018      	strh	r0, [r3, #0]
}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000636 	.word	0x20000636

080010b0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80010b2:	8818      	ldrh	r0, [r3, #0]
 80010b4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80010b6:	fab0 f080 	clz	r0, r0
 80010ba:	0940      	lsrs	r0, r0, #5
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000636 	.word	0x20000636

080010c4 <TSK_MediumFrequencyTaskM1>:
{
 80010c4:	b530      	push	{r4, r5, lr}
 80010c6:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80010c8:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80010ca:	f10d 0106 	add.w	r1, sp, #6
 80010ce:	484d      	ldr	r0, [pc, #308]	; (8001204 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 80010d0:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80010d4:	f004 f876 	bl	80051c4 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80010d8:	4d4b      	ldr	r5, [pc, #300]	; (8001208 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80010da:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80010dc:	6828      	ldr	r0, [r5, #0]
 80010de:	f004 fe25 	bl	8005d2c <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80010e2:	484a      	ldr	r0, [pc, #296]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 80010e4:	f005 f9b4 	bl	8006450 <STM_GetState>
  switch ( StateM1 )
 80010e8:	1ec3      	subs	r3, r0, #3
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d80d      	bhi.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
 80010ee:	e8df f003 	tbb	[pc, r3]
 80010f2:	2b1f      	.short	0x2b1f
 80010f4:	65524330 	.word	0x65524330
 80010f8:	0c0c0c08 	.word	0x0c0c0c08
 80010fc:	6e0c0c0c 	.word	0x6e0c0c0c
 8001100:	0e7c      	.short	0x0e7c
    STM_NextState( &STM[M1], IDLE );
 8001102:	4842      	ldr	r0, [pc, #264]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 8001104:	2100      	movs	r1, #0
 8001106:	f005 f92f 	bl	8006368 <STM_NextState>
}
 800110a:	b003      	add	sp, #12
 800110c:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 800110e:	483d      	ldr	r0, [pc, #244]	; (8001204 <TSK_MediumFrequencyTaskM1+0x140>)
 8001110:	f003 ff92 	bl	8005038 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001114:	483d      	ldr	r0, [pc, #244]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 8001116:	2104      	movs	r1, #4
 8001118:	f005 f926 	bl	8006368 <STM_NextState>
 800111c:	2800      	cmp	r0, #0
 800111e:	d0f4      	beq.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff fe5b 	bl	8000ddc <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001128:	6818      	ldr	r0, [r3, #0]
 800112a:	f004 fbd5 	bl	80058d8 <ICS_SwitchOnPWM>
 800112e:	e7ec      	b.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	f004 fbac 	bl	8005890 <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001138:	2014      	movs	r0, #20
 800113a:	f7ff ffa3 	bl	8001084 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800113e:	2110      	movs	r1, #16
 8001140:	4832      	ldr	r0, [pc, #200]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 8001142:	f005 f911 	bl	8006368 <STM_NextState>
    break;
 8001146:	e7e0      	b.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001148:	2105      	movs	r1, #5
 800114a:	4830      	ldr	r0, [pc, #192]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 800114c:	f005 f90c 	bl	8006368 <STM_NextState>
    break;
 8001150:	e7db      	b.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff ff7e 	bl	8001054 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff ff7d 	bl	8001058 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800115e:	2106      	movs	r1, #6
 8001160:	482a      	ldr	r0, [pc, #168]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 8001162:	f005 f901 	bl	8006368 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <TSK_MediumFrequencyTaskM1+0x150>)
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	f005 f8d1 	bl	8006310 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <TSK_MediumFrequencyTaskM1+0x154>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	f7ff fc95 	bl	8000aa0 <MCI_ExecBufferedCommands>
    break;
 8001176:	e7c8      	b.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <TSK_MediumFrequencyTaskM1+0x154>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	f7ff fc90 	bl	8000aa0 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff ff69 	bl	8001058 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001186:	2c00      	cmp	r4, #0
 8001188:	d1bf      	bne.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 800118a:	4622      	mov	r2, r4
 800118c:	2120      	movs	r1, #32
 800118e:	481f      	ldr	r0, [pc, #124]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 8001190:	f005 f8cc 	bl	800632c <STM_FaultProcessing>
 8001194:	e7b9      	b.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	f004 fbe1 	bl	8005960 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff fe1c 	bl	8000ddc <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80011a4:	6828      	ldr	r0, [r5, #0]
 80011a6:	f004 fcd3 	bl	8005b50 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80011aa:	f44f 7048 	mov.w	r0, #800	; 0x320
 80011ae:	f7ff ff79 	bl	80010a4 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80011b2:	2108      	movs	r1, #8
 80011b4:	4815      	ldr	r0, [pc, #84]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 80011b6:	f005 f8d7 	bl	8006368 <STM_NextState>
    break;
 80011ba:	e7a6      	b.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80011bc:	f7ff ff78 	bl	80010b0 <TSK_StopPermanencyTimeHasElapsedM1>
 80011c0:	2800      	cmp	r0, #0
 80011c2:	d0a2      	beq.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 80011c4:	2109      	movs	r1, #9
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 80011c8:	f005 f8ce 	bl	8006368 <STM_NextState>
 80011cc:	e79d      	b.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80011ce:	f7ff ff5f 	bl	8001090 <TSK_ChargeBootCapDelayHasElapsedM1>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d099      	beq.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <TSK_MediumFrequencyTaskM1+0x14c>)
 80011d8:	2100      	movs	r1, #0
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	f004 ff5a 	bl	8006094 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80011e0:	2111      	movs	r1, #17
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 80011e4:	f005 f8c0 	bl	8006368 <STM_NextState>
 80011e8:	e78f      	b.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <TSK_MediumFrequencyTaskM1+0x14c>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f004 ff50 	bl	8006094 <PWMC_CurrentReadingCalibr>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d088      	beq.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 80011f8:	2112      	movs	r1, #18
 80011fa:	4804      	ldr	r0, [pc, #16]	; (800120c <TSK_MediumFrequencyTaskM1+0x148>)
 80011fc:	f005 f8b4 	bl	8006368 <STM_NextState>
 8001200:	e783      	b.n	800110a <TSK_MediumFrequencyTaskM1+0x46>
 8001202:	bf00      	nop
 8001204:	200000b4 	.word	0x200000b4
 8001208:	200008d4 	.word	0x200008d4
 800120c:	200008c8 	.word	0x200008c8
 8001210:	20000814 	.word	0x20000814
 8001214:	200008dc 	.word	0x200008dc
 8001218:	20000820 	.word	0x20000820

0800121c <MC_Scheduler>:
{
 800121c:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MC_Scheduler+0x48>)
 8001220:	781c      	ldrb	r4, [r3, #0]
 8001222:	2c01      	cmp	r4, #1
 8001224:	d000      	beq.n	8001228 <MC_Scheduler+0xc>
}
 8001226:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001228:	4d0f      	ldr	r5, [pc, #60]	; (8001268 <MC_Scheduler+0x4c>)
 800122a:	882b      	ldrh	r3, [r5, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	b1ab      	cbz	r3, 800125c <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001230:	882b      	ldrh	r3, [r5, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	b29b      	uxth	r3, r3
 8001236:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001238:	4a0c      	ldr	r2, [pc, #48]	; (800126c <MC_Scheduler+0x50>)
 800123a:	8813      	ldrh	r3, [r2, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	b11b      	cbz	r3, 8001248 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001240:	8813      	ldrh	r3, [r2, #0]
 8001242:	3b01      	subs	r3, #1
 8001244:	b29b      	uxth	r3, r3
 8001246:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001248:	4a09      	ldr	r2, [pc, #36]	; (8001270 <MC_Scheduler+0x54>)
 800124a:	8813      	ldrh	r3, [r2, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0e9      	beq.n	8001226 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001252:	8813      	ldrh	r3, [r2, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	b29b      	uxth	r3, r3
 8001258:	8013      	strh	r3, [r2, #0]
}
 800125a:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 800125c:	f7ff ff32 	bl	80010c4 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001260:	802c      	strh	r4, [r5, #0]
 8001262:	e7e9      	b.n	8001238 <MC_Scheduler+0x1c>
 8001264:	20000630 	.word	0x20000630
 8001268:	20000634 	.word	0x20000634
 800126c:	20000632 	.word	0x20000632
 8001270:	20000636 	.word	0x20000636

08001274 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001278:	4830      	ldr	r0, [pc, #192]	; (800133c <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800127a:	4f31      	ldr	r7, [pc, #196]	; (8001340 <TSK_HighFrequencyTask+0xcc>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800127c:	4c31      	ldr	r4, [pc, #196]	; (8001344 <TSK_HighFrequencyTask+0xd0>)
{
 800127e:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 8001280:	f003 ff7e 	bl	8005180 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <TSK_HighFrequencyTask+0xd4>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	f004 ff8e 	bl	80061a8 <STC_GetSpeedSensor>
 800128c:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800128e:	f004 ff35 	bl	80060fc <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001292:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001294:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001296:	6838      	ldr	r0, [r7, #0]
 8001298:	f004 fdd0 	bl	8005e3c <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 800129c:	9803      	ldr	r0, [sp, #12]
 800129e:	f7ff fcc5 	bl	8000c2c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80012a2:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80012a4:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80012a6:	f7ff fd37 	bl	8000d18 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80012aa:	4a28      	ldr	r2, [pc, #160]	; (800134c <TSK_HighFrequencyTask+0xd8>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80012ac:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80012b0:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80012b2:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80012b4:	1ac9      	subs	r1, r1, r3
 80012b6:	6810      	ldr	r0, [r2, #0]
 80012b8:	f004 fcf2 	bl	8005ca0 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80012bc:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <TSK_HighFrequencyTask+0xdc>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80012c2:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 80012c6:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80012c8:	1a89      	subs	r1, r1, r2
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	f004 fce8 	bl	8005ca0 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <TSK_HighFrequencyTask+0xe0>)
 80012d2:	f8ad 8008 	strh.w	r8, [sp, #8]
 80012d6:	f8ad 000a 	strh.w	r0, [sp, #10]
 80012da:	9902      	ldr	r1, [sp, #8]
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	f003 fdcd 	bl	8004e7c <Circle_Limitation>
 80012e2:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80012e4:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80012e6:	fa0f f883 	sxth.w	r8, r3
 80012ea:	141d      	asrs	r5, r3, #16
 80012ec:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80012ee:	f004 ff0d 	bl	800610c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80012f2:	4631      	mov	r1, r6
 80012f4:	9802      	ldr	r0, [sp, #8]
 80012f6:	f7ff fd51 	bl	8000d9c <MCM_Rev_Park>
 80012fa:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80012fc:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80012fe:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001300:	f004 fd9e 	bl	8005e40 <PWMC_SetPhaseVoltage>
 8001304:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001306:	9803      	ldr	r0, [sp, #12]
 8001308:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800130a:	9804      	ldr	r0, [sp, #16]
 800130c:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800130e:	9801      	ldr	r0, [sp, #4]
 8001310:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001312:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001314:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001316:	f8a4 8016 	strh.w	r8, [r4, #22]
 800131a:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 800131c:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 800131e:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8001322:	d003      	beq.n	800132c <TSK_HighFrequencyTask+0xb8>
}
 8001324:	2000      	movs	r0, #0
 8001326:	b006      	add	sp, #24
 8001328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <TSK_HighFrequencyTask+0xe4>)
 8001330:	f004 fffc 	bl	800632c <STM_FaultProcessing>
}
 8001334:	2000      	movs	r0, #0
 8001336:	b006      	add	sp, #24
 8001338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800133c:	200000b4 	.word	0x200000b4
 8001340:	20000814 	.word	0x20000814
 8001344:	20000828 	.word	0x20000828
 8001348:	200008dc 	.word	0x200008dc
 800134c:	2000081c 	.word	0x2000081c
 8001350:	200008d8 	.word	0x200008d8
 8001354:	200008a4 	.word	0x200008a4
 8001358:	200008c8 	.word	0x200008c8

0800135c <TSK_SafetyTask_PWMOFF>:
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <TSK_SafetyTask_PWMOFF+0x70>)
{
 800135e:	b570      	push	{r4, r5, r6, lr}
 8001360:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001362:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001366:	4e1a      	ldr	r6, [pc, #104]	; (80013d0 <TSK_SafetyTask_PWMOFF+0x74>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001368:	f004 fc48 	bl	8005bfc <NTC_CalcAvTemp>
 800136c:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800136e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001372:	f004 feb9 	bl	80060e8 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001376:	f025 010e 	bic.w	r1, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800137a:	4301      	orrs	r1, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800137c:	4d15      	ldr	r5, [pc, #84]	; (80013d4 <TSK_SafetyTask_PWMOFF+0x78>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800137e:	b289      	uxth	r1, r1
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001380:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001384:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8001388:	43ca      	mvns	r2, r1
 800138a:	b292      	uxth	r2, r2
 800138c:	4628      	mov	r0, r5
 800138e:	f004 ffcd 	bl	800632c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001392:	4628      	mov	r0, r5
 8001394:	f005 f85c 	bl	8006450 <STM_GetState>
 8001398:	280a      	cmp	r0, #10
 800139a:	d002      	beq.n	80013a2 <TSK_SafetyTask_PWMOFF+0x46>
 800139c:	280b      	cmp	r0, #11
 800139e:	d00e      	beq.n	80013be <TSK_SafetyTask_PWMOFF+0x62>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80013a6:	f004 fe73 	bl	8006090 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff fd16 	bl	8000ddc <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <TSK_SafetyTask_PWMOFF+0x7c>)
 80013b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80013b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80013ba:	f004 bbc9 	b.w	8005b50 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80013c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013c6:	f004 be63 	b.w	8006090 <PWMC_SwitchOffPWM>
 80013ca:	bf00      	nop
 80013cc:	20000810 	.word	0x20000810
 80013d0:	20000814 	.word	0x20000814
 80013d4:	200008c8 	.word	0x200008c8
 80013d8:	200008d4 	.word	0x200008d4

080013dc <TSK_SafetyTask>:
{
 80013dc:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <TSK_SafetyTask+0x1c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d000      	beq.n	80013e8 <TSK_SafetyTask+0xc>
}
 80013e6:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff ffb7 	bl	800135c <TSK_SafetyTask_PWMOFF>
}
 80013ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80013f2:	f000 bef5 	b.w	80021e0 <RCM_ExecUserConv>
 80013f6:	bf00      	nop
 80013f8:	20000630 	.word	0x20000630

080013fc <MC_RunMotorControlTasks>:
{
 80013fc:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MC_RunMotorControlTasks+0x1c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b903      	cbnz	r3, 8001406 <MC_RunMotorControlTasks+0xa>
}
 8001404:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001406:	f7ff ff09 	bl	800121c <MC_Scheduler>
    TSK_SafetyTask();
 800140a:	f7ff ffe7 	bl	80013dc <TSK_SafetyTask>
}
 800140e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001412:	f001 bb5b 	b.w	8002acc <UI_Scheduler>
 8001416:	bf00      	nop
 8001418:	20000630 	.word	0x20000630

0800141c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800141c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <TSK_HardwareFaultTask+0x18>)
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f004 fa9d 	bl	8005960 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <TSK_HardwareFaultTask+0x1c>)
 800142c:	2200      	movs	r2, #0
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	f004 bf7c 	b.w	800632c <STM_FaultProcessing>
 8001434:	20000814 	.word	0x20000814
 8001438:	200008c8 	.word	0x200008c8

0800143c <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800143e:	493f      	ldr	r1, [pc, #252]	; (800153c <mc_lock_pins+0x100>)
 8001440:	4c3f      	ldr	r4, [pc, #252]	; (8001540 <mc_lock_pins+0x104>)
 8001442:	61cc      	str	r4, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001444:	2602      	movs	r6, #2
 8001446:	61ce      	str	r6, [r1, #28]
 8001448:	b08d      	sub	sp, #52	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800144a:	61cc      	str	r4, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 800144c:	69ca      	ldr	r2, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <mc_lock_pins+0x108>)
  temp = READ_REG(GPIOx->LCKR);
 8001450:	920b      	str	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001452:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001456:	2501      	movs	r5, #1
  (void) temp;
 8001458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800145a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800145c:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800145e:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001460:	69df      	ldr	r7, [r3, #28]
 8001462:	970a      	str	r7, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001464:	4a38      	ldr	r2, [pc, #224]	; (8001548 <mc_lock_pins+0x10c>)
  (void) temp;
 8001466:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800146a:	4f38      	ldr	r7, [pc, #224]	; (800154c <mc_lock_pins+0x110>)
 800146c:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800146e:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8001472:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001476:	61d7      	str	r7, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001478:	69d7      	ldr	r7, [r2, #28]
 800147a:	9709      	str	r7, [sp, #36]	; 0x24
  (void) temp;
 800147c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001480:	4f33      	ldr	r7, [pc, #204]	; (8001550 <mc_lock_pins+0x114>)
 8001482:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001484:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8001488:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800148c:	61d7      	str	r7, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800148e:	69d7      	ldr	r7, [r2, #28]
 8001490:	9708      	str	r7, [sp, #32]
  (void) temp;
 8001492:	f8dd c020 	ldr.w	ip, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001496:	4f2f      	ldr	r7, [pc, #188]	; (8001554 <mc_lock_pins+0x118>)
 8001498:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800149a:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800149e:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a2:	61d7      	str	r7, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014a4:	69d7      	ldr	r7, [r2, #28]
 80014a6:	9707      	str	r7, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014a8:	f44f 7c00 	mov.w	ip, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ac:	f44f 3781 	mov.w	r7, #66048	; 0x10200
  (void) temp;
 80014b0:	f8dd e01c 	ldr.w	lr, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b4:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014b6:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ba:	61d7      	str	r7, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014bc:	69d7      	ldr	r7, [r2, #28]
 80014be:	9706      	str	r7, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014c0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c4:	f44f 3788 	mov.w	r7, #69632	; 0x11000
  (void) temp;
 80014c8:	f8dd e018 	ldr.w	lr, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014cc:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014ce:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d2:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014d4:	69df      	ldr	r7, [r3, #28]
 80014d6:	9705      	str	r7, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014d8:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014dc:	f44f 37a0 	mov.w	r7, #81920	; 0x14000
  (void) temp;
 80014e0:	f8dd e014 	ldr.w	lr, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014e4:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014e6:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ea:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014ec:	69df      	ldr	r7, [r3, #28]
 80014ee:	9704      	str	r7, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014f0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014f4:	f44f 3782 	mov.w	r7, #66560	; 0x10400
  (void) temp;
 80014f8:	f8dd e010 	ldr.w	lr, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014fc:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014fe:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001502:	61d7      	str	r7, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001504:	69d2      	ldr	r2, [r2, #28]
 8001506:	9203      	str	r2, [sp, #12]
  (void) temp;
 8001508:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800150a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800150c:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800150e:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001514:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001518:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 800151c:	9e02      	ldr	r6, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800151e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001520:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001522:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001528:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800152a:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800152c:	61cd      	str	r5, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800152e:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001530:	69cb      	ldr	r3, [r1, #28]
 8001532:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001534:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 8001536:	b00d      	add	sp, #52	; 0x34
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153a:	bf00      	nop
 800153c:	40020800 	.word	0x40020800
 8001540:	00010002 	.word	0x00010002
 8001544:	40020400 	.word	0x40020400
 8001548:	40020000 	.word	0x40020000
 800154c:	00010040 	.word	0x00010040
 8001550:	00010080 	.word	0x00010080
 8001554:	00010100 	.word	0x00010100

08001558 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	460c      	mov	r4, r1
 800155c:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 800155e:	2100      	movs	r1, #0
{
 8001560:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001562:	0962      	lsrs	r2, r4, #5
{
 8001564:	461f      	mov	r7, r3
 8001566:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8001568:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 800156c:	d142      	bne.n	80015f4 <MCP_ReceivedFrame+0x9c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800156e:	2c12      	cmp	r4, #18
 8001570:	d874      	bhi.n	800165c <MCP_ReceivedFrame+0x104>
 8001572:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001576:	0036      	.short	0x0036
 8001578:	011a007b 	.word	0x011a007b
 800157c:	0073010d 	.word	0x0073010d
 8001580:	02370073 	.word	0x02370073
 8001584:	00130264 	.word	0x00130264
 8001588:	02a1027c 	.word	0x02a1027c
 800158c:	02d002b9 	.word	0x02d002b9
 8001590:	02fd02ea 	.word	0x02fd02ea
 8001594:	00730073 	.word	0x00730073
 8001598:	00360073 	.word	0x00360073
      uint8_t outBuff[8];
      uint16_t Durationms;
      int16_t FinalMecSpeedUnit;
      int16_t FinalTorque;
      int32_t rpm;
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800159c:	f10d 030e 	add.w	r3, sp, #14
 80015a0:	7831      	ldrb	r1, [r6, #0]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	f10d 020a 	add.w	r2, sp, #10
 80015a8:	ab03      	add	r3, sp, #12
 80015aa:	4628      	mov	r0, r5
 80015ac:	f001 fdea 	bl	8003184 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80015b0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[0] = (uint8_t)(rpm);
      outBuff[1] = (uint8_t)(rpm >> 8);
      outBuff[2] = (uint8_t)(rpm >> 16);
      outBuff[3] = (uint8_t)(rpm >> 24);
      outBuff[4] = (uint8_t)(FinalTorque);
 80015b4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
      outBuff[6] = (uint8_t)(Durationms);
 80015b8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 80015bc:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80015c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015c4:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 80015c6:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 80015c8:	f8ad 2016 	strh.w	r2, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80015cc:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80015d0:	2308      	movs	r3, #8
 80015d2:	aa04      	add	r2, sp, #16
 80015d4:	21f0      	movs	r1, #240	; 0xf0
 80015d6:	47a0      	blx	r4
    break;
  }

  if (RequireAck)
  {
    if (bNoError)
 80015d8:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80015dc:	2800      	cmp	r0, #0
 80015de:	f040 827b 	bne.w	8001ad8 <MCP_ReceivedFrame+0x580>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80015e2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80015e6:	2301      	movs	r3, #1
 80015e8:	f10d 020e 	add.w	r2, sp, #14
 80015ec:	21ff      	movs	r1, #255	; 0xff
 80015ee:	47a0      	blx	r4
    }
  }
}
 80015f0:	b00d      	add	sp, #52	; 0x34
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80015f4:	3a01      	subs	r2, #1
 80015f6:	f001 faab 	bl	8002b50 <UI_SetReg>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	f000 82c2 	beq.w	8001b84 <MCP_ReceivedFrame+0x62c>
  switch (Code)
 8001600:	f004 041f 	and.w	r4, r4, #31
 8001604:	2c12      	cmp	r4, #18
 8001606:	d829      	bhi.n	800165c <MCP_ReceivedFrame+0x104>
 8001608:	a301      	add	r3, pc, #4	; (adr r3, 8001610 <MCP_ReceivedFrame+0xb8>)
 800160a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800160e:	bf00      	nop
 8001610:	080015d9 	.word	0x080015d9
 8001614:	0800166d 	.word	0x0800166d
 8001618:	080017ab 	.word	0x080017ab
 800161c:	08001791 	.word	0x08001791
 8001620:	0800165d 	.word	0x0800165d
 8001624:	0800165d 	.word	0x0800165d
 8001628:	080019e5 	.word	0x080019e5
 800162c:	08001a3f 	.word	0x08001a3f
 8001630:	0800159d 	.word	0x0800159d
 8001634:	08001a6f 	.word	0x08001a6f
 8001638:	08001ab9 	.word	0x08001ab9
 800163c:	08001ae9 	.word	0x08001ae9
 8001640:	08001b17 	.word	0x08001b17
 8001644:	08001b4b 	.word	0x08001b4b
 8001648:	08001b71 	.word	0x08001b71
 800164c:	0800165d 	.word	0x0800165d
 8001650:	0800165d 	.word	0x0800165d
 8001654:	0800165d 	.word	0x0800165d
 8001658:	080015d9 	.word	0x080015d9
      bErrorCode = ERROR_BAD_FRAME_ID;
 800165c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001660:	2301      	movs	r3, #1
 8001662:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001666:	2800      	cmp	r0, #0
 8001668:	d0bb      	beq.n	80015e2 <MCP_ReceivedFrame+0x8a>
 800166a:	e235      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 800166c:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 800166e:	2305      	movs	r3, #5
 8001670:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001674:	2988      	cmp	r1, #136	; 0x88
 8001676:	f200 82a0 	bhi.w	8001bba <MCP_ReceivedFrame+0x662>
 800167a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800167e:	0348      	.short	0x0348
 8001680:	029e029e 	.word	0x029e029e
 8001684:	029e033e 	.word	0x029e033e
 8001688:	02a702a7 	.word	0x02a702a7
 800168c:	02a702a7 	.word	0x02a702a7
 8001690:	02a702a7 	.word	0x02a702a7
 8001694:	02a702a7 	.word	0x02a702a7
 8001698:	02a702a7 	.word	0x02a702a7
 800169c:	031902a7 	.word	0x031902a7
 80016a0:	029e0319 	.word	0x029e0319
 80016a4:	02a7029e 	.word	0x02a7029e
 80016a8:	02a702a7 	.word	0x02a702a7
 80016ac:	02a702a7 	.word	0x02a702a7
 80016b0:	029e029e 	.word	0x029e029e
 80016b4:	01dc029e 	.word	0x01dc029e
 80016b8:	029e01dc 	.word	0x029e01dc
 80016bc:	029e029e 	.word	0x029e029e
 80016c0:	029e029e 	.word	0x029e029e
 80016c4:	029e029e 	.word	0x029e029e
 80016c8:	029e029e 	.word	0x029e029e
 80016cc:	029e029e 	.word	0x029e029e
 80016d0:	029e029e 	.word	0x029e029e
 80016d4:	029e029e 	.word	0x029e029e
 80016d8:	029e029e 	.word	0x029e029e
 80016dc:	029e029e 	.word	0x029e029e
 80016e0:	029e029e 	.word	0x029e029e
 80016e4:	029e029e 	.word	0x029e029e
 80016e8:	029e029e 	.word	0x029e029e
 80016ec:	029e029e 	.word	0x029e029e
 80016f0:	029e029e 	.word	0x029e029e
 80016f4:	029e029e 	.word	0x029e029e
 80016f8:	029e029e 	.word	0x029e029e
 80016fc:	029e029e 	.word	0x029e029e
 8001700:	029e02a7 	.word	0x029e02a7
 8001704:	029e029e 	.word	0x029e029e
 8001708:	0319029e 	.word	0x0319029e
 800170c:	03190319 	.word	0x03190319
 8001710:	029e029e 	.word	0x029e029e
 8001714:	029e029e 	.word	0x029e029e
 8001718:	029e029e 	.word	0x029e029e
 800171c:	029e02a7 	.word	0x029e02a7
 8001720:	029e029e 	.word	0x029e029e
 8001724:	02a702a7 	.word	0x02a702a7
 8001728:	02a702a7 	.word	0x02a702a7
 800172c:	02a702a7 	.word	0x02a702a7
 8001730:	029e02a7 	.word	0x029e02a7
 8001734:	029e0319 	.word	0x029e0319
 8001738:	029e029e 	.word	0x029e029e
 800173c:	029e029e 	.word	0x029e029e
 8001740:	029e02a7 	.word	0x029e02a7
 8001744:	02a7029e 	.word	0x02a7029e
 8001748:	029e02a7 	.word	0x029e02a7
 800174c:	029e029e 	.word	0x029e029e
 8001750:	029e029e 	.word	0x029e029e
 8001754:	029e029e 	.word	0x029e029e
 8001758:	029e029e 	.word	0x029e029e
 800175c:	029e029e 	.word	0x029e029e
 8001760:	029e029e 	.word	0x029e029e
 8001764:	033e029e 	.word	0x033e029e
 8001768:	03190319 	.word	0x03190319
 800176c:	03190319 	.word	0x03190319
 8001770:	029e0319 	.word	0x029e0319
 8001774:	029e029e 	.word	0x029e029e
 8001778:	03190319 	.word	0x03190319
 800177c:	029e029e 	.word	0x029e029e
 8001780:	029e029e 	.word	0x029e029e
 8001784:	029e029e 	.word	0x029e029e
 8001788:	02a7029e 	.word	0x02a7029e
 800178c:	02a702a7 	.word	0x02a702a7
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001790:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001792:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001794:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001798:	4628      	mov	r0, r5
 800179a:	f001 fc9b 	bl	80030d4 <UI_ExecCmd>
 800179e:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80017a2:	2800      	cmp	r0, #0
 80017a4:	f43f af1d 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 80017a8:	e196      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80017aa:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80017ac:	2303      	movs	r3, #3
 80017ae:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80017b2:	2988      	cmp	r1, #136	; 0x88
 80017b4:	f63f af10 	bhi.w	80015d8 <MCP_ReceivedFrame+0x80>
 80017b8:	a301      	add	r3, pc, #4	; (adr r3, 80017c0 <MCP_ReceivedFrame+0x268>)
 80017ba:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80017be:	bf00      	nop
 80017c0:	08001cd7 	.word	0x08001cd7
 80017c4:	08001be7 	.word	0x08001be7
 80017c8:	08001cd7 	.word	0x08001cd7
 80017cc:	08001cd7 	.word	0x08001cd7
 80017d0:	08001be7 	.word	0x08001be7
 80017d4:	08001b97 	.word	0x08001b97
 80017d8:	08001b97 	.word	0x08001b97
 80017dc:	08001b97 	.word	0x08001b97
 80017e0:	08001b97 	.word	0x08001b97
 80017e4:	08001b97 	.word	0x08001b97
 80017e8:	08001b97 	.word	0x08001b97
 80017ec:	08001b97 	.word	0x08001b97
 80017f0:	08001b97 	.word	0x08001b97
 80017f4:	08001b97 	.word	0x08001b97
 80017f8:	08001b97 	.word	0x08001b97
 80017fc:	08001b97 	.word	0x08001b97
 8001800:	08001b97 	.word	0x08001b97
 8001804:	08001b97 	.word	0x08001b97
 8001808:	08001b97 	.word	0x08001b97
 800180c:	08001b97 	.word	0x08001b97
 8001810:	08001b97 	.word	0x08001b97
 8001814:	08001b97 	.word	0x08001b97
 8001818:	08001b97 	.word	0x08001b97
 800181c:	08001b97 	.word	0x08001b97
 8001820:	08001b97 	.word	0x08001b97
 8001824:	08001b97 	.word	0x08001b97
 8001828:	08001b97 	.word	0x08001b97
 800182c:	08001b97 	.word	0x08001b97
 8001830:	080015d9 	.word	0x080015d9
 8001834:	080015d9 	.word	0x080015d9
 8001838:	08001be7 	.word	0x08001be7
 800183c:	08001b97 	.word	0x08001b97
 8001840:	08001b97 	.word	0x08001b97
 8001844:	08001b97 	.word	0x08001b97
 8001848:	08001cd7 	.word	0x08001cd7
 800184c:	080015d9 	.word	0x080015d9
 8001850:	080015d9 	.word	0x080015d9
 8001854:	080015d9 	.word	0x080015d9
 8001858:	080015d9 	.word	0x080015d9
 800185c:	080015d9 	.word	0x080015d9
 8001860:	080015d9 	.word	0x080015d9
 8001864:	080015d9 	.word	0x080015d9
 8001868:	080015d9 	.word	0x080015d9
 800186c:	080015d9 	.word	0x080015d9
 8001870:	080015d9 	.word	0x080015d9
 8001874:	080015d9 	.word	0x080015d9
 8001878:	080015d9 	.word	0x080015d9
 800187c:	080015d9 	.word	0x080015d9
 8001880:	080015d9 	.word	0x080015d9
 8001884:	080015d9 	.word	0x080015d9
 8001888:	080015d9 	.word	0x080015d9
 800188c:	080015d9 	.word	0x080015d9
 8001890:	080015d9 	.word	0x080015d9
 8001894:	080015d9 	.word	0x080015d9
 8001898:	080015d9 	.word	0x080015d9
 800189c:	080015d9 	.word	0x080015d9
 80018a0:	080015d9 	.word	0x080015d9
 80018a4:	080015d9 	.word	0x080015d9
 80018a8:	080015d9 	.word	0x080015d9
 80018ac:	080015d9 	.word	0x080015d9
 80018b0:	080015d9 	.word	0x080015d9
 80018b4:	080015d9 	.word	0x080015d9
 80018b8:	080015d9 	.word	0x080015d9
 80018bc:	080015d9 	.word	0x080015d9
 80018c0:	080015d9 	.word	0x080015d9
 80018c4:	08001b97 	.word	0x08001b97
 80018c8:	080015d9 	.word	0x080015d9
 80018cc:	080015d9 	.word	0x080015d9
 80018d0:	080015d9 	.word	0x080015d9
 80018d4:	080015d9 	.word	0x080015d9
 80018d8:	08001be7 	.word	0x08001be7
 80018dc:	08001be7 	.word	0x08001be7
 80018e0:	08001be7 	.word	0x08001be7
 80018e4:	08001b97 	.word	0x08001b97
 80018e8:	08001b97 	.word	0x08001b97
 80018ec:	08001b97 	.word	0x08001b97
 80018f0:	08001b97 	.word	0x08001b97
 80018f4:	08001cd7 	.word	0x08001cd7
 80018f8:	08001be7 	.word	0x08001be7
 80018fc:	08001b97 	.word	0x08001b97
 8001900:	08001b97 	.word	0x08001b97
 8001904:	08001b97 	.word	0x08001b97
 8001908:	08001b97 	.word	0x08001b97
 800190c:	08001b97 	.word	0x08001b97
 8001910:	08001b97 	.word	0x08001b97
 8001914:	08001b97 	.word	0x08001b97
 8001918:	08001b97 	.word	0x08001b97
 800191c:	08001b97 	.word	0x08001b97
 8001920:	08001b97 	.word	0x08001b97
 8001924:	08001b97 	.word	0x08001b97
 8001928:	08001cd7 	.word	0x08001cd7
 800192c:	08001be7 	.word	0x08001be7
 8001930:	080015d9 	.word	0x080015d9
 8001934:	08001b97 	.word	0x08001b97
 8001938:	08001b97 	.word	0x08001b97
 800193c:	08001b97 	.word	0x08001b97
 8001940:	08001b97 	.word	0x08001b97
 8001944:	08001b97 	.word	0x08001b97
 8001948:	080015d9 	.word	0x080015d9
 800194c:	080015d9 	.word	0x080015d9
 8001950:	08001b97 	.word	0x08001b97
 8001954:	08001b97 	.word	0x08001b97
 8001958:	08001cd7 	.word	0x08001cd7
 800195c:	08001cd7 	.word	0x08001cd7
 8001960:	08001be7 	.word	0x08001be7
 8001964:	08001be7 	.word	0x08001be7
 8001968:	08001be7 	.word	0x08001be7
 800196c:	08001be7 	.word	0x08001be7
 8001970:	08001be7 	.word	0x08001be7
 8001974:	08001cd7 	.word	0x08001cd7
 8001978:	08001b97 	.word	0x08001b97
 800197c:	08001b97 	.word	0x08001b97
 8001980:	08001be7 	.word	0x08001be7
 8001984:	080015d9 	.word	0x080015d9
 8001988:	08001b97 	.word	0x08001b97
 800198c:	08001b97 	.word	0x08001b97
 8001990:	08001cd7 	.word	0x08001cd7
 8001994:	08001be7 	.word	0x08001be7
 8001998:	08001be7 	.word	0x08001be7
 800199c:	08001be7 	.word	0x08001be7
 80019a0:	08001be7 	.word	0x08001be7
 80019a4:	08001be7 	.word	0x08001be7
 80019a8:	08001be7 	.word	0x08001be7
 80019ac:	08001be7 	.word	0x08001be7
 80019b0:	08001be7 	.word	0x08001be7
 80019b4:	08001be7 	.word	0x08001be7
 80019b8:	08001be7 	.word	0x08001be7
 80019bc:	08001be7 	.word	0x08001be7
 80019c0:	08001cd7 	.word	0x08001cd7
 80019c4:	080015d9 	.word	0x080015d9
 80019c8:	08001cd7 	.word	0x08001cd7
 80019cc:	08001be7 	.word	0x08001be7
 80019d0:	08001be7 	.word	0x08001be7
 80019d4:	08001be7 	.word	0x08001be7
 80019d8:	08001b97 	.word	0x08001b97
 80019dc:	08001b97 	.word	0x08001b97
 80019e0:	08001b97 	.word	0x08001b97
 80019e4:	ac04      	add	r4, sp, #16
 80019e6:	2100      	movs	r1, #0
 80019e8:	4620      	mov	r0, r4
 80019ea:	2220      	movs	r2, #32
 80019ec:	f004 febe 	bl	800676c <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019f0:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 80019f4:	f10d 0012 	add.w	r0, sp, #18
 80019f8:	1e71      	subs	r1, r6, #1
 80019fa:	2300      	movs	r3, #0
 80019fc:	e005      	b.n	8001a0a <MCP_ReceivedFrame+0x4b2>
 80019fe:	3301      	adds	r3, #1
 8001a00:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001a02:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a06:	f000 818d 	beq.w	8001d24 <MCP_ReceivedFrame+0x7cc>
 8001a0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001a0e:	2a09      	cmp	r2, #9
 8001a10:	d1f5      	bne.n	80019fe <MCP_ReceivedFrame+0x4a6>
 8001a12:	1d5a      	adds	r2, r3, #5
 8001a14:	1dd9      	adds	r1, r3, #7
 8001a16:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a18:	5cb2      	ldrb	r2, [r6, r2]
 8001a1a:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a1e:	5c72      	ldrb	r2, [r6, r1]
 8001a20:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a24:	5cf3      	ldrb	r3, [r6, r3]
 8001a26:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001a32:	21f0      	movs	r1, #240	; 0xf0
 8001a34:	47a0      	blx	r4
      bNoError = true;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001a3c:	e04c      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a3e:	7877      	ldrb	r7, [r6, #1]
 8001a40:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a42:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a44:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a46:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a48:	78f1      	ldrb	r1, [r6, #3]
 8001a4a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001a4e:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a52:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001a56:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001a5a:	b292      	uxth	r2, r2
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	f001 fb75 	bl	800314c <UI_ExecSpeedRamp>
 8001a62:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001a66:	2800      	cmp	r0, #0
 8001a68:	f43f adbb 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001a6c:	e034      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a6e:	78b1      	ldrb	r1, [r6, #2]
 8001a70:	7873      	ldrb	r3, [r6, #1]
 8001a72:	78f2      	ldrb	r2, [r6, #3]
 8001a74:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001a76:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001a78:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a7a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001a7e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001a82:	4aaa      	ldr	r2, [pc, #680]	; (8001d2c <MCP_ReceivedFrame+0x7d4>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001a84:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a86:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001a8a:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001a8e:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001a90:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001a94:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001a98:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001a9a:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001a9e:	7831      	ldrb	r1, [r6, #0]
 8001aa0:	9000      	str	r0, [sp, #0]
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	f001 fb8a 	bl	80031c0 <UI_SetRevupData>
 8001aac:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	f43f ad96 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001ab6:	e00f      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001ab8:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001aba:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001abc:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001abe:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001ac0:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001ac4:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001ac8:	b212      	sxth	r2, r2
 8001aca:	b209      	sxth	r1, r1
 8001acc:	4628      	mov	r0, r5
 8001ace:	f001 fb93 	bl	80031f8 <UI_SetCurrentReferences>
      bNoError = true;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	21f0      	movs	r1, #240	; 0xf0
 8001ae2:	47a0      	blx	r4
}
 8001ae4:	b00d      	add	sp, #52	; 0x34
 8001ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001ae8:	4c91      	ldr	r4, [pc, #580]	; (8001d30 <MCP_ReceivedFrame+0x7d8>)
      stepList.data = buffer;
 8001aea:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001aec:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001aee:	4621      	mov	r1, r4
 8001af0:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001af2:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001af6:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001afa:	f001 fb8d 	bl	8003218 <UI_GetMPInfo>
 8001afe:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001b02:	2800      	cmp	r0, #0
 8001b04:	f43f ad6d 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001b08:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 8001b0c:	7923      	ldrb	r3, [r4, #4]
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	21f0      	movs	r1, #240	; 0xf0
 8001b12:	47b0      	blx	r6
  if (RequireAck)
 8001b14:	e56c      	b.n	80015f0 <MCP_ReceivedFrame+0x98>
 8001b16:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001b1a:	ac04      	add	r4, sp, #16
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001b20:	2000      	movs	r0, #0
 8001b22:	e005      	b.n	8001b30 <MCP_ReceivedFrame+0x5d8>
 8001b24:	3001      	adds	r0, #1
 8001b26:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001b28:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001b2c:	f43f af7d 	beq.w	8001a2a <MCP_ReceivedFrame+0x4d2>
 8001b30:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001b34:	b2c6      	uxtb	r6, r0
 8001b36:	2900      	cmp	r1, #0
 8001b38:	d1f4      	bne.n	8001b24 <MCP_ReceivedFrame+0x5cc>
        outBuff[i] = 0;
 8001b3a:	f1c6 021f 	rsb	r2, r6, #31
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	3201      	adds	r2, #1
 8001b42:	4420      	add	r0, r4
 8001b44:	f004 fe12 	bl	800676c <memset>
 8001b48:	e76f      	b.n	8001a2a <MCP_ReceivedFrame+0x4d2>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001b4a:	7970      	ldrb	r0, [r6, #5]
 8001b4c:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001b4e:	7873      	ldrb	r3, [r6, #1]
 8001b50:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001b52:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001b56:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001b5a:	b292      	uxth	r2, r2
 8001b5c:	b209      	sxth	r1, r1
 8001b5e:	4628      	mov	r0, r5
 8001b60:	f001 fb06 	bl	8003170 <UI_ExecTorqueRamp>
 8001b64:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	f43f ad3a 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001b6e:	e7b3      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
    		switch(bSysID)
 8001b70:	7833      	ldrb	r3, [r6, #0]
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	f63f ad30 	bhi.w	80015d8 <MCP_ReceivedFrame+0x80>
 8001b78:	e8df f003 	tbb	[pc, r3]
 8001b7c:	7781898d 	.word	0x7781898d
 8001b80:	5466      	.short	0x5466
 8001b82:	47          	.byte	0x47
 8001b83:	00          	.byte	0x00
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001b84:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001b88:	230b      	movs	r3, #11
 8001b8a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	f43f ad27 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001b94:	e7a0      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001b96:	f10d 0209 	add.w	r2, sp, #9
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f001 f898 	bl	8002cd0 <UI_GetReg>
          if ( bNoError == true )
 8001ba0:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ba4:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f43f ad1b 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001bac:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	aa04      	add	r2, sp, #16
 8001bb4:	21f0      	movs	r1, #240	; 0xf0
 8001bb6:	47a0      	blx	r4
  if (RequireAck)
 8001bb8:	e51a      	b.n	80015f0 <MCP_ReceivedFrame+0x98>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001bba:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	f43f ad0c 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001bca:	e785      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001bcc:	78b2      	ldrb	r2, [r6, #2]
 8001bce:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001bd6:	f000 ffbb 	bl	8002b50 <UI_SetReg>
 8001bda:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001bde:	2800      	cmp	r0, #0
 8001be0:	f43f acff 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001be4:	e778      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001be6:	f10d 0209 	add.w	r2, sp, #9
 8001bea:	4628      	mov	r0, r5
 8001bec:	f001 f870 	bl	8002cd0 <UI_GetReg>
          if ( bNoError == true )
 8001bf0:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001bf4:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f43f acf3 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001bfc:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001c00:	2304      	movs	r3, #4
 8001c02:	aa04      	add	r2, sp, #16
 8001c04:	21f0      	movs	r1, #240	; 0xf0
 8001c06:	47a0      	blx	r4
  if (RequireAck)
 8001c08:	e4f2      	b.n	80015f0 <MCP_ReceivedFrame+0x98>
    				pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, &LIGHT_TOGGLE,1);
 8001c0a:	69ec      	ldr	r4, [r5, #28]
 8001c0c:	4a49      	ldr	r2, [pc, #292]	; (8001d34 <MCP_ReceivedFrame+0x7dc>)
 8001c0e:	69a8      	ldr	r0, [r5, #24]
 8001c10:	2301      	movs	r3, #1
 8001c12:	21f0      	movs	r1, #240	; 0xf0
 8001c14:	47a0      	blx	r4
    				bNoError = true;
 8001c16:	2301      	movs	r3, #1
    				Tail_Light_Control(0x00);
 8001c18:	2000      	movs	r0, #0
    				bNoError = true;
 8001c1a:	f88d 3009 	strb.w	r3, [sp, #9]
    				Tail_Light_Control(0x00);
 8001c1e:	f000 fdd7 	bl	80027d0 <Tail_Light_Control>
 8001c22:	e4d9      	b.n	80015d8 <MCP_ReceivedFrame+0x80>
    				pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, &LIGHT_OFF,1);
 8001c24:	4a44      	ldr	r2, [pc, #272]	; (8001d38 <MCP_ReceivedFrame+0x7e0>)
 8001c26:	69ec      	ldr	r4, [r5, #28]
 8001c28:	69a8      	ldr	r0, [r5, #24]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	21f0      	movs	r1, #240	; 0xf0
 8001c2e:	47a0      	blx	r4
    				bNoError = true;
 8001c30:	2301      	movs	r3, #1
    				Tail_Light_Control(0x02);
 8001c32:	2002      	movs	r0, #2
    				bNoError = true;
 8001c34:	f88d 3009 	strb.w	r3, [sp, #9]
    				Tail_Light_Control(0x02);
 8001c38:	f000 fdca 	bl	80027d0 <Tail_Light_Control>
  if (RequireAck)
 8001c3c:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 8001c40:	2800      	cmp	r0, #0
 8001c42:	f43f acce 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001c46:	e747      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
    				pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR,&LIGHT_ON,1);
 8001c48:	4a3c      	ldr	r2, [pc, #240]	; (8001d3c <MCP_ReceivedFrame+0x7e4>)
 8001c4a:	69ec      	ldr	r4, [r5, #28]
 8001c4c:	69a8      	ldr	r0, [r5, #24]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	21f0      	movs	r1, #240	; 0xf0
 8001c52:	47a0      	blx	r4
    				bNoError = true;
 8001c54:	2001      	movs	r0, #1
 8001c56:	f88d 0009 	strb.w	r0, [sp, #9]
    				Tail_Light_Control(0x01);
 8001c5a:	f000 fdb9 	bl	80027d0 <Tail_Light_Control>
  if (RequireAck)
 8001c5e:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 8001c62:	2800      	cmp	r0, #0
 8001c64:	f43f acbd 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001c68:	e736      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
    				pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR,&SERINUM,1);
 8001c6a:	69ec      	ldr	r4, [r5, #28]
 8001c6c:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <MCP_ReceivedFrame+0x7e8>)
 8001c6e:	69a8      	ldr	r0, [r5, #24]
 8001c70:	2301      	movs	r3, #1
 8001c72:	21f0      	movs	r1, #240	; 0xf0
 8001c74:	47a0      	blx	r4
    				bNoError = true;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001c7c:	e72c      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
    				HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port,HEARTBEAT_Pin);
 8001c7e:	4831      	ldr	r0, [pc, #196]	; (8001d44 <MCP_ReceivedFrame+0x7ec>)
 8001c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c84:	f001 ff34 	bl	8003af0 <HAL_GPIO_TogglePin>
    				pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR,&HEARTBEAT,1);
 8001c88:	69ec      	ldr	r4, [r5, #28]
 8001c8a:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <MCP_ReceivedFrame+0x7f0>)
 8001c8c:	e7ef      	b.n	8001c6e <MCP_ReceivedFrame+0x716>
                    POWER = 0x01;
 8001c8e:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <MCP_ReceivedFrame+0x7f4>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
  if (RequireAck)
 8001c94:	e4ac      	b.n	80015f0 <MCP_ReceivedFrame+0x98>
    				 pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR,&POWER_OFF, 1);
 8001c96:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <MCP_ReceivedFrame+0x7f8>)
 8001c98:	69ec      	ldr	r4, [r5, #28]
 8001c9a:	69a8      	ldr	r0, [r5, #24]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	21f0      	movs	r1, #240	; 0xf0
 8001ca0:	47a0      	blx	r4
    				 POWER = 0x00;
 8001ca2:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <MCP_ReceivedFrame+0x7f4>)
 8001ca4:	2100      	movs	r1, #0
    				 bNoError = true;
 8001ca6:	2301      	movs	r3, #1
    				 POWER = 0x00;
 8001ca8:	7011      	strb	r1, [r2, #0]
    				 bNoError = true;
 8001caa:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001cae:	e713      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001cb0:	78b4      	ldrb	r4, [r6, #2]
 8001cb2:	7873      	ldrb	r3, [r6, #1]
 8001cb4:	78f0      	ldrb	r0, [r6, #3]
 8001cb6:	7932      	ldrb	r2, [r6, #4]
 8001cb8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001cbc:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001cc0:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	f000 ff43 	bl	8002b50 <UI_SetReg>
 8001cca:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	f43f ac87 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001cd4:	e700      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001cd6:	f10d 0209 	add.w	r2, sp, #9
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f000 fff8 	bl	8002cd0 <UI_GetReg>
           if ( bNoError == true )
 8001ce0:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ce4:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f43f ac7b 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001cec:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	aa04      	add	r2, sp, #16
 8001cf4:	21f0      	movs	r1, #240	; 0xf0
 8001cf6:	47a0      	blx	r4
  if (RequireAck)
 8001cf8:	e47a      	b.n	80015f0 <MCP_ReceivedFrame+0x98>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001cfa:	7872      	ldrb	r2, [r6, #1]
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	f000 ff27 	bl	8002b50 <UI_SetReg>
 8001d02:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001d06:	2800      	cmp	r0, #0
 8001d08:	f43f ac6b 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001d0c:	e6e4      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001d0e:	7872      	ldrb	r2, [r6, #1]
 8001d10:	2100      	movs	r1, #0
 8001d12:	4628      	mov	r0, r5
 8001d14:	f000 ff1c 	bl	8002b50 <UI_SetReg>
 8001d18:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	f43f ac60 	beq.w	80015e2 <MCP_ReceivedFrame+0x8a>
 8001d22:	e6d9      	b.n	8001ad8 <MCP_ReceivedFrame+0x580>
 8001d24:	2326      	movs	r3, #38	; 0x26
 8001d26:	2124      	movs	r1, #36	; 0x24
 8001d28:	2222      	movs	r2, #34	; 0x22
 8001d2a:	e675      	b.n	8001a18 <MCP_ReceivedFrame+0x4c0>
 8001d2c:	2aaaaaab 	.word	0x2aaaaaab
 8001d30:	20000638 	.word	0x20000638
 8001d34:	20000547 	.word	0x20000547
 8001d38:	20000545 	.word	0x20000545
 8001d3c:	20000546 	.word	0x20000546
 8001d40:	20000549 	.word	0x20000549
 8001d44:	40020800 	.word	0x40020800
 8001d48:	20000544 	.word	0x20000544
 8001d4c:	200007c4 	.word	0x200007c4
 8001d50:	20000548 	.word	0x20000548

08001d54 <MCP_WaitNextFrame>:
{
 8001d54:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001d56:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001d58:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001d5a:	6980      	ldr	r0, [r0, #24]
 8001d5c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001d64:	69a0      	ldr	r0, [r4, #24]
 8001d66:	6a23      	ldr	r3, [r4, #32]
}
 8001d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001d6c:	4718      	bx	r3
 8001d6e:	bf00      	nop

08001d70 <MCP_Init>:
{
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d72:	b083      	sub	sp, #12
 8001d74:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 8001d76:	4f0b      	ldr	r7, [pc, #44]	; (8001da4 <MCP_Init+0x34>)
{
 8001d78:	4608      	mov	r0, r1
 8001d7a:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001d7c:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 8001d7e:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 8001d82:	4616      	mov	r6, r2
 8001d84:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 8001d86:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <MCP_Init+0x38>)
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MCP_Init+0x3c>)
 8001d8a:	9700      	str	r7, [sp, #0]
 8001d8c:	4621      	mov	r1, r4
{
 8001d8e:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001d90:	f003 f8b2 	bl	8004ef8 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8001d94:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001d98:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff ffda 	bl	8001d54 <MCP_WaitNextFrame>
}
 8001da0:	b003      	add	sp, #12
 8001da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da4:	08001db1 	.word	0x08001db1
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001559 	.word	0x08001559

08001db0 <MCP_OnTimeOut>:
{
 8001db0:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001db2:	f7ff ffcf 	bl	8001d54 <MCP_WaitNextFrame>
}
 8001db6:	bd08      	pop	{r3, pc}

08001db8 <MCP_SentFrame>:
{
 8001db8:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001dba:	f7ff ffcb 	bl	8001d54 <MCP_WaitNextFrame>
}
 8001dbe:	bd08      	pop	{r3, pc}

08001dc0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001dc0:	b530      	push	{r4, r5, lr}
 8001dc2:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001dc4:	f002 f960 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001dca:	4d0c      	ldr	r5, [pc, #48]	; (8001dfc <MX_MotorControl_Init+0x3c>)
 8001dcc:	4c0c      	ldr	r4, [pc, #48]	; (8001e00 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001dce:	fba3 3000 	umull	r3, r0, r3, r0
 8001dd2:	09c0      	lsrs	r0, r0, #7
 8001dd4:	f001 fd44 	bl	8003860 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001dd8:	4629      	mov	r1, r5
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff f842 	bl	8000e64 <MCboot>
  mc_lock_pins();
 8001de0:	f7ff fb2c 	bl	800143c <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_MotorControl_Init+0x44>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4807      	ldr	r0, [pc, #28]	; (8001e08 <MX_MotorControl_Init+0x48>)
 8001dea:	462b      	mov	r3, r5
 8001dec:	4622      	mov	r2, r4
 8001dee:	2101      	movs	r1, #1
 8001df0:	f000 fe2c 	bl	8002a4c <UI_TaskInit>
}
 8001df4:	b003      	add	sp, #12
 8001df6:	bd30      	pop	{r4, r5, pc}
 8001df8:	10624dd3 	.word	0x10624dd3
 8001dfc:	200008e4 	.word	0x200008e4
 8001e00:	200008e0 	.word	0x200008e0
 8001e04:	08006ab4 	.word	0x08006ab4
 8001e08:	2000054c 	.word	0x2000054c

08001e0c <power_control_config>:
static Power_Control *control;
static Power_Status_Indicator *status;

void power_control_config(Power_Control *cmd)
{
    control = cmd;
 8001e0c:	4b01      	ldr	r3, [pc, #4]	; (8001e14 <power_control_config+0x8>)
 8001e0e:	6018      	str	r0, [r3, #0]
}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000640 	.word	0x20000640

08001e18 <power_indicator_config>:

void power_indicator_config(Power_Status_Indicator *indicator)
{
	status = indicator;
 8001e18:	4b01      	ldr	r3, [pc, #4]	; (8001e20 <power_indicator_config+0x8>)
 8001e1a:	6018      	str	r0, [r3, #0]
}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000644 	.word	0x20000644

08001e24 <power_ctl>:

void power_ctl()
{
    switch(POWER)
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <power_ctl+0x28>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d003      	beq.n	8001e34 <power_ctl+0x10>
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d009      	beq.n	8001e44 <power_ctl+0x20>
 8001e30:	b123      	cbz	r3, 8001e3c <power_ctl+0x18>
    	   status -> switch_on();
    	   break;
       default:
    	   break;
    }
}
 8001e32:	4770      	bx	lr
    	   control -> wake();
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <power_ctl+0x2c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4718      	bx	r3
    	   control -> sleep();
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <power_ctl+0x2c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4718      	bx	r3
    	   status -> switch_on();
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <power_ctl+0x30>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4718      	bx	r3
 8001e4c:	200007c4 	.word	0x200007c4
 8001e50:	20000640 	.word	0x20000640
 8001e54:	20000644 	.word	0x20000644

08001e58 <light_indicator_off>:
	HAL_GPIO_WritePin(POWER_INDICATOR_GPIO_Port,POWER_INDICATOR_Pin,GPIO_PIN_SET);
}

static void light_indicator_off()
{
	HAL_GPIO_WritePin(POWER_INDICATOR_GPIO_Port,POWER_INDICATOR_Pin,GPIO_PIN_RESET);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <light_indicator_off+0xc>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e60:	f001 be42 	b.w	8003ae8 <HAL_GPIO_WritePin>
 8001e64:	40020800 	.word	0x40020800

08001e68 <light_indicator_on>:
	HAL_GPIO_WritePin(POWER_INDICATOR_GPIO_Port,POWER_INDICATOR_Pin,GPIO_PIN_SET);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <light_indicator_on+0xc>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e70:	f001 be3a 	b.w	8003ae8 <HAL_GPIO_WritePin>
 8001e74:	40020800 	.word	0x40020800

08001e78 <system_boot>:
	HAL_NVIC_SystemReset();
 8001e78:	f001 bce0 	b.w	800383c <HAL_NVIC_SystemReset>

08001e7c <power_off>:
{
 8001e7c:	b538      	push	{r3, r4, r5, lr}
	if(stop == 0)
 8001e7e:	4c48      	ldr	r4, [pc, #288]	; (8001fa0 <power_off+0x124>)
 8001e80:	7825      	ldrb	r5, [r4, #0]
 8001e82:	b115      	cbz	r5, 8001e8a <power_off+0xe>
	else if(stop == 1)
 8001e84:	2d01      	cmp	r5, #1
 8001e86:	d011      	beq.n	8001eac <power_off+0x30>
}
 8001e88:	bd38      	pop	{r3, r4, r5, pc}
		MC_ProgramSpeedRampMotor1(0,200);
 8001e8a:	21c8      	movs	r1, #200	; 0xc8
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	f7fe fdbb 	bl	8000a08 <MC_ProgramSpeedRampMotor1>
		HAL_Delay(500);
 8001e92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e96:	f001 fa1f 	bl	80032d8 <HAL_Delay>
		MC_StopMotor1();
 8001e9a:	f7fe fdaf 	bl	80009fc <MC_StopMotor1>
		HAL_Delay(2000);
 8001e9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ea2:	f001 fa19 	bl	80032d8 <HAL_Delay>
		stop = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	7023      	strb	r3, [r4, #0]
}
 8001eaa:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port,HEARTBEAT_Pin,GPIO_PIN_RESET);
 8001eac:	483d      	ldr	r0, [pc, #244]	; (8001fa4 <power_off+0x128>)
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8001eae:	4c3e      	ldr	r4, [pc, #248]	; (8001fa8 <power_off+0x12c>)
		HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port,HEARTBEAT_Pin,GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb6:	f001 fe17 	bl	8003ae8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(POWER_INDICATOR_GPIO_Port,POWER_INDICATOR_Pin,GPIO_PIN_RESET);
 8001eba:	483a      	ldr	r0, [pc, #232]	; (8001fa4 <power_off+0x128>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ec2:	f001 fe11 	bl	8003ae8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SAFETY_LIGHT_GPIO_Port,SAFETY_LIGHT_Pin,GPIO_PIN_RESET);
 8001ec6:	4837      	ldr	r0, [pc, #220]	; (8001fa4 <power_off+0x128>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	f001 fe0c 	bl	8003ae8 <HAL_GPIO_WritePin>
		HAL_SuspendTick();
 8001ed0:	f001 fa14 	bl	80032fc <HAL_SuspendTick>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8001ed4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ed6:	f023 0304 	bic.w	r3, r3, #4
 8001eda:	6323      	str	r3, [r4, #48]	; 0x30
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8001edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6323      	str	r3, [r4, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8001ee4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ee6:	f023 0302 	bic.w	r3, r3, #2
 8001eea:	6323      	str	r3, [r4, #48]	; 0x30
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8001eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ef2:	6323      	str	r3, [r4, #48]	; 0x30
	__HAL_RCC_TIM2_CLK_DISABLE();
 8001ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_RCC_TIM3_CLK_DISABLE();
 8001efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001efe:	f023 0302 	bic.w	r3, r3, #2
 8001f02:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_RCC_TIM1_CLK_DISABLE();
 8001f04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6463      	str	r3, [r4, #68]	; 0x44
	__HAL_RCC_TIM4_CLK_DISABLE();
 8001f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_RCC_ADC1_CLK_DISABLE();
 8001f14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1a:	6463      	str	r3, [r4, #68]	; 0x44
	__HAL_RCC_ADC2_CLK_DISABLE();
 8001f1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f22:	6463      	str	r3, [r4, #68]	; 0x44
	__HAL_RCC_PWR_CLK_DISABLE();
 8001f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_RCC_SYSCFG_CLK_DISABLE();
 8001f2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f32:	6463      	str	r3, [r4, #68]	; 0x44
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8001f34:	4629      	mov	r1, r5
 8001f36:	4628      	mov	r0, r5
 8001f38:	f001 fde2 	bl	8003b00 <HAL_PWR_EnterSLEEPMode>
	__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE();
 8001f3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6523      	str	r3, [r4, #80]	; 0x50
	__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 8001f44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f46:	f023 0302 	bic.w	r3, r3, #2
 8001f4a:	6523      	str	r3, [r4, #80]	; 0x50
	__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE();
 8001f4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f4e:	f023 0304 	bic.w	r3, r3, #4
 8001f52:	6523      	str	r3, [r4, #80]	; 0x50
    __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE();
 8001f54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f5a:	6523      	str	r3, [r4, #80]	; 0x50
    __HAL_RCC_TIM1_CLK_SLEEP_DISABLE();
 8001f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	6663      	str	r3, [r4, #100]	; 0x64
    __HAL_RCC_TIM2_CLK_SLEEP_DISABLE();
 8001f64:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_RCC_TIM3_CLK_SLEEP_DISABLE();
 8001f6c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f6e:	f023 0302 	bic.w	r3, r3, #2
 8001f72:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_RCC_TIM4_CLK_SLEEP_DISABLE();
 8001f74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f76:	f023 0304 	bic.w	r3, r3, #4
 8001f7a:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_RCC_ADC1_CLK_SLEEP_DISABLE();
 8001f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f82:	6663      	str	r3, [r4, #100]	; 0x64
    __HAL_RCC_ADC2_CLK_SLEEP_DISABLE();
 8001f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f8a:	6663      	str	r3, [r4, #100]	; 0x64
    __HAL_RCC_PWR_CLK_SLEEP_DISABLE();
 8001f8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE();
 8001f94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f9a:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001f9c:	bd38      	pop	{r3, r4, r5, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000648 	.word	0x20000648
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40023800 	.word	0x40023800

08001fac <POWER_CONTROL_SETTING>:
{
 8001fac:	b508      	push	{r3, lr}
    power_control_config(&power_control);
 8001fae:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <POWER_CONTROL_SETTING+0x14>)
 8001fb0:	f7ff ff2c 	bl	8001e0c <power_control_config>
}
 8001fb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    power_indicator_config(&power_status_indicator);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <POWER_CONTROL_SETTING+0x18>)
 8001fba:	f7ff bf2d 	b.w	8001e18 <power_indicator_config>
 8001fbe:	bf00      	nop
 8001fc0:	20000550 	.word	0x20000550
 8001fc4:	20000558 	.word	0x20000558

08001fc8 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fc8:	4b66      	ldr	r3, [pc, #408]	; (8002164 <RCM_RegisterRegConv+0x19c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
{
 8001fcc:	b4f0      	push	{r4, r5, r6, r7}
 8001fce:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fd0:	2a00      	cmp	r2, #0
 8001fd2:	f000 808f 	beq.w	80020f4 <RCM_RegisterRegConv+0x12c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fd6:	7904      	ldrb	r4, [r0, #4]
 8001fd8:	7910      	ldrb	r0, [r2, #4]
 8001fda:	4284      	cmp	r4, r0
 8001fdc:	d01e      	beq.n	800201c <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fde:	685d      	ldr	r5, [r3, #4]
 8001fe0:	2d00      	cmp	r5, #0
 8001fe2:	f000 80ad 	beq.w	8002140 <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fe6:	792a      	ldrb	r2, [r5, #4]
 8001fe8:	42a2      	cmp	r2, r4
  uint8_t handle=255;
 8001fea:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fee:	f000 8089 	beq.w	8002104 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ff2:	689e      	ldr	r6, [r3, #8]
 8001ff4:	b1fe      	cbz	r6, 8002036 <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001ff6:	7932      	ldrb	r2, [r6, #4]
 8001ff8:	42a2      	cmp	r2, r4
 8001ffa:	f000 8094 	beq.w	8002126 <RCM_RegisterRegConv+0x15e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ffe:	68dd      	ldr	r5, [r3, #12]
 8002000:	2d00      	cmp	r5, #0
 8002002:	f000 8099 	beq.w	8002138 <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002006:	792a      	ldrb	r2, [r5, #4]
 8002008:	42a2      	cmp	r2, r4
 800200a:	f000 80a8 	beq.w	800215e <RCM_RegisterRegConv+0x196>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 800200e:	2803      	cmp	r0, #3
 8002010:	bf98      	it	ls
 8002012:	680a      	ldrls	r2, [r1, #0]
 8002014:	d91e      	bls.n	8002054 <RCM_RegisterRegConv+0x8c>
 8002016:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002018:	bcf0      	pop	{r4, r5, r6, r7}
 800201a:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800201c:	6810      	ldr	r0, [r2, #0]
 800201e:	680a      	ldr	r2, [r1, #0]
 8002020:	4290      	cmp	r0, r2
 8002022:	f000 8087 	beq.w	8002134 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002026:	685d      	ldr	r5, [r3, #4]
 8002028:	2d00      	cmp	r5, #0
 800202a:	d1dc      	bne.n	8001fe6 <RCM_RegisterRegConv+0x1e>
 800202c:	689e      	ldr	r6, [r3, #8]
      i++;
 800202e:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002030:	2e00      	cmp	r6, #0
 8002032:	d1e0      	bne.n	8001ff6 <RCM_RegisterRegConv+0x2e>
 8002034:	e004      	b.n	8002040 <RCM_RegisterRegConv+0x78>
 8002036:	2804      	cmp	r0, #4
 8002038:	f240 808e 	bls.w	8002158 <RCM_RegisterRegConv+0x190>
 800203c:	680a      	ldr	r2, [r1, #0]
      i++;
 800203e:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002040:	68dd      	ldr	r5, [r3, #12]
 8002042:	b13d      	cbz	r5, 8002054 <RCM_RegisterRegConv+0x8c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002044:	792e      	ldrb	r6, [r5, #4]
 8002046:	790c      	ldrb	r4, [r1, #4]
 8002048:	42a6      	cmp	r6, r4
 800204a:	d103      	bne.n	8002054 <RCM_RegisterRegConv+0x8c>
 800204c:	682c      	ldr	r4, [r5, #0]
 800204e:	4294      	cmp	r4, r2
 8002050:	d1dd      	bne.n	800200e <RCM_RegisterRegConv+0x46>
      i++;
 8002052:	2003      	movs	r0, #3
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002054:	6894      	ldr	r4, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002056:	4d44      	ldr	r5, [pc, #272]	; (8002168 <RCM_RegisterRegConv+0x1a0>)
      RCM_handle_array [handle] = regConv;
 8002058:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800205c:	2300      	movs	r3, #0
 800205e:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002062:	07e3      	lsls	r3, r4, #31
 8002064:	d411      	bmi.n	800208a <RCM_RegisterRegConv+0xc2>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002066:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002068:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800206c:	f023 0320 	bic.w	r3, r3, #32
 8002070:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002072:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002074:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002076:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800207a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800207e:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002080:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002082:	6893      	ldr	r3, [r2, #8]
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800208a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800208c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002090:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002092:	790b      	ldrb	r3, [r1, #4]
 8002094:	2b09      	cmp	r3, #9
 8002096:	d83c      	bhi.n	8002112 <RCM_RegisterRegConv+0x14a>
 8002098:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800209c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80020a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a4:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80020ac:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80020b0:	fab4 f484 	clz	r4, r4
 80020b4:	40e6      	lsrs	r6, r4
 80020b6:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 80020b8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80020bc:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80020c0:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 80020c4:	fa94 f7a4 	rbit	r7, r4
 80020c8:	fab7 f787 	clz	r7, r7
 80020cc:	fa94 f4a4 	rbit	r4, r4
 80020d0:	f04f 0c07 	mov.w	ip, #7
 80020d4:	6889      	ldr	r1, [r1, #8]
 80020d6:	fab4 f484 	clz	r4, r4
 80020da:	fa23 f707 	lsr.w	r7, r3, r7
 80020de:	fa0c f707 	lsl.w	r7, ip, r7
 80020e2:	40e3      	lsrs	r3, r4
 80020e4:	4099      	lsls	r1, r3
 80020e6:	ea25 0307 	bic.w	r3, r5, r7
 80020ea:	430b      	orrs	r3, r1
 80020ec:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
}
 80020f0:	bcf0      	pop	{r4, r5, r6, r7}
 80020f2:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020f4:	685d      	ldr	r5, [r3, #4]
 80020f6:	b355      	cbz	r5, 800214e <RCM_RegisterRegConv+0x186>
 80020f8:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 80020fa:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020fc:	792a      	ldrb	r2, [r5, #4]
 80020fe:	42a2      	cmp	r2, r4
 8002100:	f47f af77 	bne.w	8001ff2 <RCM_RegisterRegConv+0x2a>
 8002104:	682d      	ldr	r5, [r5, #0]
 8002106:	680a      	ldr	r2, [r1, #0]
 8002108:	4295      	cmp	r5, r2
 800210a:	f47f af72 	bne.w	8001ff2 <RCM_RegisterRegConv+0x2a>
 800210e:	2001      	movs	r0, #1
 8002110:	e7a0      	b.n	8002054 <RCM_RegisterRegConv+0x8c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002112:	2403      	movs	r4, #3
 8002114:	f06f 051d 	mvn.w	r5, #29
 8002118:	fb14 5403 	smlabb	r4, r4, r3, r5
 800211c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002120:	f003 7600 	and.w	r6, r3, #33554432	; 0x2000000
 8002124:	e7c0      	b.n	80020a8 <RCM_RegisterRegConv+0xe0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002126:	6835      	ldr	r5, [r6, #0]
 8002128:	680a      	ldr	r2, [r1, #0]
 800212a:	4295      	cmp	r5, r2
 800212c:	f47f af67 	bne.w	8001ffe <RCM_RegisterRegConv+0x36>
      i++;
 8002130:	2002      	movs	r0, #2
 8002132:	e78f      	b.n	8002054 <RCM_RegisterRegConv+0x8c>
  uint8_t i=0;
 8002134:	2000      	movs	r0, #0
 8002136:	e78d      	b.n	8002054 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002138:	2804      	cmp	r0, #4
 800213a:	680a      	ldr	r2, [r1, #0]
 800213c:	d889      	bhi.n	8002052 <RCM_RegisterRegConv+0x8a>
 800213e:	e789      	b.n	8002054 <RCM_RegisterRegConv+0x8c>
 8002140:	689e      	ldr	r6, [r3, #8]
      i++;
 8002142:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002144:	2e00      	cmp	r6, #0
 8002146:	f47f af56 	bne.w	8001ff6 <RCM_RegisterRegConv+0x2e>
 800214a:	680a      	ldr	r2, [r1, #0]
 800214c:	e778      	b.n	8002040 <RCM_RegisterRegConv+0x78>
 800214e:	689e      	ldr	r6, [r3, #8]
 8002150:	b116      	cbz	r6, 8002158 <RCM_RegisterRegConv+0x190>
 8002152:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8002154:	4628      	mov	r0, r5
 8002156:	e74e      	b.n	8001ff6 <RCM_RegisterRegConv+0x2e>
 8002158:	680a      	ldr	r2, [r1, #0]
 800215a:	4630      	mov	r0, r6
 800215c:	e770      	b.n	8002040 <RCM_RegisterRegConv+0x78>
 800215e:	680a      	ldr	r2, [r1, #0]
 8002160:	e774      	b.n	800204c <RCM_RegisterRegConv+0x84>
 8002162:	bf00      	nop
 8002164:	20000910 	.word	0x20000910
 8002168:	200008ec 	.word	0x200008ec

0800216c <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 800216c:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <RCM_ExecRegularConv+0x70>)
 8002170:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002174:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	2b09      	cmp	r3, #9
 800217a:	d827      	bhi.n	80021cc <RCM_ExecRegularConv+0x60>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800217c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002180:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002188:	f44f 7140 	mov.w	r1, #768	; 0x300
 800218c:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002190:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002194:	fab1 f181 	clz	r1, r1
 8002198:	40cd      	lsrs	r5, r1
 800219a:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80021a6:	f020 001f 	bic.w	r0, r0, #31
 80021aa:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 80021ac:	0151      	lsls	r1, r2, #5
 80021ae:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 80021b2:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 80021b6:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80021b8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80021ba:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80021be:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 80021c0:	079b      	lsls	r3, r3, #30
 80021c2:	d5fc      	bpl.n	80021be <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80021c4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 80021c6:	bc30      	pop	{r4, r5}
 80021c8:	b280      	uxth	r0, r0
 80021ca:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80021cc:	2103      	movs	r1, #3
 80021ce:	f06f 001d 	mvn.w	r0, #29
 80021d2:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80021d6:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80021da:	e7d5      	b.n	8002188 <RCM_ExecRegularConv+0x1c>
 80021dc:	20000910 	.word	0x20000910

080021e0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80021e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80021e4:	4c0f      	ldr	r4, [pc, #60]	; (8002224 <RCM_ExecUserConv+0x44>)
 80021e6:	7823      	ldrb	r3, [r4, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d001      	beq.n	80021f0 <RCM_ExecUserConv+0x10>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80021ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80021f0:	4d0d      	ldr	r5, [pc, #52]	; (8002228 <RCM_ExecUserConv+0x48>)
 80021f2:	4f0e      	ldr	r7, [pc, #56]	; (800222c <RCM_ExecUserConv+0x4c>)
 80021f4:	7828      	ldrb	r0, [r5, #0]
 80021f6:	f7ff ffb9 	bl	800216c <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80021fa:	782d      	ldrb	r5, [r5, #0]
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <RCM_ExecUserConv+0x50>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80021fe:	8038      	strh	r0, [r7, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002200:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002204:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002206:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002208:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800220a:	2e00      	cmp	r6, #0
 800220c:	d0ee      	beq.n	80021ec <RCM_ExecUserConv+0xc>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800220e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002212:	2000      	movs	r0, #0
 8002214:	7020      	strb	r0, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4628      	mov	r0, r5
 800221a:	4633      	mov	r3, r6
}
 800221c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002220:	4718      	bx	r3
 8002222:	bf00      	nop
 8002224:	2000090c 	.word	0x2000090c
 8002228:	200008e8 	.word	0x200008e8
 800222c:	20000920 	.word	0x20000920
 8002230:	200008ec 	.word	0x200008ec

08002234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_MspInit+0x38>)
 8002238:	2100      	movs	r1, #0
 800223a:	9100      	str	r1, [sp, #0]
 800223c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800223e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
 8002244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002246:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800224a:	9200      	str	r2, [sp, #0]
 800224c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	9101      	str	r1, [sp, #4]
 8002250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002252:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002262:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002264:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002266:	f001 ba8f 	b.w	8003788 <HAL_NVIC_SetPriorityGrouping>
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002270:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002272:	6802      	ldr	r2, [r0, #0]
 8002274:	4927      	ldr	r1, [pc, #156]	; (8002314 <HAL_ADC_MspInit+0xa4>)
{
 8002276:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 800227a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002280:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002284:	9308      	str	r3, [sp, #32]
  if(hadc->Instance==ADC1)
 8002286:	d004      	beq.n	8002292 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002288:	4923      	ldr	r1, [pc, #140]	; (8002318 <HAL_ADC_MspInit+0xa8>)
 800228a:	428a      	cmp	r2, r1
 800228c:	d021      	beq.n	80022d2 <HAL_ADC_MspInit+0x62>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800228e:	b00a      	add	sp, #40	; 0x28
 8002290:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002292:	4a22      	ldr	r2, [pc, #136]	; (800231c <HAL_ADC_MspInit+0xac>)
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 8002298:	4821      	ldr	r0, [pc, #132]	; (8002320 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800229a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800229e:	6451      	str	r1, [r2, #68]	; 0x44
 80022a0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022a2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80022a6:	9100      	str	r1, [sp, #0]
 80022a8:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022ae:	f041 0104 	orr.w	r1, r1, #4
 80022b2:	6311      	str	r1, [r2, #48]	; 0x30
 80022b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b8:	f002 0204 	and.w	r2, r2, #4
 80022bc:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80022be:	2303      	movs	r3, #3
 80022c0:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80022c2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80022c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c8:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f001 fae9 	bl	80038a0 <HAL_GPIO_Init>
}
 80022ce:	b00a      	add	sp, #40	; 0x28
 80022d0:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <HAL_ADC_MspInit+0xac>)
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80022d8:	4811      	ldr	r0, [pc, #68]	; (8002320 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80022da:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80022de:	6451      	str	r1, [r2, #68]	; 0x44
 80022e0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022e2:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80022e6:	9102      	str	r1, [sp, #8]
 80022e8:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ea:	9303      	str	r3, [sp, #12]
 80022ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022ee:	f041 0104 	orr.w	r1, r1, #4
 80022f2:	6311      	str	r1, [r2, #48]	; 0x30
 80022f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f8:	f002 0204 	and.w	r2, r2, #4
 80022fc:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80022fe:	2303      	movs	r3, #3
 8002300:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002302:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8002304:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002308:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800230a:	f001 fac9 	bl	80038a0 <HAL_GPIO_Init>
}
 800230e:	b00a      	add	sp, #40	; 0x28
 8002310:	bd10      	pop	{r4, pc}
 8002312:	bf00      	nop
 8002314:	40012000 	.word	0x40012000
 8002318:	40012100 	.word	0x40012100
 800231c:	40023800 	.word	0x40023800
 8002320:	40020800 	.word	0x40020800

08002324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002324:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8002326:	6803      	ldr	r3, [r0, #0]
 8002328:	494d      	ldr	r1, [pc, #308]	; (8002460 <HAL_TIM_Base_MspInit+0x13c>)
{
 800232a:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	2200      	movs	r2, #0
  if(htim_base->Instance==TIM1)
 800232e:	428b      	cmp	r3, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8002334:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 8002338:	920c      	str	r2, [sp, #48]	; 0x30
  if(htim_base->Instance==TIM1)
 800233a:	d01d      	beq.n	8002378 <HAL_TIM_Base_MspInit+0x54>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d040      	beq.n	80023c4 <HAL_TIM_Base_MspInit+0xa0>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002342:	4948      	ldr	r1, [pc, #288]	; (8002464 <HAL_TIM_Base_MspInit+0x140>)
 8002344:	428b      	cmp	r3, r1
 8002346:	d052      	beq.n	80023ee <HAL_TIM_Base_MspInit+0xca>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002348:	4947      	ldr	r1, [pc, #284]	; (8002468 <HAL_TIM_Base_MspInit+0x144>)
 800234a:	428b      	cmp	r3, r1
 800234c:	d001      	beq.n	8002352 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800234e:	b00e      	add	sp, #56	; 0x38
 8002350:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002352:	4b46      	ldr	r3, [pc, #280]	; (800246c <HAL_TIM_Base_MspInit+0x148>)
 8002354:	9207      	str	r2, [sp, #28]
 8002356:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002358:	f041 0104 	orr.w	r1, r1, #4
 800235c:	6419      	str	r1, [r3, #64]	; 0x40
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	9307      	str	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002366:	4611      	mov	r1, r2
 8002368:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 800236a:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800236c:	f001 fa20 	bl	80037b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002370:	201e      	movs	r0, #30
 8002372:	f001 fa55 	bl	8003820 <HAL_NVIC_EnableIRQ>
}
 8002376:	e7ea      	b.n	800234e <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002378:	4b3c      	ldr	r3, [pc, #240]	; (800246c <HAL_TIM_Base_MspInit+0x148>)
 800237a:	9201      	str	r2, [sp, #4]
 800237c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800237e:	483c      	ldr	r0, [pc, #240]	; (8002470 <HAL_TIM_Base_MspInit+0x14c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002380:	f041 0101 	orr.w	r1, r1, #1
 8002384:	6459      	str	r1, [r3, #68]	; 0x44
 8002386:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002388:	f001 0101 	and.w	r1, r1, #1
 800238c:	9101      	str	r1, [sp, #4]
 800238e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	9202      	str	r2, [sp, #8]
 8002392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002394:	f042 0202 	orr.w	r2, r2, #2
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023a2:	2301      	movs	r3, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023a6:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80023a8:	2201      	movs	r2, #1
 80023aa:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80023ac:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80023ae:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80023b2:	2502      	movs	r5, #2
 80023b4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80023b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f001 fa70 	bl	80038a0 <HAL_GPIO_Init>
}
 80023c0:	b00e      	add	sp, #56	; 0x38
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80023c8:	9203      	str	r2, [sp, #12]
 80023ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023cc:	f041 0101 	orr.w	r1, r1, #1
 80023d0:	6419      	str	r1, [r3, #64]	; 0x40
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023da:	4611      	mov	r1, r2
 80023dc:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023de:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023e0:	f001 f9e6 	bl	80037b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023e4:	201c      	movs	r0, #28
 80023e6:	f001 fa1b 	bl	8003820 <HAL_NVIC_EnableIRQ>
}
 80023ea:	b00e      	add	sp, #56	; 0x38
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_TIM_Base_MspInit+0x148>)
 80023f0:	9204      	str	r2, [sp, #16]
 80023f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	481f      	ldr	r0, [pc, #124]	; (8002474 <HAL_TIM_Base_MspInit+0x150>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023f6:	f041 0102 	orr.w	r1, r1, #2
 80023fa:	6419      	str	r1, [r3, #64]	; 0x40
 80023fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023fe:	f001 0102 	and.w	r1, r1, #2
 8002402:	9104      	str	r1, [sp, #16]
 8002404:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	9205      	str	r2, [sp, #20]
 8002408:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800240a:	f041 0101 	orr.w	r1, r1, #1
 800240e:	6319      	str	r1, [r3, #48]	; 0x30
 8002410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002412:	f001 0101 	and.w	r1, r1, #1
 8002416:	9105      	str	r1, [sp, #20]
 8002418:	9905      	ldr	r1, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	9206      	str	r2, [sp, #24]
 800241c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241e:	f042 0202 	orr.w	r2, r2, #2
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin;
 800242c:	22c0      	movs	r2, #192	; 0xc0
 800242e:	2302      	movs	r3, #2
 8002430:	2401      	movs	r4, #1
 8002432:	2502      	movs	r5, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	9906      	ldr	r1, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002436:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002438:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin;
 800243a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800243e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002442:	960c      	str	r6, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f001 fa2c 	bl	80038a0 <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_HALL_H3_GPIO_Port, &GPIO_InitStruct);
 8002448:	4809      	ldr	r0, [pc, #36]	; (8002470 <HAL_TIM_Base_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800244a:	960c      	str	r6, [sp, #48]	; 0x30
    HAL_GPIO_Init(M1_HALL_H3_GPIO_Port, &GPIO_InitStruct);
 800244c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin;
 800244e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002452:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_HALL_H3_GPIO_Port, &GPIO_InitStruct);
 8002456:	f001 fa23 	bl	80038a0 <HAL_GPIO_Init>
}
 800245a:	b00e      	add	sp, #56	; 0x38
 800245c:	bd70      	pop	{r4, r5, r6, pc}
 800245e:	bf00      	nop
 8002460:	40010000 	.word	0x40010000
 8002464:	40000400 	.word	0x40000400
 8002468:	40000800 	.word	0x40000800
 800246c:	40023800 	.word	0x40023800
 8002470:	40020400 	.word	0x40020400
 8002474:	40020000 	.word	0x40020000

08002478 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002478:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800247a:	6801      	ldr	r1, [r0, #0]
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_TIM_MspPostInit+0x84>)
{
 800247e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002482:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002488:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800248c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800248e:	d001      	beq.n	8002494 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002490:	b008      	add	sp, #32
 8002492:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002494:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	4818      	ldr	r0, [pc, #96]	; (8002500 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	f041 0102 	orr.w	r1, r1, #2
 80024a2:	6311      	str	r1, [r2, #48]	; 0x30
 80024a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024a6:	f001 0102 	and.w	r1, r1, #2
 80024aa:	9100      	str	r1, [sp, #0]
 80024ac:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6313      	str	r3, [r2, #48]	; 0x30
 80024b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin|M1_PWM_UL_Pin|M1_PWM_VL_Pin;
 80024c2:	f246 0202 	movw	r2, #24578	; 0x6002
 80024c6:	2302      	movs	r3, #2
 80024c8:	2402      	movs	r4, #2
 80024ca:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024cc:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ce:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin|M1_PWM_UL_Pin|M1_PWM_VL_Pin;
 80024d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024d8:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	f001 f9e1 	bl	80038a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80024de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024e2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	4807      	ldr	r0, [pc, #28]	; (8002504 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024e6:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80024ea:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80024ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f001 f9d5 	bl	80038a0 <HAL_GPIO_Init>
}
 80024f6:	b008      	add	sp, #32
 80024f8:	bd70      	pop	{r4, r5, r6, pc}
 80024fa:	bf00      	nop
 80024fc:	40010000 	.word	0x40010000
 8002500:	40020400 	.word	0x40020400
 8002504:	40020000 	.word	0x40020000

08002508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002508:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800250a:	6801      	ldr	r1, [r0, #0]
 800250c:	4a18      	ldr	r2, [pc, #96]	; (8002570 <HAL_UART_MspInit+0x68>)
{
 800250e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 8002512:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002518:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800251c:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 800251e:	d001      	beq.n	8002524 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002520:	b009      	add	sp, #36	; 0x24
 8002522:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002524:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252c:	4811      	ldr	r0, [pc, #68]	; (8002574 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800252e:	f041 0110 	orr.w	r1, r1, #16
 8002532:	6451      	str	r1, [r2, #68]	; 0x44
 8002534:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002536:	f001 0110 	and.w	r1, r1, #16
 800253a:	9100      	str	r1, [sp, #0]
 800253c:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002550:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002554:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002556:	2200      	movs	r2, #0
 8002558:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800255c:	24c0      	movs	r4, #192	; 0xc0
 800255e:	2502      	movs	r5, #2
 8002560:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002564:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002568:	f001 f99a 	bl	80038a0 <HAL_GPIO_Init>
}
 800256c:	b009      	add	sp, #36	; 0x24
 800256e:	bd30      	pop	{r4, r5, pc}
 8002570:	40011000 	.word	0x40011000
 8002574:	40020400 	.word	0x40020400

08002578 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002578:	4801      	ldr	r0, [pc, #4]	; (8002580 <TIM2_IRQHandler+0x8>)
 800257a:	f002 b8fd 	b.w	8004778 <HAL_TIM_IRQHandler>
 800257e:	bf00      	nop
 8002580:	20000924 	.word	0x20000924

08002584 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002584:	4801      	ldr	r0, [pc, #4]	; (800258c <TIM4_IRQHandler+0x8>)
 8002586:	f002 b8f7 	b.w	8004778 <HAL_TIM_IRQHandler>
 800258a:	bf00      	nop
 800258c:	20000674 	.word	0x20000674

08002590 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <ADC_IRQHandler+0x24>)
 8002592:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8002594:	0752      	lsls	r2, r2, #29
 8002596:	d505      	bpl.n	80025a4 <ADC_IRQHandler+0x14>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f022 020c 	bic.w	r2, r2, #12
 800259e:	601a      	str	r2, [r3, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80025a0:	f7fe be68 	b.w	8001274 <TSK_HighFrequencyTask>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <ADC_IRQHandler+0x28>)
 80025a6:	6813      	ldr	r3, [r2, #0]
 80025a8:	f023 030c 	bic.w	r3, r3, #12
 80025ac:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80025ae:	f7fe be61 	b.w	8001274 <TSK_HighFrequencyTask>
 80025b2:	bf00      	nop
 80025b4:	40012000 	.word	0x40012000
 80025b8:	40012200 	.word	0x40012200

080025bc <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025be:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80025c0:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80025c2:	f06f 0201 	mvn.w	r2, #1
 80025c6:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80025c8:	f003 ba52 	b.w	8005a70 <ICS_TIMx_UP_IRQHandler>
 80025cc:	20000314 	.word	0x20000314

080025d0 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80025d0:	4807      	ldr	r0, [pc, #28]	; (80025f0 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 80025d2:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80025d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80025d6:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	0612      	lsls	r2, r2, #24
 80025dc:	d504      	bpl.n	80025e8 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80025de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e2:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 80025e4:	f003 fa8e 	bl	8005b04 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80025e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80025ec:	f7fe be16 	b.w	800121c <MC_Scheduler>
 80025f0:	20000314 	.word	0x20000314

080025f4 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80025f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 80025f6:	4c0c      	ldr	r4, [pc, #48]	; (8002628 <TIM3_IRQHandler+0x34>)
 80025f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	07d1      	lsls	r1, r2, #31
 80025fe:	d40b      	bmi.n	8002618 <TIM3_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	0792      	lsls	r2, r2, #30
 8002604:	d507      	bpl.n	8002616 <TIM3_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002606:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 800260a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 800260e:	4806      	ldr	r0, [pc, #24]	; (8002628 <TIM3_IRQHandler+0x34>)
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	f002 be21 	b.w	8005258 <HALL_TIMx_CC_IRQHandler>
}
 8002616:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002618:	f06f 0201 	mvn.w	r2, #1
 800261c:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 800261e:	4620      	mov	r0, r4
 8002620:	f002 ffae 	bl	8005580 <HALL_TIMx_UP_IRQHandler>
 8002624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002626:	e7eb      	b.n	8002600 <TIM3_IRQHandler+0xc>
 8002628:	200000b4 	.word	0x200000b4

0800262c <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 800262c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800262e:	4c1f      	ldr	r4, [pc, #124]	; (80026ac <USART1_IRQHandler+0x80>)
 8002630:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	0691      	lsls	r1, r2, #26
{
 8002638:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800263a:	d407      	bmi.n	800264c <USART1_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800263c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800263e:	0612      	lsls	r2, r2, #24
 8002640:	d413      	bmi.n	800266a <USART1_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002642:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002644:	071b      	lsls	r3, r3, #28
 8002646:	d418      	bmi.n	800267a <USART1_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002648:	b002      	add	sp, #8
 800264a:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800264c:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 800264e:	4620      	mov	r0, r4
 8002650:	b2c9      	uxtb	r1, r1
 8002652:	f003 ffab 	bl	80065ac <UFCP_RX_IRQ_Handler>
 8002656:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002658:	2b01      	cmp	r3, #1
 800265a:	d021      	beq.n	80026a0 <USART1_IRQHandler+0x74>
    if (retVal == 2)
 800265c:	2b02      	cmp	r3, #2
 800265e:	d01c      	beq.n	800269a <USART1_IRQHandler+0x6e>
 8002660:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002664:	681a      	ldr	r2, [r3, #0]
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002666:	0612      	lsls	r2, r2, #24
 8002668:	d5eb      	bpl.n	8002642 <USART1_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 800266a:	4810      	ldr	r0, [pc, #64]	; (80026ac <USART1_IRQHandler+0x80>)
 800266c:	f003 ff06 	bl	800647c <UFCP_TX_IRQ_Handler>
 8002670:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002674:	681b      	ldr	r3, [r3, #0]
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002676:	071b      	lsls	r3, r3, #28
 8002678:	d5e6      	bpl.n	8002648 <USART1_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 800267a:	480c      	ldr	r0, [pc, #48]	; (80026ac <USART1_IRQHandler+0x80>)
 800267c:	f003 fffc 	bl	8006678 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002680:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002688:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800268e:	9b01      	ldr	r3, [sp, #4]
}
 8002690:	b002      	add	sp, #8
 8002692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8002696:	f000 ba3b 	b.w	8002b10 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 800269a:	f000 fa39 	bl	8002b10 <UI_SerialCommunicationTimeOutStop>
 800269e:	e7df      	b.n	8002660 <USART1_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 80026a0:	f000 fa3c 	bl	8002b1c <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 80026a4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80026a8:	e7c8      	b.n	800263c <USART1_IRQHandler+0x10>
 80026aa:	bf00      	nop
 80026ac:	20000408 	.word	0x20000408

080026b0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80026b0:	b530      	push	{r4, r5, lr}
 80026b2:	b083      	sub	sp, #12
 80026b4:	4c1c      	ldr	r4, [pc, #112]	; (8002728 <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80026b6:	f7fe feb1 	bl	800141c <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80026ba:	4625      	mov	r5, r4
 80026bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80026c0:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80026c2:	0712      	lsls	r2, r2, #28
 80026c4:	d41d      	bmi.n	8002702 <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80026c6:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80026c8:	0610      	lsls	r0, r2, #24
 80026ca:	d40f      	bmi.n	80026ec <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80026cc:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80026ce:	0692      	lsls	r2, r2, #26
 80026d0:	d5f6      	bpl.n	80026c0 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80026d2:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80026d4:	4628      	mov	r0, r5
 80026d6:	b2c9      	uxtb	r1, r1
 80026d8:	f003 ff68 	bl	80065ac <UFCP_RX_IRQ_Handler>
 80026dc:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d01f      	beq.n	8002722 <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d1ea      	bne.n	80026bc <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 80026e6:	f000 fa13 	bl	8002b10 <UI_SerialCommunicationTimeOutStop>
 80026ea:	e7e7      	b.n	80026bc <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 80026ec:	4628      	mov	r0, r5
 80026ee:	f003 fec5 	bl	800647c <UFCP_TX_IRQ_Handler>
 80026f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80026f6:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80026f8:	0691      	lsls	r1, r2, #26
 80026fa:	d4ea      	bmi.n	80026d2 <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80026fc:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80026fe:	0712      	lsls	r2, r2, #28
 8002700:	d5e1      	bpl.n	80026c6 <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002702:	4628      	mov	r0, r5
 8002704:	f003 ffb8 	bl	8006678 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002708:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002710:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002716:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8002718:	f000 f9fa 	bl	8002b10 <UI_SerialCommunicationTimeOutStop>
 800271c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002720:	e7d1      	b.n	80026c6 <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 8002722:	f000 f9fb 	bl	8002b1c <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002726:	e7c9      	b.n	80026bc <HardFault_Handler+0xc>
 8002728:	20000408 	.word	0x20000408

0800272c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 800272c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800272e:	4c0a      	ldr	r4, [pc, #40]	; (8002758 <SysTick_Handler+0x2c>)
 8002730:	7823      	ldrb	r3, [r4, #0]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d006      	beq.n	8002744 <SysTick_Handler+0x18>
 8002736:	3301      	adds	r3, #1
 8002738:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800273a:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 800273c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002740:	f7fe be5c 	b.w	80013fc <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002744:	f000 fdb6 	bl	80032b4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002748:	f001 f8a6 	bl	8003898 <HAL_SYSTICK_IRQHandler>
 800274c:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 800274e:	7023      	strb	r3, [r4, #0]
}
 8002750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002754:	f7fe be52 	b.w	80013fc <MC_RunMotorControlTasks>
 8002758:	20000560 	.word	0x20000560

0800275c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800275c:	490c      	ldr	r1, [pc, #48]	; (8002790 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800275e:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002760:	680b      	ldr	r3, [r1, #0]
{
 8002762:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002764:	4c0c      	ldr	r4, [pc, #48]	; (8002798 <_sbrk+0x3c>)
 8002766:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002768:	b12b      	cbz	r3, 8002776 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276a:	4418      	add	r0, r3
 800276c:	4290      	cmp	r0, r2
 800276e:	d807      	bhi.n	8002780 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002770:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002772:	4618      	mov	r0, r3
 8002774:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <_sbrk+0x40>)
 8002778:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800277a:	4418      	add	r0, r3
 800277c:	4290      	cmp	r0, r2
 800277e:	d9f7      	bls.n	8002770 <_sbrk+0x14>
    errno = ENOMEM;
 8002780:	f003 ffc2 	bl	8006708 <__errno>
 8002784:	230c      	movs	r3, #12
 8002786:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd10      	pop	{r4, pc}
 8002790:	2000064c 	.word	0x2000064c
 8002794:	20020000 	.word	0x20020000
 8002798:	00000400 	.word	0x00000400
 800279c:	20000a28 	.word	0x20000a28

080027a0 <register_Timer>:
static ALERT_MSG *alert;
static TX_TIMEOUT_CONTROL *tx;

void register_Timer(Tail_Light_Flash *Flash_Light)
{
      Light_Flash = Flash_Light;
 80027a0:	4a01      	ldr	r2, [pc, #4]	; (80027a8 <register_Timer+0x8>)
      Light_Flash -> timerInit();
 80027a2:	6803      	ldr	r3, [r0, #0]
      Light_Flash = Flash_Light;
 80027a4:	6010      	str	r0, [r2, #0]
      Light_Flash -> timerInit();
 80027a6:	4718      	bx	r3
 80027a8:	20000650 	.word	0x20000650

080027ac <register_light_device>:
}

void register_light_device(Light_Control *device)
{
     tail_light = device;
 80027ac:	4b01      	ldr	r3, [pc, #4]	; (80027b4 <register_light_device+0x8>)
 80027ae:	6018      	str	r0, [r3, #0]
}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000658 	.word	0x20000658

080027b8 <register_message>:

void register_message(ALERT_MSG *info)
{
	alert = info;
 80027b8:	4b01      	ldr	r3, [pc, #4]	; (80027c0 <register_message+0x8>)
 80027ba:	6018      	str	r0, [r3, #0]
}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000654 	.word	0x20000654

080027c4 <register_tx_timer>:

void register_tx_timer(TX_TIMEOUT_CONTROL *timer)
{
    tx = timer;
 80027c4:	4a01      	ldr	r2, [pc, #4]	; (80027cc <register_tx_timer+0x8>)
    tx -> tx_timer_init();
 80027c6:	6803      	ldr	r3, [r0, #0]
    tx = timer;
 80027c8:	6010      	str	r0, [r2, #0]
    tx -> tx_timer_init();
 80027ca:	4718      	bx	r3
 80027cc:	2000065c 	.word	0x2000065c

080027d0 <Tail_Light_Control>:
}

void Tail_Light_Control(uint8_t light)
{
	LIGHT_CONTROL status = (LIGHT_CONTROL)light;
	switch(status)
 80027d0:	2801      	cmp	r0, #1
{
 80027d2:	b510      	push	{r4, lr}
	switch(status)
 80027d4:	d008      	beq.n	80027e8 <Tail_Light_Control+0x18>
 80027d6:	2802      	cmp	r0, #2
 80027d8:	d019      	beq.n	800280e <Tail_Light_Control+0x3e>
 80027da:	b180      	cbz	r0, 80027fe <Tail_Light_Control+0x2e>
	    	}
	    	tail_light -> off();
	    	break;

	    default:
	    	tail_light -> on();
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <Tail_Light_Control+0x60>)
 80027de:	681b      	ldr	r3, [r3, #0]
	}
}
 80027e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    	tail_light -> on();
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4718      	bx	r3
	    	if(TIMER == 0x01)
 80027e8:	4c12      	ldr	r4, [pc, #72]	; (8002834 <Tail_Light_Control+0x64>)
 80027ea:	7823      	ldrb	r3, [r4, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d1f5      	bne.n	80027dc <Tail_Light_Control+0xc>
	    		Light_Flash -> stopFlash();
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <Tail_Light_Control+0x68>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4798      	blx	r3
	    		TIMER = 0x00;
 80027f8:	2300      	movs	r3, #0
 80027fa:	7023      	strb	r3, [r4, #0]
	    	tail_light -> on();
 80027fc:	e7ee      	b.n	80027dc <Tail_Light_Control+0xc>
	    	Light_Flash -> startFlash();
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <Tail_Light_Control+0x68>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4798      	blx	r3
	    	TIMER = 0x01;
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <Tail_Light_Control+0x64>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
}
 800280c:	bd10      	pop	{r4, pc}
	    	if(TIMER == 0x01)
 800280e:	4c09      	ldr	r4, [pc, #36]	; (8002834 <Tail_Light_Control+0x64>)
 8002810:	7823      	ldrb	r3, [r4, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d005      	beq.n	8002822 <Tail_Light_Control+0x52>
	    	tail_light -> off();
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <Tail_Light_Control+0x60>)
 8002818:	681b      	ldr	r3, [r3, #0]
}
 800281a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    	tail_light -> off();
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4718      	bx	r3
	    	    Light_Flash -> stopFlash();
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <Tail_Light_Control+0x68>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4798      	blx	r3
	    	    TIMER = 0x00;
 800282a:	2300      	movs	r3, #0
 800282c:	7023      	strb	r3, [r4, #0]
 800282e:	e7f2      	b.n	8002816 <Tail_Light_Control+0x46>
 8002830:	20000658 	.word	0x20000658
 8002834:	20000670 	.word	0x20000670
 8002838:	20000650 	.word	0x20000650

0800283c <msg_retransmission_control>:
    alert->boot_success();
}

void msg_retransmission_control()
{
	tx -> tx_timer_start();
 800283c:	4b01      	ldr	r3, [pc, #4]	; (8002844 <msg_retransmission_control+0x8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4718      	bx	r3
 8002844:	2000065c 	.word	0x2000065c

08002848 <calCheckSum>:

uint8_t calCheckSum(uint8_t *msg, uint8_t size)
{
	uint16_t total = 0;
	uint8_t n = 0;
	while(n != size)
 8002848:	b171      	cbz	r1, 8002868 <calCheckSum+0x20>
 800284a:	3901      	subs	r1, #1
 800284c:	fa50 f181 	uxtab	r1, r0, r1
 8002850:	1e43      	subs	r3, r0, #1
	uint16_t total = 0;
 8002852:	2000      	movs	r0, #0
	{
	    total += msg[n];
 8002854:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002858:	4410      	add	r0, r2
	while(n != size)
 800285a:	4299      	cmp	r1, r3
	    total += msg[n];
 800285c:	b280      	uxth	r0, r0
	while(n != size)
 800285e:	d1f9      	bne.n	8002854 <calCheckSum+0xc>
 8002860:	eb00 2010 	add.w	r0, r0, r0, lsr #8
 8002864:	b2c0      	uxtb	r0, r0
 8002866:	4770      	bx	lr
 8002868:	4608      	mov	r0, r1
	    n++;
	}
	return (total & 0xFF) + ((total >> 8) & 0xFF);
}
 800286a:	4770      	bx	lr

0800286c <timer_flash_Stop>:
}

/*Start TIM2 interrupt to stop toggling the tail light*/
static void timer_flash_Stop()
{
	HAL_TIM_Base_Stop_IT(&htim2);
 800286c:	4801      	ldr	r0, [pc, #4]	; (8002874 <timer_flash_Stop+0x8>)
 800286e:	f001 bcbd 	b.w	80041ec <HAL_TIM_Base_Stop_IT>
 8002872:	bf00      	nop
 8002874:	20000924 	.word	0x20000924

08002878 <retransmission_timer_Stop>:
/**Disable TIM4 ISR to stop monitoring the UART Protocol's stability. Once you have disabled, it is not possible to detect whether
 * the system has lost the connection**/
/**Warning: To ensure the E-Scooter's safety, you must not use this function!!!!! **/
static void retransmission_timer_Stop()
{
	HAL_TIM_Base_Stop_IT(&htim4);
 8002878:	4801      	ldr	r0, [pc, #4]	; (8002880 <retransmission_timer_Stop+0x8>)
 800287a:	f001 bcb7 	b.w	80041ec <HAL_TIM_Base_Stop_IT>
 800287e:	bf00      	nop
 8002880:	20000674 	.word	0x20000674

08002884 <timer_flash_Start>:
	HAL_TIM_Base_Start_IT(&htim2);
 8002884:	4801      	ldr	r0, [pc, #4]	; (800288c <timer_flash_Start+0x8>)
 8002886:	f001 bca1 	b.w	80041cc <HAL_TIM_Base_Start_IT>
 800288a:	bf00      	nop
 800288c:	20000924 	.word	0x20000924

08002890 <retransmission_timer_Start>:
	HAL_TIM_Base_Start_IT(&htim4);
 8002890:	4801      	ldr	r0, [pc, #4]	; (8002898 <retransmission_timer_Start+0x8>)
 8002892:	f001 bc9b 	b.w	80041cc <HAL_TIM_Base_Start_IT>
 8002896:	bf00      	nop
 8002898:	20000674 	.word	0x20000674

0800289c <timer_flash_Init>:
{
 800289c:	b500      	push	{lr}
	  htim2.Instance = TIM2;
 800289e:	481b      	ldr	r0, [pc, #108]	; (800290c <timer_flash_Init+0x70>)
{
 80028a0:	b087      	sub	sp, #28
	  htim2.Init.Prescaler = 10000;
 80028a2:	f242 7310 	movw	r3, #10000	; 0x2710
	  htim2.Instance = TIM2;
 80028a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	  htim2.Init.Prescaler = 10000;
 80028aa:	e9c0 1300 	strd	r1, r3, [r0]
	  htim2.Init.Period = INTERVAL;
 80028ae:	f44f 62d2 	mov.w	r2, #1680	; 0x690
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028b2:	2300      	movs	r3, #0
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028b8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80028bc:	9302      	str	r3, [sp, #8]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028be:	9300      	str	r3, [sp, #0]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c0:	6103      	str	r3, [r0, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c2:	6183      	str	r3, [r0, #24]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c4:	9305      	str	r3, [sp, #20]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c6:	9301      	str	r3, [sp, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028c8:	f001 fc04 	bl	80040d4 <HAL_TIM_Base_Init>
 80028cc:	b998      	cbnz	r0, 80028f6 <timer_flash_Init+0x5a>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028d2:	480e      	ldr	r0, [pc, #56]	; (800290c <timer_flash_Init+0x70>)
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d4:	9302      	str	r3, [sp, #8]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028d6:	a902      	add	r1, sp, #8
 80028d8:	f001 fe28 	bl	800452c <HAL_TIM_ConfigClockSource>
 80028dc:	b998      	cbnz	r0, 8002906 <timer_flash_Init+0x6a>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028de:	2200      	movs	r2, #0
 80028e0:	2300      	movs	r3, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028e2:	480a      	ldr	r0, [pc, #40]	; (800290c <timer_flash_Init+0x70>)
 80028e4:	4669      	mov	r1, sp
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e6:	e9cd 2300 	strd	r2, r3, [sp]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ea:	f002 f91b 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 80028ee:	b928      	cbnz	r0, 80028fc <timer_flash_Init+0x60>
}
 80028f0:	b007      	add	sp, #28
 80028f2:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 80028f6:	f7fe f87f 	bl	80009f8 <Error_Handler>
 80028fa:	e7e8      	b.n	80028ce <timer_flash_Init+0x32>
	    Error_Handler();
 80028fc:	f7fe f87c 	bl	80009f8 <Error_Handler>
}
 8002900:	b007      	add	sp, #28
 8002902:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 8002906:	f7fe f877 	bl	80009f8 <Error_Handler>
 800290a:	e7e8      	b.n	80028de <timer_flash_Init+0x42>
 800290c:	20000924 	.word	0x20000924

08002910 <retransmission_timer_Init>:
{
 8002910:	b500      	push	{lr}
	  htim4.Instance = TIM4;
 8002912:	481b      	ldr	r0, [pc, #108]	; (8002980 <retransmission_timer_Init+0x70>)
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <retransmission_timer_Init+0x74>)
 8002916:	6003      	str	r3, [r0, #0]
{
 8002918:	b087      	sub	sp, #28
	  htim4.Init.Prescaler = 10000;
 800291a:	f242 7310 	movw	r3, #10000	; 0x2710
	  htim4.Init.Period = TX_Interval;
 800291e:	f242 02d0 	movw	r2, #8400	; 0x20d0
	  htim4.Init.Prescaler = 10000;
 8002922:	6043      	str	r3, [r0, #4]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002924:	2300      	movs	r3, #0
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002926:	e9c0 3202 	strd	r3, r2, [r0, #8]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800292e:	9302      	str	r3, [sp, #8]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	9300      	str	r3, [sp, #0]
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002932:	6103      	str	r3, [r0, #16]
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002934:	6183      	str	r3, [r0, #24]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002936:	9305      	str	r3, [sp, #20]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002938:	9301      	str	r3, [sp, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800293a:	f001 fbcb 	bl	80040d4 <HAL_TIM_Base_Init>
 800293e:	b998      	cbnz	r0, 8002968 <retransmission_timer_Init+0x58>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002944:	480e      	ldr	r0, [pc, #56]	; (8002980 <retransmission_timer_Init+0x70>)
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002946:	9302      	str	r3, [sp, #8]
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002948:	a902      	add	r1, sp, #8
 800294a:	f001 fdef 	bl	800452c <HAL_TIM_ConfigClockSource>
 800294e:	b998      	cbnz	r0, 8002978 <retransmission_timer_Init+0x68>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002950:	2200      	movs	r2, #0
 8002952:	2300      	movs	r3, #0
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002954:	480a      	ldr	r0, [pc, #40]	; (8002980 <retransmission_timer_Init+0x70>)
 8002956:	4669      	mov	r1, sp
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002958:	e9cd 2300 	strd	r2, r3, [sp]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800295c:	f002 f8e2 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 8002960:	b928      	cbnz	r0, 800296e <retransmission_timer_Init+0x5e>
}
 8002962:	b007      	add	sp, #28
 8002964:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 8002968:	f7fe f846 	bl	80009f8 <Error_Handler>
 800296c:	e7e8      	b.n	8002940 <retransmission_timer_Init+0x30>
	    Error_Handler();
 800296e:	f7fe f843 	bl	80009f8 <Error_Handler>
}
 8002972:	b007      	add	sp, #28
 8002974:	f85d fb04 	ldr.w	pc, [sp], #4
	    Error_Handler();
 8002978:	f7fe f83e 	bl	80009f8 <Error_Handler>
 800297c:	e7e8      	b.n	8002950 <retransmission_timer_Init+0x40>
 800297e:	bf00      	nop
 8002980:	20000674 	.word	0x20000674
 8002984:	40000800 	.word	0x40000800

08002988 <LIGHT_OFF>:
	HAL_GPIO_WritePin(SAFETY_LIGHT_GPIO_Port, SAFETY_LIGHT_Pin, GPIO_PIN_RESET);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <LIGHT_OFF+0xc>)
 800298a:	2200      	movs	r2, #0
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	f001 b8ab 	b.w	8003ae8 <HAL_GPIO_WritePin>
 8002992:	bf00      	nop
 8002994:	40020800 	.word	0x40020800

08002998 <LIGHT_ON>:
	HAL_GPIO_WritePin(SAFETY_LIGHT_GPIO_Port, SAFETY_LIGHT_Pin, GPIO_PIN_SET);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <LIGHT_ON+0xc>)
 800299a:	2201      	movs	r2, #1
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	f001 b8a3 	b.w	8003ae8 <HAL_GPIO_WritePin>
 80029a2:	bf00      	nop
 80029a4:	40020800 	.word	0x40020800

080029a8 <alert_msg>:
{
 80029a8:	b570      	push	{r4, r5, r6, lr}
	  uint8_t *boot_msg = (uint8_t*)malloc(sizeof(uint8_t)*4);
 80029aa:	2004      	movs	r0, #4
 80029ac:	f003 fed6 	bl	800675c <malloc>
	  boot_msg[0] = 0xF0;
 80029b0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
	  boot_msg[2] = 0x09;
 80029b4:	2309      	movs	r3, #9
	  boot_msg[3] = calCheckSum(boot_msg,3);
 80029b6:	2103      	movs	r1, #3
	  boot_msg[0] = 0xF0;
 80029b8:	8002      	strh	r2, [r0, #0]
	  boot_msg[2] = 0x09;
 80029ba:	7083      	strb	r3, [r0, #2]
	  uint8_t *boot_msg = (uint8_t*)malloc(sizeof(uint8_t)*4);
 80029bc:	4605      	mov	r5, r0
	  boot_msg[3] = calCheckSum(boot_msg,3);
 80029be:	4604      	mov	r4, r0
 80029c0:	f7ff ff42 	bl	8002848 <calCheckSum>
		  HAL_UART_Transmit(&huart1,&(boot_msg[i]),1,200);
 80029c4:	4e06      	ldr	r6, [pc, #24]	; (80029e0 <alert_msg+0x38>)
	  boot_msg[3] = calCheckSum(boot_msg,3);
 80029c6:	70e8      	strb	r0, [r5, #3]
	  for(uint8_t i = 0; i < (sizeof(boot_msg)/sizeof(uint8_t)) ; i++)
 80029c8:	3504      	adds	r5, #4
		  HAL_UART_Transmit(&huart1,&(boot_msg[i]),1,200);
 80029ca:	2201      	movs	r2, #1
 80029cc:	4621      	mov	r1, r4
 80029ce:	23c8      	movs	r3, #200	; 0xc8
 80029d0:	4414      	add	r4, r2
 80029d2:	4630      	mov	r0, r6
 80029d4:	f002 f9b8 	bl	8004d48 <HAL_UART_Transmit>
	  for(uint8_t i = 0; i < (sizeof(boot_msg)/sizeof(uint8_t)) ; i++)
 80029d8:	42ac      	cmp	r4, r5
 80029da:	d1f6      	bne.n	80029ca <alert_msg+0x22>
}
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
 80029de:	bf00      	nop
 80029e0:	20000784 	.word	0x20000784

080029e4 <TIMER_CONTROL_SETTING>:
    register_Timer(&tail_light_flash);
 80029e4:	4801      	ldr	r0, [pc, #4]	; (80029ec <TIMER_CONTROL_SETTING+0x8>)
 80029e6:	f7ff bedb 	b.w	80027a0 <register_Timer>
 80029ea:	bf00      	nop
 80029ec:	20000570 	.word	0x20000570

080029f0 <LIGHT_CONTROL_SETTING>:
	register_light_device(&light_control);
 80029f0:	4801      	ldr	r0, [pc, #4]	; (80029f8 <LIGHT_CONTROL_SETTING+0x8>)
 80029f2:	f7ff bedb 	b.w	80027ac <register_light_device>
 80029f6:	bf00      	nop
 80029f8:	20000564 	.word	0x20000564

080029fc <MESSAGE_CONTROL_SETTING>:
    register_message(&msg);
 80029fc:	4801      	ldr	r0, [pc, #4]	; (8002a04 <MESSAGE_CONTROL_SETTING+0x8>)
 80029fe:	f7ff bedb 	b.w	80027b8 <register_message>
 8002a02:	bf00      	nop
 8002a04:	2000056c 	.word	0x2000056c

08002a08 <TX_TIMER_CONTROL_SETTING>:
	register_tx_timer(&tx_timer_control);
 8002a08:	4801      	ldr	r0, [pc, #4]	; (8002a10 <TX_TIMER_CONTROL_SETTING+0x8>)
 8002a0a:	f7ff bedb 	b.w	80027c4 <register_tx_timer>
 8002a0e:	bf00      	nop
 8002a10:	2000057c 	.word	0x2000057c

08002a14 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2)
 8002a14:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002a16:	4298      	cmp	r0, r3
 8002a18:	d00c      	beq.n	8002a34 <HAL_TIM_PeriodElapsedCallback+0x20>
	else if(htim == &htim4)
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002a1c:	4298      	cmp	r0, r3
 8002a1e:	d000      	beq.n	8002a22 <HAL_TIM_PeriodElapsedCallback+0xe>
}
 8002a20:	4770      	bx	lr
        packetCount ++;
 8002a22:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002a24:	7813      	ldrb	r3, [r2, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2db      	uxtb	r3, r3
        if(packetCount >= MAX_PACKET)
 8002a2a:	2b01      	cmp	r3, #1
        	packetCount = 0;
 8002a2c:	bf88      	it	hi
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	7013      	strb	r3, [r2, #0]
}
 8002a32:	4770      	bx	lr
        HAL_GPIO_TogglePin(SAFETY_LIGHT_GPIO_Port, SAFETY_LIGHT_Pin);
 8002a34:	4804      	ldr	r0, [pc, #16]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	f001 b85a 	b.w	8003af0 <HAL_GPIO_TogglePin>
 8002a3c:	20000924 	.word	0x20000924
 8002a40:	20000674 	.word	0x20000674
 8002a44:	200007c5 	.word	0x200007c5
 8002a48:	40020800 	.word	0x40020800

08002a4c <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8002a50:	4d17      	ldr	r5, [pc, #92]	; (8002ab0 <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 8002a52:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002ac4 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8002a56:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002ac8 <UI_TaskInit+0x7c>
{
 8002a5a:	468e      	mov	lr, r1
 8002a5c:	4681      	mov	r9, r0
 8002a5e:	4616      	mov	r6, r2
 8002a60:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 8002a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a64:	4664      	mov	r4, ip
 8002a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a68:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 8002a6c:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 8002a6e:	4d11      	ldr	r5, [pc, #68]	; (8002ab4 <UI_TaskInit+0x68>)
{
 8002a70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 8002a74:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8002a78:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 8002a7c:	4640      	mov	r0, r8
{
 8002a7e:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 8002a80:	f003 fcfa 	bl	8006478 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002a84:	f8cd a004 	str.w	sl, [sp, #4]
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <UI_TaskInit+0x6c>)
 8002a8a:	6828      	ldr	r0, [r5, #0]
 8002a8c:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <UI_TaskInit+0x70>)
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4641      	mov	r1, r8
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <UI_TaskInit+0x74>)
 8002a94:	f7ff f96c 	bl	8001d70 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002a98:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8002a9c:	6828      	ldr	r0, [r5, #0]
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	4632      	mov	r2, r6
 8002aa2:	4621      	mov	r1, r4

}
 8002aa4:	b002      	add	sp, #8
 8002aa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002aaa:	f000 b83d 	b.w	8002b28 <UI_Init>
 8002aae:	bf00      	nop
 8002ab0:	20000618 	.word	0x20000618
 8002ab4:	20000664 	.word	0x20000664
 8002ab8:	08006695 	.word	0x08006695
 8002abc:	080064fd 	.word	0x080064fd
 8002ac0:	080064dd 	.word	0x080064dd
 8002ac4:	20000964 	.word	0x20000964
 8002ac8:	20000408 	.word	0x20000408

08002acc <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <UI_Scheduler+0x38>)
 8002ace:	8813      	ldrh	r3, [r2, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	b11b      	cbz	r3, 8002adc <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002ad4:	8813      	ldrh	r3, [r2, #0]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <UI_Scheduler+0x3c>)
 8002ade:	8813      	ldrh	r3, [r2, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d903      	bls.n	8002aee <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002ae6:	8813      	ldrh	r3, [r2, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <UI_Scheduler+0x40>)
 8002af0:	8813      	ldrh	r3, [r2, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d903      	bls.n	8002b00 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002af8:	8813      	ldrh	r3, [r2, #0]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	8013      	strh	r3, [r2, #0]
  }
}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000662 	.word	0x20000662
 8002b08:	20000660 	.word	0x20000660
 8002b0c:	20000588 	.word	0x20000588

08002b10 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002b10:	4b01      	ldr	r3, [pc, #4]	; (8002b18 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	801a      	strh	r2, [r3, #0]
}
 8002b16:	4770      	bx	lr
 8002b18:	20000660 	.word	0x20000660

08002b1c <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002b1c:	4b01      	ldr	r3, [pc, #4]	; (8002b24 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002b1e:	224f      	movs	r2, #79	; 0x4f
 8002b20:	801a      	strh	r2, [r3, #0]
}
 8002b22:	4770      	bx	lr
 8002b24:	20000660 	.word	0x20000660

08002b28 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8002b28:	b430      	push	{r4, r5}
 8002b2a:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002b2c:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8002b2e:	2500      	movs	r5, #0
 8002b30:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 8002b32:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8002b36:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 8002b38:	7101      	strb	r1, [r0, #4]
}
 8002b3a:	4770      	bx	lr

08002b3c <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002b3c:	7903      	ldrb	r3, [r0, #4]
 8002b3e:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002b40:	bf86      	itte	hi
 8002b42:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002b44:	2001      	movhi	r0, #1
    retVal = false;
 8002b46:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop

08002b4c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002b4c:	7d00      	ldrb	r0, [r0, #20]
 8002b4e:	4770      	bx	lr

08002b50 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002b50:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002b52:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b56:	7d03      	ldrb	r3, [r0, #20]
{
 8002b58:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b5a:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002b5e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
{
 8002b62:	4614      	mov	r4, r2
 8002b64:	295b      	cmp	r1, #91	; 0x5b
 8002b66:	d82f      	bhi.n	8002bc8 <UI_SetReg+0x78>
 8002b68:	e8df f001 	tbb	[pc, r1]
 8002b6c:	412e2e3d 	.word	0x412e2e3d
 8002b70:	544e482e 	.word	0x544e482e
 8002b74:	726c665a 	.word	0x726c665a
 8002b78:	908a8478 	.word	0x908a8478
 8002b7c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002b80:	2e2e2e2e 	.word	0x2e2e2e2e
 8002b84:	2e2e2e2e 	.word	0x2e2e2e2e
 8002b88:	2e2e2e2e 	.word	0x2e2e2e2e
 8002b8c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002b90:	2e2e2e2e 	.word	0x2e2e2e2e
 8002b94:	2e2e2e2e 	.word	0x2e2e2e2e
 8002b98:	2e2e2e2e 	.word	0x2e2e2e2e
 8002b9c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002ba0:	2e2e2e2e 	.word	0x2e2e2e2e
 8002ba4:	2e2e2e2e 	.word	0x2e2e2e2e
 8002ba8:	2e2e2e2e 	.word	0x2e2e2e2e
 8002bac:	2e2e962e 	.word	0x2e2e962e
 8002bb0:	2e2e2e2e 	.word	0x2e2e2e2e
 8002bb4:	2e2e2e2e 	.word	0x2e2e2e2e
 8002bb8:	2e2e2e2e 	.word	0x2e2e2e2e
 8002bbc:	2e2e2e2e 	.word	0x2e2e2e2e
 8002bc0:	2e2e2e2e 	.word	0x2e2e2e2e
 8002bc4:	312e2e2e 	.word	0x312e2e2e
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002bc8:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002bca:	b003      	add	sp, #12
 8002bcc:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002bce:	493f      	ldr	r1, [pc, #252]	; (8002ccc <UI_SetReg+0x17c>)
 8002bd0:	fb81 3104 	smull	r3, r1, r1, r4
 8002bd4:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002bd8:	4628      	mov	r0, r5
 8002bda:	b209      	sxth	r1, r1
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f7fd ff29 	bl	8000a34 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002be2:	2001      	movs	r0, #1
    break;
 8002be4:	e7f1      	b.n	8002bca <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002be6:	b2e1      	uxtb	r1, r4
 8002be8:	f7ff ffa8 	bl	8002b3c <UI_SelectMC>
    break;
 8002bec:	e7ed      	b.n	8002bca <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002bee:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002bf2:	d057      	beq.n	8002ca4 <UI_SetReg+0x154>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002bf4:	2c01      	cmp	r4, #1
 8002bf6:	d05f      	beq.n	8002cb8 <UI_SetReg+0x168>
  bool retVal = true;
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	e7e6      	b.n	8002bca <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	b221      	sxth	r1, r4
 8002c00:	f003 f836 	bl	8005c70 <PID_SetKP>
  bool retVal = true;
 8002c04:	2001      	movs	r0, #1
    break;
 8002c06:	e7e0      	b.n	8002bca <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	b221      	sxth	r1, r4
 8002c0c:	f003 f832 	bl	8005c74 <PID_SetKI>
  bool retVal = true;
 8002c10:	2001      	movs	r0, #1
    break;
 8002c12:	e7da      	b.n	8002bca <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	b221      	sxth	r1, r4
 8002c18:	f003 f83c 	bl	8005c94 <PID_SetKD>
  bool retVal = true;
 8002c1c:	2001      	movs	r0, #1
    break;
 8002c1e:	e7d4      	b.n	8002bca <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8002c20:	4628      	mov	r0, r5
 8002c22:	f7fd ffc1 	bl	8000ba8 <MCI_GetIqdref>
 8002c26:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002c28:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	9901      	ldr	r1, [sp, #4]
 8002c30:	f7fd ff16 	bl	8000a60 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002c34:	2001      	movs	r0, #1
    break;
 8002c36:	e7c8      	b.n	8002bca <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002c38:	6858      	ldr	r0, [r3, #4]
 8002c3a:	b221      	sxth	r1, r4
 8002c3c:	f003 f818 	bl	8005c70 <PID_SetKP>
  bool retVal = true;
 8002c40:	2001      	movs	r0, #1
    break;
 8002c42:	e7c2      	b.n	8002bca <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002c44:	6858      	ldr	r0, [r3, #4]
 8002c46:	b221      	sxth	r1, r4
 8002c48:	f003 f814 	bl	8005c74 <PID_SetKI>
  bool retVal = true;
 8002c4c:	2001      	movs	r0, #1
    break;
 8002c4e:	e7bc      	b.n	8002bca <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002c50:	6858      	ldr	r0, [r3, #4]
 8002c52:	b221      	sxth	r1, r4
 8002c54:	f003 f81e 	bl	8005c94 <PID_SetKD>
  bool retVal = true;
 8002c58:	2001      	movs	r0, #1
    break;
 8002c5a:	e7b6      	b.n	8002bca <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f7fd ffa3 	bl	8000ba8 <MCI_GetIqdref>
 8002c62:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002c64:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002c68:	4628      	mov	r0, r5
 8002c6a:	9901      	ldr	r1, [sp, #4]
 8002c6c:	f7fd fef8 	bl	8000a60 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002c70:	2001      	movs	r0, #1
    break;
 8002c72:	e7aa      	b.n	8002bca <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002c74:	6898      	ldr	r0, [r3, #8]
 8002c76:	b221      	sxth	r1, r4
 8002c78:	f002 fffa 	bl	8005c70 <PID_SetKP>
  bool retVal = true;
 8002c7c:	2001      	movs	r0, #1
    break;
 8002c7e:	e7a4      	b.n	8002bca <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002c80:	6898      	ldr	r0, [r3, #8]
 8002c82:	b221      	sxth	r1, r4
 8002c84:	f002 fff6 	bl	8005c74 <PID_SetKI>
  bool retVal = true;
 8002c88:	2001      	movs	r0, #1
    break;
 8002c8a:	e79e      	b.n	8002bca <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002c8c:	6898      	ldr	r0, [r3, #8]
 8002c8e:	b221      	sxth	r1, r4
 8002c90:	f003 f800 	bl	8005c94 <PID_SetKD>
  bool retVal = true;
 8002c94:	2001      	movs	r0, #1
    break;
 8002c96:	e798      	b.n	8002bca <UI_SetReg+0x7a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002c98:	4628      	mov	r0, r5
 8002c9a:	b221      	sxth	r1, r4
 8002c9c:	f7fd ffb2 	bl	8000c04 <MCI_SetIdref>
  bool retVal = true;
 8002ca0:	2001      	movs	r0, #1
    break;
 8002ca2:	e792      	b.n	8002bca <UI_SetReg+0x7a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	f7fd ffa9 	bl	8000bfc <MCI_GetTeref>
 8002caa:	4622      	mov	r2, r4
 8002cac:	4601      	mov	r1, r0
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f7fd fecc 	bl	8000a4c <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	e788      	b.n	8002bca <UI_SetReg+0x7a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f7fd ff47 	bl	8000b4c <MCI_GetMecSpeedRefUnit>
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	4601      	mov	r1, r0
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	f7fd feb6 	bl	8000a34 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002cc8:	4620      	mov	r0, r4
 8002cca:	e77e      	b.n	8002bca <UI_SetReg+0x7a>
 8002ccc:	2aaaaaab 	.word	0x2aaaaaab

08002cd0 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8002cd0:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002cd2:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002cd6:	7d03      	ldrb	r3, [r0, #20]
{
 8002cd8:	b08c      	sub	sp, #48	; 0x30
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002cda:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002cde:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	f000 8089 	beq.w	8002dfa <UI_GetReg+0x12a>
  {
    *success = true;
 8002ce8:	2601      	movs	r6, #1
 8002cea:	7016      	strb	r6, [r2, #0]
  }

  switch (bRegID)
 8002cec:	2981      	cmp	r1, #129	; 0x81
 8002cee:	f200 81de 	bhi.w	80030ae <UI_GetReg+0x3de>
 8002cf2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002cf6:	01ab      	.short	0x01ab
 8002cf8:	01a101a5 	.word	0x01a101a5
 8002cfc:	013001d4 	.word	0x013001d4
 8002d00:	0145012c 	.word	0x0145012c
 8002d04:	010201d8 	.word	0x010201d8
 8002d08:	01280141 	.word	0x01280141
 8002d0c:	00fa01c4 	.word	0x00fa01c4
 8002d10:	01c801cc 	.word	0x01c801cc
 8002d14:	01dc010a 	.word	0x01dc010a
 8002d18:	01dc01dc 	.word	0x01dc01dc
 8002d1c:	01dc01dc 	.word	0x01dc01dc
 8002d20:	01dc01dc 	.word	0x01dc01dc
 8002d24:	01dc01dc 	.word	0x01dc01dc
 8002d28:	0149014d 	.word	0x0149014d
 8002d2c:	01dc01d0 	.word	0x01dc01d0
 8002d30:	019a01dc 	.word	0x019a01dc
 8002d34:	01900195 	.word	0x01900195
 8002d38:	012201dc 	.word	0x012201dc
 8002d3c:	0118011d 	.word	0x0118011d
 8002d40:	010e0113 	.word	0x010e0113
 8002d44:	01900195 	.word	0x01900195
 8002d48:	00fa0102 	.word	0x00fa0102
 8002d4c:	0137013c 	.word	0x0137013c
 8002d50:	0186018b 	.word	0x0186018b
 8002d54:	015f0172 	.word	0x015f0172
 8002d58:	01dc01dc 	.word	0x01dc01dc
 8002d5c:	01dc01dc 	.word	0x01dc01dc
 8002d60:	01dc01dc 	.word	0x01dc01dc
 8002d64:	01dc01dc 	.word	0x01dc01dc
 8002d68:	01dc01dc 	.word	0x01dc01dc
 8002d6c:	01dc01dc 	.word	0x01dc01dc
 8002d70:	01dc01dc 	.word	0x01dc01dc
 8002d74:	01510158 	.word	0x01510158
 8002d78:	01dc00fa 	.word	0x01dc00fa
 8002d7c:	01dc01dc 	.word	0x01dc01dc
 8002d80:	01dc01dc 	.word	0x01dc01dc
 8002d84:	01dc01dc 	.word	0x01dc01dc
 8002d88:	01dc01dc 	.word	0x01dc01dc
 8002d8c:	01dc01dc 	.word	0x01dc01dc
 8002d90:	01dc01dc 	.word	0x01dc01dc
 8002d94:	01dc01dc 	.word	0x01dc01dc
 8002d98:	01dc01dc 	.word	0x01dc01dc
 8002d9c:	01dc01dc 	.word	0x01dc01dc
 8002da0:	01dc01dc 	.word	0x01dc01dc
 8002da4:	01dc01dc 	.word	0x01dc01dc
 8002da8:	01dc01dc 	.word	0x01dc01dc
 8002dac:	01dc01b6 	.word	0x01dc01b6
 8002db0:	01dc01dc 	.word	0x01dc01dc
 8002db4:	01dc01dc 	.word	0x01dc01dc
 8002db8:	01dc01dc 	.word	0x01dc01dc
 8002dbc:	01dc01dc 	.word	0x01dc01dc
 8002dc0:	01dc01dc 	.word	0x01dc01dc
 8002dc4:	01dc01dc 	.word	0x01dc01dc
 8002dc8:	01dc01dc 	.word	0x01dc01dc
 8002dcc:	01dc01dc 	.word	0x01dc01dc
 8002dd0:	01b201dc 	.word	0x01b201dc
 8002dd4:	01c201ae 	.word	0x01c201ae
 8002dd8:	010701dc 	.word	0x010701dc
 8002ddc:	01dc0107 	.word	0x01dc0107
 8002de0:	01dc01dc 	.word	0x01dc01dc
 8002de4:	01dc01dc 	.word	0x01dc01dc
 8002de8:	01dc01dc 	.word	0x01dc01dc
 8002dec:	01dc01dc 	.word	0x01dc01dc
 8002df0:	01dc01dc 	.word	0x01dc01dc
 8002df4:	01dc01dc 	.word	0x01dc01dc
 8002df8:	0100      	.short	0x0100
 8002dfa:	2973      	cmp	r1, #115	; 0x73
 8002dfc:	d87b      	bhi.n	8002ef6 <UI_GetReg+0x226>
 8002dfe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002e02:	0125      	.short	0x0125
 8002e04:	011b011f 	.word	0x011b011f
 8002e08:	00aa014e 	.word	0x00aa014e
 8002e0c:	00bf00a6 	.word	0x00bf00a6
 8002e10:	007c0152 	.word	0x007c0152
 8002e14:	00a200bb 	.word	0x00a200bb
 8002e18:	0074013e 	.word	0x0074013e
 8002e1c:	01420146 	.word	0x01420146
 8002e20:	007a0084 	.word	0x007a0084
 8002e24:	007a007a 	.word	0x007a007a
 8002e28:	007a007a 	.word	0x007a007a
 8002e2c:	007a007a 	.word	0x007a007a
 8002e30:	007a007a 	.word	0x007a007a
 8002e34:	00c300c7 	.word	0x00c300c7
 8002e38:	007a014a 	.word	0x007a014a
 8002e3c:	0114007a 	.word	0x0114007a
 8002e40:	010a010f 	.word	0x010a010f
 8002e44:	009c007a 	.word	0x009c007a
 8002e48:	00920097 	.word	0x00920097
 8002e4c:	0088008d 	.word	0x0088008d
 8002e50:	010a010f 	.word	0x010a010f
 8002e54:	0074007c 	.word	0x0074007c
 8002e58:	00b100b6 	.word	0x00b100b6
 8002e5c:	01000105 	.word	0x01000105
 8002e60:	00d900ec 	.word	0x00d900ec
 8002e64:	007a007a 	.word	0x007a007a
 8002e68:	007a007a 	.word	0x007a007a
 8002e6c:	007a007a 	.word	0x007a007a
 8002e70:	007a007a 	.word	0x007a007a
 8002e74:	007a007a 	.word	0x007a007a
 8002e78:	007a007a 	.word	0x007a007a
 8002e7c:	007a007a 	.word	0x007a007a
 8002e80:	00cb00d2 	.word	0x00cb00d2
 8002e84:	007a0074 	.word	0x007a0074
 8002e88:	007a007a 	.word	0x007a007a
 8002e8c:	007a007a 	.word	0x007a007a
 8002e90:	007a007a 	.word	0x007a007a
 8002e94:	007a007a 	.word	0x007a007a
 8002e98:	007a007a 	.word	0x007a007a
 8002e9c:	007a007a 	.word	0x007a007a
 8002ea0:	007a007a 	.word	0x007a007a
 8002ea4:	007a007a 	.word	0x007a007a
 8002ea8:	007a007a 	.word	0x007a007a
 8002eac:	007a007a 	.word	0x007a007a
 8002eb0:	007a007a 	.word	0x007a007a
 8002eb4:	007a007a 	.word	0x007a007a
 8002eb8:	007a0130 	.word	0x007a0130
 8002ebc:	007a007a 	.word	0x007a007a
 8002ec0:	007a007a 	.word	0x007a007a
 8002ec4:	007a007a 	.word	0x007a007a
 8002ec8:	007a007a 	.word	0x007a007a
 8002ecc:	007a007a 	.word	0x007a007a
 8002ed0:	007a007a 	.word	0x007a007a
 8002ed4:	007a007a 	.word	0x007a007a
 8002ed8:	007a007a 	.word	0x007a007a
 8002edc:	012c007a 	.word	0x012c007a
 8002ee0:	013c0128 	.word	0x013c0128
 8002ee4:	0081007a 	.word	0x0081007a
 8002ee8:	0081      	.short	0x0081
    }
    break;

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002eea:	4620      	mov	r0, r4
 8002eec:	f7fd fe5c 	bl	8000ba8 <MCI_GetIqdref>
 8002ef0:	1400      	asrs	r0, r0, #16
      }
	}
    break;
  }
  return bRetVal;
}
 8002ef2:	b00c      	add	sp, #48	; 0x30
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
  int32_t bRetVal = 0;
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	e7fb      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7fd fe54 	bl	8000ba8 <MCI_GetIqdref>
 8002f00:	b200      	sxth	r0, r0
    break;
 8002f02:	e7f6      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = CTRBDID;
 8002f04:	f242 7010 	movw	r0, #10000	; 0x2710
 8002f08:	e7f3      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8002f0a:	68a8      	ldr	r0, [r5, #8]
 8002f0c:	f002 fec4 	bl	8005c98 <PID_GetKD>
    break;
 8002f10:	e7ef      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7fd fe2c 	bl	8000b70 <MCI_GetIalphabeta>
 8002f18:	1400      	asrs	r0, r0, #16
    break;
 8002f1a:	e7ea      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f7fd fe27 	bl	8000b70 <MCI_GetIalphabeta>
 8002f22:	b200      	sxth	r0, r0
    break;
 8002f24:	e7e5      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).b;
 8002f26:	4620      	mov	r0, r4
 8002f28:	f7fd fe14 	bl	8000b54 <MCI_GetIab>
 8002f2c:	1400      	asrs	r0, r0, #16
    break;
 8002f2e:	e7e0      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).a;
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7fd fe0f 	bl	8000b54 <MCI_GetIab>
 8002f36:	b200      	sxth	r0, r0
    break;
 8002f38:	e7db      	b.n	8002ef2 <UI_GetReg+0x222>
      if (pMCT->pRevupCtrl)
 8002f3a:	6968      	ldr	r0, [r5, #20]
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	d0da      	beq.n	8002ef6 <UI_GetReg+0x226>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002f40:	f003 fbde 	bl	8006700 <RUC_GetNumberOfPhases>
 8002f44:	e7d5      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002f46:	6868      	ldr	r0, [r5, #4]
 8002f48:	f002 fe9a 	bl	8005c80 <PID_GetKI>
    break;
 8002f4c:	e7d1      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002f4e:	6828      	ldr	r0, [r5, #0]
 8002f50:	f002 fe92 	bl	8005c78 <PID_GetKP>
    break;
 8002f54:	e7cd      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002f56:	4620      	mov	r0, r4
 8002f58:	f7fd fdf8 	bl	8000b4c <MCI_GetMecSpeedRefUnit>
 8002f5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f60:	0040      	lsls	r0, r0, #1
    break;
 8002f62:	e7c6      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002f64:	4620      	mov	r0, r4
 8002f66:	f7fd fe2d 	bl	8000bc4 <MCI_GetVqd>
 8002f6a:	1400      	asrs	r0, r0, #16
    break;
 8002f6c:	e7c1      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7fd fe28 	bl	8000bc4 <MCI_GetVqd>
 8002f74:	b200      	sxth	r0, r0
    break;
 8002f76:	e7bc      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002f78:	6868      	ldr	r0, [r5, #4]
 8002f7a:	f002 fe7d 	bl	8005c78 <PID_GetKP>
    break;
 8002f7e:	e7b8      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002f80:	6828      	ldr	r0, [r5, #0]
 8002f82:	f002 fe7d 	bl	8005c80 <PID_GetKI>
    break;
 8002f86:	e7b4      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002f88:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002f8a:	f002 fe53 	bl	8005c34 <NTC_GetAvTemp_C>
    break;
 8002f8e:	e7b0      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002f90:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002f92:	f001 ff6d 	bl	8004e70 <VBS_GetAvBusVoltage_V>
    break;
 8002f96:	e7ac      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002f98:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002f9a:	f003 f9a7 	bl	80062ec <STC_GetMinAppNegativeMecSpeedUnit>
 8002f9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fa2:	0040      	lsls	r0, r0, #1
    break;
 8002fa4:	e7a5      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002fa6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002fa8:	f003 f99e 	bl	80062e8 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002fac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fb0:	0040      	lsls	r0, r0, #1
    break;
 8002fb2:	e79e      	b.n	8002ef2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002fb4:	6902      	ldr	r2, [r0, #16]
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fba:	0f1a      	lsrs	r2, r3, #28
 8002fbc:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fbe:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fc2:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fc4:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fc8:	d978      	bls.n	80030bc <UI_GetReg+0x3ec>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d893      	bhi.n	8002ef6 <UI_GetReg+0x226>
        pSPD = pMCT->pSpeedSensorAux;
 8002fce:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d090      	beq.n	8002ef6 <UI_GetReg+0x226>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002fd4:	f003 f8ca 	bl	800616c <SPD_GetS16Speed>
 8002fd8:	e78b      	b.n	8002ef2 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002fda:	6902      	ldr	r2, [r0, #16]
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fe0:	0f1a      	lsrs	r2, r3, #28
 8002fe2:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fe4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fe8:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fea:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002fee:	d961      	bls.n	80030b4 <UI_GetReg+0x3e4>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d880      	bhi.n	8002ef6 <UI_GetReg+0x226>
        pSPD = pMCT->pSpeedSensorAux;
 8002ff4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	f43f af7d 	beq.w	8002ef6 <UI_GetReg+0x226>
        bRetVal = SPD_GetElAngle(pSPD);
 8002ffc:	f003 f87e 	bl	80060fc <SPD_GetElAngle>
 8003000:	e777      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003002:	4620      	mov	r0, r4
 8003004:	f7fd fdec 	bl	8000be0 <MCI_GetValphabeta>
 8003008:	1400      	asrs	r0, r0, #16
    break;
 800300a:	e772      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800300c:	4620      	mov	r0, r4
 800300e:	f7fd fde7 	bl	8000be0 <MCI_GetValphabeta>
 8003012:	b200      	sxth	r0, r0
    break;
 8003014:	e76d      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).d;
 8003016:	4620      	mov	r0, r4
 8003018:	f7fd fdb8 	bl	8000b8c <MCI_GetIqd>
 800301c:	1400      	asrs	r0, r0, #16
    break;
 800301e:	e768      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).q;
 8003020:	4620      	mov	r0, r4
 8003022:	f7fd fdb3 	bl	8000b8c <MCI_GetIqd>
 8003026:	b200      	sxth	r0, r0
    break;
 8003028:	e763      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800302a:	4620      	mov	r0, r4
 800302c:	f7fd fd86 	bl	8000b3c <MCI_GetAvrgMecSpeedUnit>
 8003030:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003034:	0040      	lsls	r0, r0, #1
    break;
 8003036:	e75c      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003038:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800303a:	f003 fa09 	bl	8006450 <STM_GetState>
	break;
 800303e:	e758      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003040:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 8003042:	b00c      	add	sp, #48	; 0x30
 8003044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003048:	f003 ba10 	b.w	800646c <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 800304c:	f7ff fd7e 	bl	8002b4c <UI_GetSelectedMC>
    break;
 8003050:	e74f      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003052:	6828      	ldr	r0, [r5, #0]
 8003054:	f002 fe1c 	bl	8005c90 <PID_GetKIDivisor>
    break;
 8003058:	e74b      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 800305a:	6828      	ldr	r0, [r5, #0]
 800305c:	f002 fe16 	bl	8005c8c <PID_GetKPDivisor>
    break;
 8003060:	e747      	b.n	8002ef2 <UI_GetReg+0x222>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003062:	4620      	mov	r0, r4
 8003064:	f7fd fd5c 	bl	8000b20 <MCI_GetControlMode>
 8003068:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800306a:	4620      	mov	r0, r4
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800306c:	d02a      	beq.n	80030c4 <UI_GetReg+0x3f4>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800306e:	f7fd fd6d 	bl	8000b4c <MCI_GetMecSpeedRefUnit>
 8003072:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003076:	0040      	lsls	r0, r0, #1
 8003078:	e73b      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)(MC_UID);
 800307a:	4815      	ldr	r0, [pc, #84]	; (80030d0 <UI_GetReg+0x400>)
 800307c:	e739      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 800307e:	6868      	ldr	r0, [r5, #4]
 8003080:	f002 fe0a 	bl	8005c98 <PID_GetKD>
    break;
 8003084:	e735      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003086:	68a8      	ldr	r0, [r5, #8]
 8003088:	f002 fdfa 	bl	8005c80 <PID_GetKI>
    break;
 800308c:	e731      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 800308e:	68a8      	ldr	r0, [r5, #8]
 8003090:	f002 fdf2 	bl	8005c78 <PID_GetKP>
    break;
 8003094:	e72d      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003096:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8003098:	f002 fd88 	bl	8005bac <MPM_GetAvrgElMotorPowerW>
    break;
 800309c:	e729      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 800309e:	4620      	mov	r0, r4
 80030a0:	f7fd fd3e 	bl	8000b20 <MCI_GetControlMode>
    break;
 80030a4:	e725      	b.n	8002ef2 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 80030a6:	6828      	ldr	r0, [r5, #0]
 80030a8:	f002 fdf6 	bl	8005c98 <PID_GetKD>
    break;
 80030ac:	e721      	b.n	8002ef2 <UI_GetReg+0x222>
        *success = false;
 80030ae:	2000      	movs	r0, #0
 80030b0:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 80030b2:	e71e      	b.n	8002ef2 <UI_GetReg+0x222>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030b4:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80030b6:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030b8:	d89d      	bhi.n	8002ff6 <UI_GetReg+0x326>
 80030ba:	e79b      	b.n	8002ff4 <UI_GetReg+0x324>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030bc:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80030be:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030c0:	d886      	bhi.n	8002fd0 <UI_GetReg+0x300>
 80030c2:	e784      	b.n	8002fce <UI_GetReg+0x2fe>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80030c4:	f7fd fd2e 	bl	8000b24 <MCI_GetLastRampFinalSpeed>
 80030c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80030cc:	0040      	lsls	r0, r0, #1
 80030ce:	e710      	b.n	8002ef2 <UI_GetReg+0x222>
 80030d0:	34a6847a 	.word	0x34a6847a

080030d4 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80030d4:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80030d6:	6883      	ldr	r3, [r0, #8]
 80030d8:	7d02      	ldrb	r2, [r0, #20]
 80030da:	3901      	subs	r1, #1
 80030dc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 80030e0:	290d      	cmp	r1, #13
 80030e2:	d808      	bhi.n	80030f6 <UI_ExecCmd+0x22>
 80030e4:	e8df f001 	tbb	[pc, r1]
 80030e8:	0e091419 	.word	0x0e091419
 80030ec:	231e100e 	.word	0x231e100e
 80030f0:	07070728 	.word	0x07070728
 80030f4:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80030f6:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80030f8:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 80030fa:	4620      	mov	r0, r4
 80030fc:	f7fd fd0c 	bl	8000b18 <MCI_GetSTMState>
 8003100:	2806      	cmp	r0, #6
 8003102:	d01e      	beq.n	8003142 <UI_ExecCmd+0x6e>
  bool retVal = true;
 8003104:	2001      	movs	r0, #1
}
 8003106:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8003108:	4620      	mov	r0, r4
 800310a:	f7fd fd05 	bl	8000b18 <MCI_GetSTMState>
 800310e:	b120      	cbz	r0, 800311a <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8003110:	4620      	mov	r0, r4
 8003112:	f7fd fcb9 	bl	8000a88 <MCI_StopMotor>
  bool retVal = true;
 8003116:	2001      	movs	r0, #1
}
 8003118:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 800311a:	4620      	mov	r0, r4
 800311c:	f7fd fcaa 	bl	8000a74 <MCI_StartMotor>
  bool retVal = true;
 8003120:	2001      	movs	r0, #1
}
 8003122:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8003124:	4620      	mov	r0, r4
 8003126:	f7fd fcb3 	bl	8000a90 <MCI_FaultAcknowledged>
  bool retVal = true;
 800312a:	2001      	movs	r0, #1
}
 800312c:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 800312e:	4620      	mov	r0, r4
 8003130:	f7fd fcb2 	bl	8000a98 <MCI_EncoderAlign>
  bool retVal = true;
 8003134:	2001      	movs	r0, #1
}
 8003136:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8003138:	4620      	mov	r0, r4
 800313a:	f7fd fd6d 	bl	8000c18 <MCI_Clear_Iqdref>
  bool retVal = true;
 800313e:	2001      	movs	r0, #1
}
 8003140:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8003142:	4620      	mov	r0, r4
 8003144:	f7fd fcf6 	bl	8000b34 <MCI_StopRamp>
  bool retVal = true;
 8003148:	2001      	movs	r0, #1
}
 800314a:	bd10      	pop	{r4, pc}

0800314c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 800314c:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003150:	7d04      	ldrb	r4, [r0, #20]
 8003152:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003154:	fb83 c301 	smull	ip, r3, r3, r1
 8003158:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800315c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003160:	b209      	sxth	r1, r1
 8003162:	f7fd fc67 	bl	8000a34 <MCI_ExecSpeedRamp>
  return true;
}
 8003166:	2001      	movs	r0, #1
 8003168:	bd10      	pop	{r4, pc}
 800316a:	bf00      	nop
 800316c:	2aaaaaab 	.word	0x2aaaaaab

08003170 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8003170:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003172:	6883      	ldr	r3, [r0, #8]
 8003174:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8003176:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800317a:	f7fd fc67 	bl	8000a4c <MCI_ExecTorqueRamp>
  return true;
}
 800317e:	2001      	movs	r0, #1
 8003180:	bd10      	pop	{r4, pc}
 8003182:	bf00      	nop

08003184 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003186:	7d04      	ldrb	r4, [r0, #20]
 8003188:	68c0      	ldr	r0, [r0, #12]
 800318a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800318e:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8003190:	b19c      	cbz	r4, 80031ba <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003192:	4620      	mov	r0, r4
 8003194:	461e      	mov	r6, r3
 8003196:	4617      	mov	r7, r2
 8003198:	460d      	mov	r5, r1
 800319a:	f003 fa9b 	bl	80066d4 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800319e:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80031a0:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80031a2:	4620      	mov	r0, r4
 80031a4:	f003 fa9c 	bl	80066e0 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80031a8:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80031aa:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80031ac:	4620      	mov	r0, r4
 80031ae:	f003 fa9f 	bl	80066f0 <RUC_GetPhaseFinalTorque>
 80031b2:	9b06      	ldr	r3, [sp, #24]
 80031b4:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 80031b6:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80031b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80031ba:	4620      	mov	r0, r4
}
 80031bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031be:	bf00      	nop

080031c0 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80031c0:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80031c2:	7d04      	ldrb	r4, [r0, #20]
 80031c4:	68c0      	ldr	r0, [r0, #12]
{
 80031c6:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80031c8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 80031cc:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80031d0:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80031d2:	9001      	str	r0, [sp, #4]
{
 80031d4:	461d      	mov	r5, r3
 80031d6:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80031d8:	f003 fa6a 	bl	80066b0 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80031dc:	9801      	ldr	r0, [sp, #4]
 80031de:	462a      	mov	r2, r5
 80031e0:	4621      	mov	r1, r4
 80031e2:	f003 fa6b 	bl	80066bc <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80031e6:	9801      	ldr	r0, [sp, #4]
 80031e8:	4632      	mov	r2, r6
 80031ea:	4621      	mov	r1, r4
 80031ec:	f003 fa6c 	bl	80066c8 <RUC_SetPhaseFinalTorque>
  return true;
}
 80031f0:	2001      	movs	r0, #1
 80031f2:	b002      	add	sp, #8
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
 80031f6:	bf00      	nop

080031f8 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80031f8:	b410      	push	{r4}
 80031fa:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80031fc:	7d04      	ldrb	r4, [r0, #20]
 80031fe:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8003200:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8003204:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8003208:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800320c:	9901      	ldr	r1, [sp, #4]
}
 800320e:	b003      	add	sp, #12
 8003210:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8003214:	f7fd bc24 	b.w	8000a60 <MCI_SetCurrentReferences>

08003218 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8003218:	2000      	movs	r0, #0
 800321a:	4770      	bx	lr

0800321c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <SystemInit+0x18>)
 800321e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003222:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003226:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800322a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800322e:	6099      	str	r1, [r3, #8]
#endif
}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003238:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800323a:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <HAL_InitTick+0x3c>)
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_InitTick+0x40>)
 800323e:	7812      	ldrb	r2, [r2, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
{
 8003242:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003248:	fbb0 f0f2 	udiv	r0, r0, r2
 800324c:	fbb3 f0f0 	udiv	r0, r3, r0
 8003250:	f000 fb06 	bl	8003860 <HAL_SYSTICK_Config>
 8003254:	b908      	cbnz	r0, 800325a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003256:	2d0f      	cmp	r5, #15
 8003258:	d901      	bls.n	800325e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800325a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800325c:	bd38      	pop	{r3, r4, r5, pc}
 800325e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003260:	4602      	mov	r2, r0
 8003262:	4629      	mov	r1, r5
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	f000 faa2 	bl	80037b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_InitTick+0x44>)
 800326e:	4620      	mov	r0, r4
 8003270:	601d      	str	r5, [r3, #0]
}
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	20000590 	.word	0x20000590
 8003278:	2000058c 	.word	0x2000058c
 800327c:	20000594 	.word	0x20000594

08003280 <HAL_Init>:
{
 8003280:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_Init+0x30>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003292:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800329a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
 800329e:	f000 fa73 	bl	8003788 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80032a2:	2004      	movs	r0, #4
 80032a4:	f7ff ffc8 	bl	8003238 <HAL_InitTick>
  HAL_MspInit();
 80032a8:	f7fe ffc4 	bl	8002234 <HAL_MspInit>
}
 80032ac:	2000      	movs	r0, #0
 80032ae:	bd08      	pop	{r3, pc}
 80032b0:	40023c00 	.word	0x40023c00

080032b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80032b4:	4a03      	ldr	r2, [pc, #12]	; (80032c4 <HAL_IncTick+0x10>)
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <HAL_IncTick+0x14>)
 80032b8:	6811      	ldr	r1, [r2, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	440b      	add	r3, r1
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000a14 	.word	0x20000a14
 80032c8:	20000590 	.word	0x20000590

080032cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80032cc:	4b01      	ldr	r3, [pc, #4]	; (80032d4 <HAL_GetTick+0x8>)
 80032ce:	6818      	ldr	r0, [r3, #0]
}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000a14 	.word	0x20000a14

080032d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff fff6 	bl	80032cc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80032e2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80032e4:	d002      	beq.n	80032ec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e6:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_Delay+0x20>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ec:	f7ff ffee 	bl	80032cc <HAL_GetTick>
 80032f0:	1b43      	subs	r3, r0, r5
 80032f2:	42a3      	cmp	r3, r4
 80032f4:	d3fa      	bcc.n	80032ec <HAL_Delay+0x14>
  {
  }
}
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	20000590 	.word	0x20000590

080032fc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80032fc:	4a02      	ldr	r2, [pc, #8]	; (8003308 <HAL_SuspendTick+0xc>)
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	f023 0302 	bic.w	r3, r3, #2
 8003304:	6013      	str	r3, [r2, #0]
}
 8003306:	4770      	bx	lr
 8003308:	e000e010 	.word	0xe000e010

0800330c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800330c:	2800      	cmp	r0, #0
 800330e:	f000 80a0 	beq.w	8003452 <HAL_ADC_Init+0x146>
{
 8003312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003314:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003316:	4604      	mov	r4, r0
 8003318:	b13d      	cbz	r5, 800332a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800331a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800331c:	06db      	lsls	r3, r3, #27
 800331e:	d50c      	bpl.n	800333a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003320:	2300      	movs	r3, #0
 8003322:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003326:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800332a:	f7fe ffa1 	bl	8002270 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800332e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003330:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003332:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003336:	06db      	lsls	r3, r3, #27
 8003338:	d4f2      	bmi.n	8003320 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800333a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800333c:	4948      	ldr	r1, [pc, #288]	; (8003460 <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800333e:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003340:	4d48      	ldr	r5, [pc, #288]	; (8003464 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8003342:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003346:	f022 0202 	bic.w	r2, r2, #2
 800334a:	f042 0202 	orr.w	r2, r2, #2
 800334e:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003350:	684a      	ldr	r2, [r1, #4]
 8003352:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003356:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003358:	684a      	ldr	r2, [r1, #4]
 800335a:	6860      	ldr	r0, [r4, #4]
 800335c:	4302      	orrs	r2, r0
 800335e:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003360:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003362:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003364:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003366:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003368:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800336c:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003376:	6858      	ldr	r0, [r3, #4]
 8003378:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800337c:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800337e:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003380:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003382:	4339      	orrs	r1, r7
 8003384:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003386:	6899      	ldr	r1, [r3, #8]
 8003388:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800338c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800338e:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003390:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003392:	ea42 0206 	orr.w	r2, r2, r6
 8003396:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003398:	d052      	beq.n	8003440 <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800339a:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800339c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800339e:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80033a2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	4310      	orrs	r0, r2
 80033a8:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80033b0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	432a      	orrs	r2, r5
 80033b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	f022 0202 	bic.w	r2, r2, #2
 80033be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	7e21      	ldrb	r1, [r4, #24]
 80033c4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80033c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033ca:	f894 2020 	ldrb.w	r2, [r4, #32]
 80033ce:	2a00      	cmp	r2, #0
 80033d0:	d041      	beq.n	8003456 <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033d2:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	3901      	subs	r1, #1
 80033e8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80033ec:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033f0:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033f2:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033f4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fc:	3801      	subs	r0, #1
 80033fe:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8003402:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003404:	6899      	ldr	r1, [r3, #8]
 8003406:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800340a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800340c:	6899      	ldr	r1, [r3, #8]
 800340e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003412:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003416:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003418:	6899      	ldr	r1, [r3, #8]
 800341a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800341e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003420:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003422:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003424:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003428:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800342a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800342c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003438:	2300      	movs	r3, #0
 800343a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800343e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003446:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	e7b2      	b.n	80033b8 <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 8003452:	2001      	movs	r0, #1
}
 8003454:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	e7c6      	b.n	80033ee <HAL_ADC_Init+0xe2>
 8003460:	40012300 	.word	0x40012300
 8003464:	0f000001 	.word	0x0f000001

08003468 <HAL_ADC_ConfigChannel>:
{
 8003468:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800346a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800346e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003470:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003472:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003474:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003476:	f000 8094 	beq.w	80035a2 <HAL_ADC_ConfigChannel+0x13a>
 800347a:	2301      	movs	r3, #1
 800347c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003480:	680d      	ldr	r5, [r1, #0]
 8003482:	2d09      	cmp	r5, #9
 8003484:	d829      	bhi.n	80034da <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003486:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003488:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800348a:	6922      	ldr	r2, [r4, #16]
 800348c:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8003490:	2607      	movs	r6, #7
 8003492:	40be      	lsls	r6, r7
 8003494:	ea22 0206 	bic.w	r2, r2, r6
 8003498:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800349a:	6922      	ldr	r2, [r4, #16]
 800349c:	40bb      	lsls	r3, r7
 800349e:	4313      	orrs	r3, r2
 80034a0:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 80034a2:	684b      	ldr	r3, [r1, #4]
 80034a4:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034a6:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 80034a8:	d82c      	bhi.n	8003504 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80034b0:	3b05      	subs	r3, #5
 80034b2:	211f      	movs	r1, #31
 80034b4:	4099      	lsls	r1, r3
 80034b6:	ea22 0201 	bic.w	r2, r2, r1
 80034ba:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80034be:	fa06 f303 	lsl.w	r3, r6, r3
 80034c2:	4313      	orrs	r3, r2
 80034c4:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <HAL_ADC_ConfigChannel+0x144>)
 80034c8:	429c      	cmp	r4, r3
 80034ca:	d02f      	beq.n	800352c <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 80034cc:	2300      	movs	r3, #0
 80034ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80034d2:	4618      	mov	r0, r3
}
 80034d4:	b002      	add	sp, #8
 80034d6:	bcf0      	pop	{r4, r5, r6, r7}
 80034d8:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034da:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034dc:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034de:	68e7      	ldr	r7, [r4, #12]
 80034e0:	b2ae      	uxth	r6, r5
 80034e2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80034e6:	3a1e      	subs	r2, #30
 80034e8:	f04f 0c07 	mov.w	ip, #7
 80034ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80034f0:	ea27 070c 	bic.w	r7, r7, ip
 80034f4:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034f6:	68e7      	ldr	r7, [r4, #12]
 80034f8:	4093      	lsls	r3, r2
 80034fa:	433b      	orrs	r3, r7
 80034fc:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80034fe:	684b      	ldr	r3, [r1, #4]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d9d2      	bls.n	80034aa <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8003504:	2b0c      	cmp	r3, #12
 8003506:	d837      	bhi.n	8003578 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003508:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800350c:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8003510:	221f      	movs	r2, #31
 8003512:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003514:	408a      	lsls	r2, r1
 8003516:	ea23 0302 	bic.w	r3, r3, r2
 800351a:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800351c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800351e:	fa06 f101 	lsl.w	r1, r6, r1
 8003522:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003524:	4b21      	ldr	r3, [pc, #132]	; (80035ac <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003526:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003528:	429c      	cmp	r4, r3
 800352a:	d1cf      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x64>
 800352c:	2d12      	cmp	r5, #18
 800352e:	d032      	beq.n	8003596 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003530:	f1a5 0310 	sub.w	r3, r5, #16
 8003534:	2b01      	cmp	r3, #1
 8003536:	d8c9      	bhi.n	80034cc <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003538:	4a1d      	ldr	r2, [pc, #116]	; (80035b0 <HAL_ADC_ConfigChannel+0x148>)
 800353a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800353c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800353e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003542:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003544:	d1c2      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x64>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003546:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_ADC_ConfigChannel+0x14c>)
 8003548:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8003552:	f202 3283 	addw	r2, r2, #899	; 0x383
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0c9b      	lsrs	r3, r3, #18
 800355c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003564:	9b01      	ldr	r3, [sp, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0b0      	beq.n	80034cc <HAL_ADC_ConfigChannel+0x64>
        counter--;
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	3b01      	subs	r3, #1
 800356e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003570:	9b01      	ldr	r3, [sp, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f9      	bne.n	800356a <HAL_ADC_ConfigChannel+0x102>
 8003576:	e7a9      	b.n	80034cc <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003578:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800357c:	3a41      	subs	r2, #65	; 0x41
 800357e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003580:	211f      	movs	r1, #31
 8003582:	4091      	lsls	r1, r2
 8003584:	ea23 0301 	bic.w	r3, r3, r1
 8003588:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800358a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800358c:	fa06 f102 	lsl.w	r1, r6, r2
 8003590:	4319      	orrs	r1, r3
 8003592:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003594:	e797      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x5e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003596:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <HAL_ADC_ConfigChannel+0x148>)
 8003598:	6853      	ldr	r3, [r2, #4]
 800359a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800359e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035a0:	e794      	b.n	80034cc <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 80035a2:	2002      	movs	r0, #2
}
 80035a4:	b002      	add	sp, #8
 80035a6:	bcf0      	pop	{r4, r5, r6, r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40012000 	.word	0x40012000
 80035b0:	40012300 	.word	0x40012300
 80035b4:	2000058c 	.word	0x2000058c

080035b8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80035b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80035be:	698f      	ldr	r7, [r1, #24]
  __HAL_LOCK(hadc);
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f000 80d9 	beq.w	8003778 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80035c6:	2301      	movs	r3, #1
 80035c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80035cc:	680e      	ldr	r6, [r1, #0]
 80035ce:	2e09      	cmp	r6, #9
 80035d0:	d870      	bhi.n	80036b4 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80035d2:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80035d4:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80035d6:	691c      	ldr	r4, [r3, #16]
 80035d8:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80035dc:	2507      	movs	r5, #7
 80035de:	fa05 f50c 	lsl.w	r5, r5, ip
 80035e2:	ea24 0405 	bic.w	r4, r4, r5
 80035e6:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80035e8:	691c      	ldr	r4, [r3, #16]
 80035ea:	fa02 f20c 	lsl.w	r2, r2, ip
 80035ee:	4322      	orrs	r2, r4
 80035f0:	611a      	str	r2, [r3, #16]
 80035f2:	4634      	mov	r4, r6
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80035f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80035f6:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80035fa:	684d      	ldr	r5, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80035fc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003604:	f10e 3cff 	add.w	ip, lr, #4294967295
 8003608:	ea42 5c0c 	orr.w	ip, r2, ip, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800360c:	1cea      	adds	r2, r5, #3
 800360e:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003612:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 800361c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003620:	f04f 0e1f 	mov.w	lr, #31
 8003624:	fa0e fe02 	lsl.w	lr, lr, r2
 8003628:	ea2c 0c0e 	bic.w	ip, ip, lr
 800362c:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003630:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003634:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8003784 <HAL_ADCEx_InjectedConfigChannel+0x1cc>
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003638:	fa04 f202 	lsl.w	r2, r4, r2
 800363c:	ea42 020e 	orr.w	r2, r2, lr
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003640:	4567      	cmp	r7, ip
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003644:	d072      	beq.n	800372c <HAL_ADCEx_InjectedConfigChannel+0x174>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003646:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003648:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800364c:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 8003650:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	4317      	orrs	r7, r2
 8003656:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003658:	689c      	ldr	r4, [r3, #8]
 800365a:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 800365e:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	ea42 020c 	orr.w	r2, r2, ip
 8003666:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003668:	7d4a      	ldrb	r2, [r1, #21]
 800366a:	2a00      	cmp	r2, #0
 800366c:	d039      	beq.n	80036e2 <HAL_ADCEx_InjectedConfigChannel+0x12a>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003674:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003676:	7d0a      	ldrb	r2, [r1, #20]
 8003678:	2a00      	cmp	r2, #0
 800367a:	d039      	beq.n	80036f0 <HAL_ADCEx_InjectedConfigChannel+0x138>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800367c:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 800367e:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003680:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003684:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003686:	d039      	beq.n	80036fc <HAL_ADCEx_InjectedConfigChannel+0x144>
 8003688:	2d03      	cmp	r5, #3
 800368a:	d063      	beq.n	8003754 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 800368c:	2d01      	cmp	r5, #1
 800368e:	d056      	beq.n	800373e <HAL_ADCEx_InjectedConfigChannel+0x186>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003690:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003692:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003694:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003698:	f022 020f 	bic.w	r2, r2, #15
 800369c:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80036a4:	4a35      	ldr	r2, [pc, #212]	; (800377c <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d035      	beq.n	8003716 <HAL_ADCEx_InjectedConfigChannel+0x15e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036aa:	2300      	movs	r3, #0
 80036ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036b0:	4618      	mov	r0, r3
}
 80036b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80036b4:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80036b6:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80036b8:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80036bc:	b2b4      	uxth	r4, r6
 80036be:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80036c2:	3d1e      	subs	r5, #30
 80036c4:	f04f 0e07 	mov.w	lr, #7
 80036c8:	fa0e fe05 	lsl.w	lr, lr, r5
 80036cc:	ea2c 0c0e 	bic.w	ip, ip, lr
 80036d0:	f8c3 c00c 	str.w	ip, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80036d4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80036d8:	40aa      	lsls	r2, r5
 80036da:	ea42 020c 	orr.w	r2, r2, ip
 80036de:	60da      	str	r2, [r3, #12]
 80036e0:	e788      	b.n	80035f4 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80036ea:	7d0a      	ldrb	r2, [r1, #20]
 80036ec:	2a00      	cmp	r2, #0
 80036ee:	d1c5      	bne.n	800367c <HAL_ADCEx_InjectedConfigChannel+0xc4>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80036f0:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80036f2:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80036f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036f8:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80036fa:	d1c5      	bne.n	8003688 <HAL_ADCEx_InjectedConfigChannel+0xd0>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80036fc:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80036fe:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003700:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003704:	f022 020f 	bic.w	r2, r2, #15
 8003708:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	430a      	orrs	r2, r1
 800370e:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003710:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d1c9      	bne.n	80036aa <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8003716:	2e12      	cmp	r6, #18
 8003718:	d027      	beq.n	800376a <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800371a:	3e10      	subs	r6, #16
 800371c:	2e01      	cmp	r6, #1
 800371e:	d8c4      	bhi.n	80036aa <HAL_ADCEx_InjectedConfigChannel+0xf2>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 8003722:	6853      	ldr	r3, [r2, #4]
 8003724:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003728:	6053      	str	r3, [r2, #4]
 800372a:	e7be      	b.n	80036aa <HAL_ADCEx_InjectedConfigChannel+0xf2>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003732:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	e794      	b.n	8003668 <HAL_ADCEx_InjectedConfigChannel+0xb0>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800373e:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003740:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003742:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003746:	f022 020f 	bic.w	r2, r2, #15
 800374a:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	430a      	orrs	r2, r1
 8003750:	615a      	str	r2, [r3, #20]
      break;
 8003752:	e7a7      	b.n	80036a4 <HAL_ADCEx_InjectedConfigChannel+0xec>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003754:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003756:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003758:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800375c:	f022 020f 	bic.w	r2, r2, #15
 8003760:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	430a      	orrs	r2, r1
 8003766:	61da      	str	r2, [r3, #28]
      break;
 8003768:	e79c      	b.n	80036a4 <HAL_ADCEx_InjectedConfigChannel+0xec>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800376a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800376e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003772:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003776:	e798      	b.n	80036aa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8003778:	2002      	movs	r0, #2
}
 800377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800377c:	40012000 	.word	0x40012000
 8003780:	40012300 	.word	0x40012300
 8003784:	000f0001 	.word	0x000f0001

08003788 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003788:	4908      	ldr	r1, [pc, #32]	; (80037ac <HAL_NVIC_SetPriorityGrouping+0x24>)
 800378a:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800378e:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003790:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8003794:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003796:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800379a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800379c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80037a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80037a8:	60cb      	str	r3, [r1, #12]
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_NVIC_SetPriority+0x68>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037b8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037ba:	f1c3 0507 	rsb	r5, r3, #7
 80037be:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c4:	bf28      	it	cs
 80037c6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c8:	2c06      	cmp	r4, #6
 80037ca:	d919      	bls.n	8003800 <HAL_NVIC_SetPriority+0x50>
 80037cc:	3b03      	subs	r3, #3
 80037ce:	f04f 34ff 	mov.w	r4, #4294967295
 80037d2:	409c      	lsls	r4, r3
 80037d4:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	f04f 34ff 	mov.w	r4, #4294967295
 80037dc:	40ac      	lsls	r4, r5
 80037de:	ea21 0104 	bic.w	r1, r1, r4
 80037e2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80037e4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80037ea:	db0c      	blt.n	8003806 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80037f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80037f4:	0109      	lsls	r1, r1, #4
 80037f6:	b2c9      	uxtb	r1, r1
 80037f8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80037fc:	bc30      	pop	{r4, r5}
 80037fe:	4770      	bx	lr
 8003800:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003802:	4613      	mov	r3, r2
 8003804:	e7e8      	b.n	80037d8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_NVIC_SetPriority+0x6c>)
 8003808:	f000 000f 	and.w	r0, r0, #15
 800380c:	0109      	lsls	r1, r1, #4
 800380e:	4403      	add	r3, r0
 8003810:	b2c9      	uxtb	r1, r1
 8003812:	7619      	strb	r1, [r3, #24]
 8003814:	bc30      	pop	{r4, r5}
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00
 800381c:	e000ecfc 	.word	0xe000ecfc

08003820 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003820:	2800      	cmp	r0, #0
 8003822:	db07      	blt.n	8003834 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003824:	f000 011f 	and.w	r1, r0, #31
 8003828:	4a03      	ldr	r2, [pc, #12]	; (8003838 <HAL_NVIC_EnableIRQ+0x18>)
 800382a:	0940      	lsrs	r0, r0, #5
 800382c:	2301      	movs	r3, #1
 800382e:	408b      	lsls	r3, r1
 8003830:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000e100 	.word	0xe000e100

0800383c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800383c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003840:	4905      	ldr	r1, [pc, #20]	; (8003858 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003844:	68ca      	ldr	r2, [r1, #12]
 8003846:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800384a:	4313      	orrs	r3, r2
 800384c:	60cb      	str	r3, [r1, #12]
 800384e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003852:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003854:	e7fd      	b.n	8003852 <HAL_NVIC_SystemReset+0x16>
 8003856:	bf00      	nop
 8003858:	e000ed00 	.word	0xe000ed00
 800385c:	05fa0004 	.word	0x05fa0004

08003860 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003860:	3801      	subs	r0, #1
 8003862:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003866:	d20e      	bcs.n	8003886 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	4c08      	ldr	r4, [pc, #32]	; (8003890 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003870:	20f0      	movs	r0, #240	; 0xf0
 8003872:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003876:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003878:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800387a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800387c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800387e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003882:	6019      	str	r1, [r3, #0]
 8003884:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003886:	2001      	movs	r0, #1
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop

08003898 <HAL_SYSTICK_IRQHandler>:
{
 8003898:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800389a:	f7ff fffb 	bl	8003894 <HAL_SYSTICK_Callback>
}
 800389e:	bd08      	pop	{r3, pc}

080038a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a4:	f8df c234 	ldr.w	ip, [pc, #564]	; 8003adc <HAL_GPIO_Init+0x23c>
 80038a8:	680d      	ldr	r5, [r1, #0]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038aa:	f8df b234 	ldr.w	fp, [pc, #564]	; 8003ae0 <HAL_GPIO_Init+0x240>
{
 80038ae:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b0:	2300      	movs	r3, #0
 80038b2:	e003      	b.n	80038bc <HAL_GPIO_Init+0x1c>
 80038b4:	3301      	adds	r3, #1
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	f000 809c 	beq.w	80039f4 <HAL_GPIO_Init+0x154>
    ioposition = 0x01U << position;
 80038bc:	2201      	movs	r2, #1
 80038be:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038c0:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
 80038c4:	43aa      	bics	r2, r5
 80038c6:	d1f5      	bne.n	80038b4 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038c8:	684c      	ldr	r4, [r1, #4]
 80038ca:	f024 0e10 	bic.w	lr, r4, #16
 80038ce:	f10e 32ff 	add.w	r2, lr, #4294967295
 80038d2:	2a01      	cmp	r2, #1
 80038d4:	ea4f 0643 	mov.w	r6, r3, lsl #1
 80038d8:	f240 808f 	bls.w	80039fa <HAL_GPIO_Init+0x15a>
      temp = GPIOx->PUPDR;
 80038dc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038de:	2203      	movs	r2, #3
 80038e0:	40b2      	lsls	r2, r6
 80038e2:	ea27 0e02 	bic.w	lr, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e6:	688f      	ldr	r7, [r1, #8]
 80038e8:	40b7      	lsls	r7, r6
 80038ea:	ea47 070e 	orr.w	r7, r7, lr
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ee:	43d2      	mvns	r2, r2
 80038f0:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 80038f2:	60c7      	str	r7, [r0, #12]
      temp = GPIOx->MODER;
 80038f4:	f8d0 e000 	ldr.w	lr, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038f8:	9a01      	ldr	r2, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038fa:	f004 0703 	and.w	r7, r4, #3
 80038fe:	fa07 f606 	lsl.w	r6, r7, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003902:	ea0e 0e02 	and.w	lr, lr, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003906:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800390a:	00e7      	lsls	r7, r4, #3
      GPIOx->MODER = temp;
 800390c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800390e:	d5d1      	bpl.n	80038b4 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003910:	2200      	movs	r2, #0
 8003912:	9203      	str	r2, [sp, #12]
 8003914:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8003918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8003920:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8003924:	f023 0603 	bic.w	r6, r3, #3
 8003928:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800392c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003930:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8003934:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003936:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800393c:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003940:	00bf      	lsls	r7, r7, #2
 8003942:	220f      	movs	r2, #15
 8003944:	40ba      	lsls	r2, r7
 8003946:	ea2e 0802 	bic.w	r8, lr, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800394a:	4a5e      	ldr	r2, [pc, #376]	; (8003ac4 <HAL_GPIO_Init+0x224>)
 800394c:	4290      	cmp	r0, r2
 800394e:	d024      	beq.n	800399a <HAL_GPIO_Init+0xfa>
 8003950:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003954:	4290      	cmp	r0, r2
 8003956:	f000 808a 	beq.w	8003a6e <HAL_GPIO_Init+0x1ce>
 800395a:	4a5b      	ldr	r2, [pc, #364]	; (8003ac8 <HAL_GPIO_Init+0x228>)
 800395c:	4290      	cmp	r0, r2
 800395e:	f000 808d 	beq.w	8003a7c <HAL_GPIO_Init+0x1dc>
 8003962:	4a5a      	ldr	r2, [pc, #360]	; (8003acc <HAL_GPIO_Init+0x22c>)
 8003964:	4290      	cmp	r0, r2
 8003966:	f000 8090 	beq.w	8003a8a <HAL_GPIO_Init+0x1ea>
 800396a:	4a59      	ldr	r2, [pc, #356]	; (8003ad0 <HAL_GPIO_Init+0x230>)
 800396c:	4290      	cmp	r0, r2
 800396e:	f000 8093 	beq.w	8003a98 <HAL_GPIO_Init+0x1f8>
 8003972:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_GPIO_Init+0x234>)
 8003974:	4290      	cmp	r0, r2
 8003976:	f000 8096 	beq.w	8003aa6 <HAL_GPIO_Init+0x206>
 800397a:	4a57      	ldr	r2, [pc, #348]	; (8003ad8 <HAL_GPIO_Init+0x238>)
 800397c:	4290      	cmp	r0, r2
 800397e:	f000 8099 	beq.w	8003ab4 <HAL_GPIO_Init+0x214>
 8003982:	f8df e160 	ldr.w	lr, [pc, #352]	; 8003ae4 <HAL_GPIO_Init+0x244>
 8003986:	4570      	cmp	r0, lr
 8003988:	bf0c      	ite	eq
 800398a:	f04f 0e07 	moveq.w	lr, #7
 800398e:	f04f 0e08 	movne.w	lr, #8
 8003992:	fa0e f707 	lsl.w	r7, lr, r7
 8003996:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800399a:	f8c6 8008 	str.w	r8, [r6, #8]
        temp = EXTI->IMR;
 800399e:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039a2:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 80039a4:	ea6f 070a 	mvn.w	r7, sl
 80039a8:	bf54      	ite	pl
 80039aa:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80039ac:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 80039b0:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 80039b4:	f8dc 6004 	ldr.w	r6, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b8:	03a2      	lsls	r2, r4, #14
        temp &= ~((uint32_t)iocurrent);
 80039ba:	bf54      	ite	pl
 80039bc:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80039be:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->EMR = temp;
 80039c2:	f8cc 6004 	str.w	r6, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039c6:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039ca:	02e2      	lsls	r2, r4, #11
        temp &= ~((uint32_t)iocurrent);
 80039cc:	bf54      	ite	pl
 80039ce:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80039d0:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->RTSR = temp;
 80039d4:	f8cc 6008 	str.w	r6, [ip, #8]

        temp = EXTI->FTSR;
 80039d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039dc:	02a4      	lsls	r4, r4, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039de:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80039e2:	bf54      	ite	pl
 80039e4:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80039e6:	ea4a 0202 	orrmi.w	r2, sl, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ea:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 80039ec:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f0:	f47f af64 	bne.w	80038bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039f4:	b005      	add	sp, #20
 80039f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80039fa:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039fc:	688a      	ldr	r2, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039fe:	f04f 0803 	mov.w	r8, #3
 8003a02:	fa08 f806 	lsl.w	r8, r8, r6
 8003a06:	ea27 0908 	bic.w	r9, r7, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a0a:	68cf      	ldr	r7, [r1, #12]
 8003a0c:	40b7      	lsls	r7, r6
 8003a0e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8003a12:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003a14:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a18:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a1c:	ea29 090a 	bic.w	r9, r9, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a20:	409f      	lsls	r7, r3
 8003a22:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8003a26:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003a28:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a2a:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a2c:	ea27 0708 	bic.w	r7, r7, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a30:	4317      	orrs	r7, r2
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a32:	f1be 0f02 	cmp.w	lr, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a36:	ea6f 0208 	mvn.w	r2, r8
 8003a3a:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8003a3c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a3e:	f47f af59 	bne.w	80038f4 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3U];
 8003a42:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003a46:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a4a:	f003 0707 	and.w	r7, r3, #7
 8003a4e:	00ba      	lsls	r2, r7, #2
        temp = GPIOx->AFR[position >> 3U];
 8003a50:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a54:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a56:	f04f 0e0f 	mov.w	lr, #15
 8003a5a:	fa0e fe02 	lsl.w	lr, lr, r2
 8003a5e:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a62:	4097      	lsls	r7, r2
 8003a64:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003a68:	f8c8 7020 	str.w	r7, [r8, #32]
 8003a6c:	e742      	b.n	80038f4 <HAL_GPIO_Init+0x54>
 8003a6e:	f04f 0e01 	mov.w	lr, #1
 8003a72:	fa0e f707 	lsl.w	r7, lr, r7
 8003a76:	ea48 0807 	orr.w	r8, r8, r7
 8003a7a:	e78e      	b.n	800399a <HAL_GPIO_Init+0xfa>
 8003a7c:	f04f 0e02 	mov.w	lr, #2
 8003a80:	fa0e f707 	lsl.w	r7, lr, r7
 8003a84:	ea48 0807 	orr.w	r8, r8, r7
 8003a88:	e787      	b.n	800399a <HAL_GPIO_Init+0xfa>
 8003a8a:	f04f 0e03 	mov.w	lr, #3
 8003a8e:	fa0e f707 	lsl.w	r7, lr, r7
 8003a92:	ea48 0807 	orr.w	r8, r8, r7
 8003a96:	e780      	b.n	800399a <HAL_GPIO_Init+0xfa>
 8003a98:	f04f 0e04 	mov.w	lr, #4
 8003a9c:	fa0e f707 	lsl.w	r7, lr, r7
 8003aa0:	ea48 0807 	orr.w	r8, r8, r7
 8003aa4:	e779      	b.n	800399a <HAL_GPIO_Init+0xfa>
 8003aa6:	f04f 0e05 	mov.w	lr, #5
 8003aaa:	fa0e f707 	lsl.w	r7, lr, r7
 8003aae:	ea48 0807 	orr.w	r8, r8, r7
 8003ab2:	e772      	b.n	800399a <HAL_GPIO_Init+0xfa>
 8003ab4:	f04f 0e06 	mov.w	lr, #6
 8003ab8:	fa0e f707 	lsl.w	r7, lr, r7
 8003abc:	ea48 0807 	orr.w	r8, r8, r7
 8003ac0:	e76b      	b.n	800399a <HAL_GPIO_Init+0xfa>
 8003ac2:	bf00      	nop
 8003ac4:	40020000 	.word	0x40020000
 8003ac8:	40020800 	.word	0x40020800
 8003acc:	40020c00 	.word	0x40020c00
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40021400 	.word	0x40021400
 8003ad8:	40021800 	.word	0x40021800
 8003adc:	40013c00 	.word	0x40013c00
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40021c00 	.word	0x40021c00

08003ae8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae8:	b902      	cbnz	r2, 8003aec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aea:	0409      	lsls	r1, r1, #16
 8003aec:	6181      	str	r1, [r0, #24]
  }
}
 8003aee:	4770      	bx	lr

08003af0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003af0:	6943      	ldr	r3, [r0, #20]
 8003af2:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003af6:	bf08      	it	eq
 8003af8:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8003afa:	6181      	str	r1, [r0, #24]
  }
}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003b00:	4a06      	ldr	r2, [pc, #24]	; (8003b1c <HAL_PWR_EnterSLEEPMode+0x1c>)
 8003b02:	6913      	ldr	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003b04:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003b06:	f023 0304 	bic.w	r3, r3, #4
 8003b0a:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003b0c:	d003      	beq.n	8003b16 <HAL_PWR_EnterSLEEPMode+0x16>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003b0e:	bf40      	sev
    __WFE();
 8003b10:	bf20      	wfe
    __WFE();
 8003b12:	bf20      	wfe
  }
}
 8003b14:	4770      	bx	lr
    __WFI();
 8003b16:	bf30      	wfi
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f000 819f 	beq.w	8003e64 <HAL_RCC_OscConfig+0x344>
{
 8003b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2a:	6803      	ldr	r3, [r0, #0]
 8003b2c:	07dd      	lsls	r5, r3, #31
{
 8003b2e:	b082      	sub	sp, #8
 8003b30:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	d52f      	bpl.n	8003b94 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b34:	49ac      	ldr	r1, [pc, #688]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003b36:	688a      	ldr	r2, [r1, #8]
 8003b38:	f002 020c 	and.w	r2, r2, #12
 8003b3c:	2a04      	cmp	r2, #4
 8003b3e:	f000 80ec 	beq.w	8003d1a <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b42:	688a      	ldr	r2, [r1, #8]
 8003b44:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b48:	2a08      	cmp	r2, #8
 8003b4a:	f000 80e2 	beq.w	8003d12 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4e:	6863      	ldr	r3, [r4, #4]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	f000 80eb 	beq.w	8003d2e <HAL_RCC_OscConfig+0x20e>
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b5c:	f000 8172 	beq.w	8003e44 <HAL_RCC_OscConfig+0x324>
 8003b60:	4da1      	ldr	r5, [pc, #644]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003b62:	682a      	ldr	r2, [r5, #0]
 8003b64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b68:	602a      	str	r2, [r5, #0]
 8003b6a:	682a      	ldr	r2, [r5, #0]
 8003b6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b70:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 80e0 	bne.w	8003d38 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7ff fba8 	bl	80032cc <HAL_GetTick>
 8003b7c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	e005      	b.n	8003b8c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b80:	f7ff fba4 	bl	80032cc <HAL_GetTick>
 8003b84:	1b80      	subs	r0, r0, r6
 8003b86:	2864      	cmp	r0, #100	; 0x64
 8003b88:	f200 8100 	bhi.w	8003d8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	039b      	lsls	r3, r3, #14
 8003b90:	d4f6      	bmi.n	8003b80 <HAL_RCC_OscConfig+0x60>
 8003b92:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b94:	079f      	lsls	r7, r3, #30
 8003b96:	d528      	bpl.n	8003bea <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b98:	4a93      	ldr	r2, [pc, #588]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003b9a:	6891      	ldr	r1, [r2, #8]
 8003b9c:	f011 0f0c 	tst.w	r1, #12
 8003ba0:	f000 8090 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba4:	6891      	ldr	r1, [r2, #8]
 8003ba6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003baa:	2908      	cmp	r1, #8
 8003bac:	f000 8086 	beq.w	8003cbc <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bb0:	68e3      	ldr	r3, [r4, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8106 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb8:	4b8c      	ldr	r3, [pc, #560]	; (8003dec <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4e8b      	ldr	r6, [pc, #556]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003bc0:	f7ff fb84 	bl	80032cc <HAL_GetTick>
 8003bc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	e005      	b.n	8003bd4 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7ff fb80 	bl	80032cc <HAL_GetTick>
 8003bcc:	1b40      	subs	r0, r0, r5
 8003bce:	2802      	cmp	r0, #2
 8003bd0:	f200 80dc 	bhi.w	8003d8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	6833      	ldr	r3, [r6, #0]
 8003bd6:	0798      	lsls	r0, r3, #30
 8003bd8:	d5f6      	bpl.n	8003bc8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	6833      	ldr	r3, [r6, #0]
 8003bdc:	6922      	ldr	r2, [r4, #16]
 8003bde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003be2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003be6:	6033      	str	r3, [r6, #0]
 8003be8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bea:	071a      	lsls	r2, r3, #28
 8003bec:	d452      	bmi.n	8003c94 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bee:	0758      	lsls	r0, r3, #29
 8003bf0:	d52f      	bpl.n	8003c52 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4a7d      	ldr	r2, [pc, #500]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003bf4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003bf6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	d07e      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8003bfc:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4e7c      	ldr	r6, [pc, #496]	; (8003df0 <HAL_RCC_OscConfig+0x2d0>)
 8003c00:	6833      	ldr	r3, [r6, #0]
 8003c02:	05d9      	lsls	r1, r3, #23
 8003c04:	f140 80b2 	bpl.w	8003d6c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c08:	68a3      	ldr	r3, [r4, #8]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	f000 80c2 	beq.w	8003d94 <HAL_RCC_OscConfig+0x274>
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	f000 8129 	beq.w	8003e68 <HAL_RCC_OscConfig+0x348>
 8003c16:	4e74      	ldr	r6, [pc, #464]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003c18:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	6732      	str	r2, [r6, #112]	; 0x70
 8003c20:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003c22:	f022 0204 	bic.w	r2, r2, #4
 8003c26:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 80b8 	bne.w	8003d9e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7ff fb4d 	bl	80032cc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003c36:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c38:	e005      	b.n	8003c46 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7ff fb47 	bl	80032cc <HAL_GetTick>
 8003c3e:	1bc0      	subs	r0, r0, r7
 8003c40:	4540      	cmp	r0, r8
 8003c42:	f200 80a3 	bhi.w	8003d8c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c46:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003c48:	0798      	lsls	r0, r3, #30
 8003c4a:	d4f6      	bmi.n	8003c3a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	f040 8103 	bne.w	8003e58 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c52:	69a0      	ldr	r0, [r4, #24]
 8003c54:	b1d0      	cbz	r0, 8003c8c <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c56:	4d64      	ldr	r5, [pc, #400]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003c58:	68ab      	ldr	r3, [r5, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	f000 80cc 	beq.w	8003dfc <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b63      	ldr	r3, [pc, #396]	; (8003df4 <HAL_RCC_OscConfig+0x2d4>)
 8003c66:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c68:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6c:	f000 8106 	beq.w	8003e7c <HAL_RCC_OscConfig+0x35c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7ff fb2c 	bl	80032cc <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c74:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003c76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c78:	e005      	b.n	8003c86 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7ff fb27 	bl	80032cc <HAL_GetTick>
 8003c7e:	1b40      	subs	r0, r0, r5
 8003c80:	2802      	cmp	r0, #2
 8003c82:	f200 8083 	bhi.w	8003d8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	019b      	lsls	r3, r3, #6
 8003c8a:	d4f6      	bmi.n	8003c7a <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2000      	movs	r0, #0
}
 8003c8e:	b002      	add	sp, #8
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c94:	6963      	ldr	r3, [r4, #20]
 8003c96:	b303      	cbz	r3, 8003cda <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8003c98:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	4e53      	ldr	r6, [pc, #332]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003ca0:	f7ff fb14 	bl	80032cc <HAL_GetTick>
 8003ca4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7ff fb10 	bl	80032cc <HAL_GetTick>
 8003cac:	1b40      	subs	r0, r0, r5
 8003cae:	2802      	cmp	r0, #2
 8003cb0:	d86c      	bhi.n	8003d8c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003cb4:	079b      	lsls	r3, r3, #30
 8003cb6:	d5f7      	bpl.n	8003ca8 <HAL_RCC_OscConfig+0x188>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	e798      	b.n	8003bee <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbc:	6852      	ldr	r2, [r2, #4]
 8003cbe:	0256      	lsls	r6, r2, #9
 8003cc0:	f53f af76 	bmi.w	8003bb0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc4:	4a48      	ldr	r2, [pc, #288]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	0795      	lsls	r5, r2, #30
 8003cca:	d543      	bpl.n	8003d54 <HAL_RCC_OscConfig+0x234>
 8003ccc:	68e2      	ldr	r2, [r4, #12]
 8003cce:	2a01      	cmp	r2, #1
 8003cd0:	d040      	beq.n	8003d54 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8003cd2:	2001      	movs	r0, #1
}
 8003cd4:	b002      	add	sp, #8
 8003cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003cda:	4a47      	ldr	r2, [pc, #284]	; (8003df8 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	4e42      	ldr	r6, [pc, #264]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8003cde:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003ce0:	f7ff faf4 	bl	80032cc <HAL_GetTick>
 8003ce4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce6:	e004      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce8:	f7ff faf0 	bl	80032cc <HAL_GetTick>
 8003cec:	1b40      	subs	r0, r0, r5
 8003cee:	2802      	cmp	r0, #2
 8003cf0:	d84c      	bhi.n	8003d8c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003cf4:	079f      	lsls	r7, r3, #30
 8003cf6:	d4f7      	bmi.n	8003ce8 <HAL_RCC_OscConfig+0x1c8>
 8003cf8:	e7de      	b.n	8003cb8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6413      	str	r3, [r2, #64]	; 0x40
 8003d04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003d0e:	2501      	movs	r5, #1
 8003d10:	e775      	b.n	8003bfe <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	684a      	ldr	r2, [r1, #4]
 8003d14:	0250      	lsls	r0, r2, #9
 8003d16:	f57f af1a 	bpl.w	8003b4e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1a:	4a33      	ldr	r2, [pc, #204]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	0391      	lsls	r1, r2, #14
 8003d20:	f57f af38 	bpl.w	8003b94 <HAL_RCC_OscConfig+0x74>
 8003d24:	6862      	ldr	r2, [r4, #4]
 8003d26:	2a00      	cmp	r2, #0
 8003d28:	f47f af34 	bne.w	8003b94 <HAL_RCC_OscConfig+0x74>
 8003d2c:	e7d1      	b.n	8003cd2 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2e:	4a2e      	ldr	r2, [pc, #184]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003d30:	6813      	ldr	r3, [r2, #0]
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003d38:	f7ff fac8 	bl	80032cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3c:	4e2a      	ldr	r6, [pc, #168]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8003d3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d40:	e004      	b.n	8003d4c <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d42:	f7ff fac3 	bl	80032cc <HAL_GetTick>
 8003d46:	1b40      	subs	r0, r0, r5
 8003d48:	2864      	cmp	r0, #100	; 0x64
 8003d4a:	d81f      	bhi.n	8003d8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4c:	6833      	ldr	r3, [r6, #0]
 8003d4e:	039a      	lsls	r2, r3, #14
 8003d50:	d5f7      	bpl.n	8003d42 <HAL_RCC_OscConfig+0x222>
 8003d52:	e71e      	b.n	8003b92 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	4924      	ldr	r1, [pc, #144]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003d56:	6920      	ldr	r0, [r4, #16]
 8003d58:	680a      	ldr	r2, [r1, #0]
 8003d5a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003d5e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003d62:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d64:	071a      	lsls	r2, r3, #28
 8003d66:	f57f af42 	bpl.w	8003bee <HAL_RCC_OscConfig+0xce>
 8003d6a:	e793      	b.n	8003c94 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6c:	6833      	ldr	r3, [r6, #0]
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d72:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003d74:	f7ff faaa 	bl	80032cc <HAL_GetTick>
 8003d78:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	6833      	ldr	r3, [r6, #0]
 8003d7c:	05da      	lsls	r2, r3, #23
 8003d7e:	f53f af43 	bmi.w	8003c08 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7ff faa3 	bl	80032cc <HAL_GetTick>
 8003d86:	1bc0      	subs	r0, r0, r7
 8003d88:	2802      	cmp	r0, #2
 8003d8a:	d9f6      	bls.n	8003d7a <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003d8c:	2003      	movs	r0, #3
}
 8003d8e:	b002      	add	sp, #8
 8003d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
 8003d96:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003d9e:	f7ff fa95 	bl	80032cc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da2:	4f11      	ldr	r7, [pc, #68]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8003da4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003daa:	e004      	b.n	8003db6 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dac:	f7ff fa8e 	bl	80032cc <HAL_GetTick>
 8003db0:	1b80      	subs	r0, r0, r6
 8003db2:	4540      	cmp	r0, r8
 8003db4:	d8ea      	bhi.n	8003d8c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db8:	079b      	lsls	r3, r3, #30
 8003dba:	d5f7      	bpl.n	8003dac <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	f43f af48 	beq.w	8003c52 <HAL_RCC_OscConfig+0x132>
 8003dc2:	e049      	b.n	8003e58 <HAL_RCC_OscConfig+0x338>
        __HAL_RCC_HSI_DISABLE();
 8003dc4:	4a09      	ldr	r2, [pc, #36]	; (8003dec <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4e08      	ldr	r6, [pc, #32]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8003dc8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003dca:	f7ff fa7f 	bl	80032cc <HAL_GetTick>
 8003dce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd0:	e004      	b.n	8003ddc <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7ff fa7b 	bl	80032cc <HAL_GetTick>
 8003dd6:	1b40      	subs	r0, r0, r5
 8003dd8:	2802      	cmp	r0, #2
 8003dda:	d8d7      	bhi.n	8003d8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ddc:	6833      	ldr	r3, [r6, #0]
 8003dde:	0799      	lsls	r1, r3, #30
 8003de0:	d4f7      	bmi.n	8003dd2 <HAL_RCC_OscConfig+0x2b2>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	e701      	b.n	8003bea <HAL_RCC_OscConfig+0xca>
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	42470000 	.word	0x42470000
 8003df0:	40007000 	.word	0x40007000
 8003df4:	42470060 	.word	0x42470060
 8003df8:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dfc:	2801      	cmp	r0, #1
 8003dfe:	f43f af46 	beq.w	8003c8e <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8003e02:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e04:	69e2      	ldr	r2, [r4, #28]
 8003e06:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	f47f af61 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x1b2>
 8003e10:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e12:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	4291      	cmp	r1, r2
 8003e18:	f47f af5b 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e1e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003e22:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e24:	428a      	cmp	r2, r1
 8003e26:	f47f af54 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e2c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e30:	4291      	cmp	r1, r2
 8003e32:	f47f af4e 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e38:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
        return HAL_ERROR;
 8003e3c:	1a18      	subs	r0, r3, r0
 8003e3e:	bf18      	it	ne
 8003e40:	2001      	movne	r0, #1
 8003e42:	e724      	b.n	8003c8e <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e44:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCC_OscConfig+0x3b8>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e54:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e56:	e76f      	b.n	8003d38 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e58:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <HAL_RCC_OscConfig+0x3b8>)
 8003e5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6413      	str	r3, [r2, #64]	; 0x40
 8003e62:	e6f6      	b.n	8003c52 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8003e64:	2001      	movs	r0, #1
}
 8003e66:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <HAL_RCC_OscConfig+0x3b8>)
 8003e6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e6c:	f042 0204 	orr.w	r2, r2, #4
 8003e70:	671a      	str	r2, [r3, #112]	; 0x70
 8003e72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e7a:	e790      	b.n	8003d9e <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8003e7c:	f7ff fa26 	bl	80032cc <HAL_GetTick>
 8003e80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	e005      	b.n	8003e90 <HAL_RCC_OscConfig+0x370>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e84:	f7ff fa22 	bl	80032cc <HAL_GetTick>
 8003e88:	1b80      	subs	r0, r0, r6
 8003e8a:	2802      	cmp	r0, #2
 8003e8c:	f63f af7e 	bhi.w	8003d8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	0199      	lsls	r1, r3, #6
 8003e94:	d4f6      	bmi.n	8003e84 <HAL_RCC_OscConfig+0x364>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e96:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8003e9a:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8003e9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003ea0:	4333      	orrs	r3, r6
 8003ea2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003ea6:	0852      	lsrs	r2, r2, #1
 8003ea8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003eac:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003eae:	490b      	ldr	r1, [pc, #44]	; (8003edc <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb0:	4e09      	ldr	r6, [pc, #36]	; (8003ed8 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003eb6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eb8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003eba:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003ebc:	f7ff fa06 	bl	80032cc <HAL_GetTick>
 8003ec0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	e005      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7ff fa02 	bl	80032cc <HAL_GetTick>
 8003ec8:	1b00      	subs	r0, r0, r4
 8003eca:	2802      	cmp	r0, #2
 8003ecc:	f63f af5e 	bhi.w	8003d8c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed0:	6833      	ldr	r3, [r6, #0]
 8003ed2:	019a      	lsls	r2, r3, #6
 8003ed4:	d5f6      	bpl.n	8003ec4 <HAL_RCC_OscConfig+0x3a4>
 8003ed6:	e6d9      	b.n	8003c8c <HAL_RCC_OscConfig+0x16c>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	42470060 	.word	0x42470060

08003ee0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee0:	4917      	ldr	r1, [pc, #92]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8003ee2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee4:	688b      	ldr	r3, [r1, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d01b      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x46>
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d117      	bne.n	8003f22 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef4:	684b      	ldr	r3, [r1, #4]
 8003ef6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003efa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efe:	d114      	bne.n	8003f2a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f00:	6849      	ldr	r1, [r1, #4]
 8003f02:	4810      	ldr	r0, [pc, #64]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x64>)
 8003f04:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003f08:	fba1 0100 	umull	r0, r1, r1, r0
 8003f0c:	f7fc f95c 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x60>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003f18:	3301      	adds	r3, #1
 8003f1a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003f1c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003f20:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003f22:	4808      	ldr	r0, [pc, #32]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003f24:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f26:	4808      	ldr	r0, [pc, #32]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003f28:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2a:	684b      	ldr	r3, [r1, #4]
 8003f2c:	4806      	ldr	r0, [pc, #24]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x68>)
 8003f2e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003f32:	fba3 0100 	umull	r0, r1, r3, r0
 8003f36:	2300      	movs	r3, #0
 8003f38:	f7fc f946 	bl	80001c8 <__aeabi_uldivmod>
 8003f3c:	e7e8      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x30>
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	007a1200 	.word	0x007a1200

08003f4c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	f000 8087 	beq.w	8004060 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f52:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_RCC_ClockConfig+0x128>)
 8003f54:	6813      	ldr	r3, [r2, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	428b      	cmp	r3, r1
{
 8003f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f60:	460d      	mov	r5, r1
 8003f62:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f64:	d209      	bcs.n	8003f7a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	b2cb      	uxtb	r3, r1
 8003f68:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	428b      	cmp	r3, r1
 8003f72:	d002      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003f74:	2001      	movs	r0, #1
}
 8003f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	0798      	lsls	r0, r3, #30
 8003f7e:	d514      	bpl.n	8003faa <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	0759      	lsls	r1, r3, #29
 8003f82:	d504      	bpl.n	8003f8e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f84:	493c      	ldr	r1, [pc, #240]	; (8004078 <HAL_RCC_ClockConfig+0x12c>)
 8003f86:	688a      	ldr	r2, [r1, #8]
 8003f88:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003f8c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8e:	071a      	lsls	r2, r3, #28
 8003f90:	d504      	bpl.n	8003f9c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f92:	4939      	ldr	r1, [pc, #228]	; (8004078 <HAL_RCC_ClockConfig+0x12c>)
 8003f94:	688a      	ldr	r2, [r1, #8]
 8003f96:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003f9a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4936      	ldr	r1, [pc, #216]	; (8004078 <HAL_RCC_ClockConfig+0x12c>)
 8003f9e:	68a0      	ldr	r0, [r4, #8]
 8003fa0:	688a      	ldr	r2, [r1, #8]
 8003fa2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003fa6:	4302      	orrs	r2, r0
 8003fa8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003faa:	07df      	lsls	r7, r3, #31
 8003fac:	d521      	bpl.n	8003ff2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fae:	6862      	ldr	r2, [r4, #4]
 8003fb0:	2a01      	cmp	r2, #1
 8003fb2:	d057      	beq.n	8004064 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb4:	1e93      	subs	r3, r2, #2
 8003fb6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_RCC_ClockConfig+0x12c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fbc:	d94d      	bls.n	800405a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbe:	0799      	lsls	r1, r3, #30
 8003fc0:	d5d8      	bpl.n	8003f74 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc2:	4e2d      	ldr	r6, [pc, #180]	; (8004078 <HAL_RCC_ClockConfig+0x12c>)
 8003fc4:	68b3      	ldr	r3, [r6, #8]
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003fce:	f7ff f97d 	bl	80032cc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003fd6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd8:	e004      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fda:	f7ff f977 	bl	80032cc <HAL_GetTick>
 8003fde:	1bc0      	subs	r0, r0, r7
 8003fe0:	4540      	cmp	r0, r8
 8003fe2:	d844      	bhi.n	800406e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe4:	68b3      	ldr	r3, [r6, #8]
 8003fe6:	6862      	ldr	r2, [r4, #4]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ff0:	d1f3      	bne.n	8003fda <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff2:	4a20      	ldr	r2, [pc, #128]	; (8004074 <HAL_RCC_ClockConfig+0x128>)
 8003ff4:	6813      	ldr	r3, [r2, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	42ab      	cmp	r3, r5
 8003ffc:	d906      	bls.n	800400c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	b2eb      	uxtb	r3, r5
 8004000:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	6813      	ldr	r3, [r2, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	42ab      	cmp	r3, r5
 800400a:	d1b3      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	075a      	lsls	r2, r3, #29
 8004010:	d506      	bpl.n	8004020 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004012:	4919      	ldr	r1, [pc, #100]	; (8004078 <HAL_RCC_ClockConfig+0x12c>)
 8004014:	68e0      	ldr	r0, [r4, #12]
 8004016:	688a      	ldr	r2, [r1, #8]
 8004018:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800401c:	4302      	orrs	r2, r0
 800401e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004020:	071b      	lsls	r3, r3, #28
 8004022:	d507      	bpl.n	8004034 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <HAL_RCC_ClockConfig+0x12c>)
 8004026:	6921      	ldr	r1, [r4, #16]
 8004028:	6893      	ldr	r3, [r2, #8]
 800402a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800402e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004032:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004034:	f7ff ff54 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8004038:	4a0f      	ldr	r2, [pc, #60]	; (8004078 <HAL_RCC_ClockConfig+0x12c>)
 800403a:	4c10      	ldr	r4, [pc, #64]	; (800407c <HAL_RCC_ClockConfig+0x130>)
 800403c:	6892      	ldr	r2, [r2, #8]
 800403e:	4910      	ldr	r1, [pc, #64]	; (8004080 <HAL_RCC_ClockConfig+0x134>)
 8004040:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004044:	4603      	mov	r3, r0
 8004046:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004048:	480e      	ldr	r0, [pc, #56]	; (8004084 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800404c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004050:	f7ff f8f2 	bl	8003238 <HAL_InitTick>
  return HAL_OK;
 8004054:	2000      	movs	r0, #0
}
 8004056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	0198      	lsls	r0, r3, #6
 800405c:	d4b1      	bmi.n	8003fc2 <HAL_RCC_ClockConfig+0x76>
 800405e:	e789      	b.n	8003f74 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004060:	2001      	movs	r0, #1
}
 8004062:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004064:	4b04      	ldr	r3, [pc, #16]	; (8004078 <HAL_RCC_ClockConfig+0x12c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	039e      	lsls	r6, r3, #14
 800406a:	d4aa      	bmi.n	8003fc2 <HAL_RCC_ClockConfig+0x76>
 800406c:	e782      	b.n	8003f74 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800406e:	2003      	movs	r0, #3
 8004070:	e781      	b.n	8003f76 <HAL_RCC_ClockConfig+0x2a>
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	08006ad4 	.word	0x08006ad4
 8004080:	2000058c 	.word	0x2000058c
 8004084:	20000594 	.word	0x20000594

08004088 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004088:	4b01      	ldr	r3, [pc, #4]	; (8004090 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	2000058c 	.word	0x2000058c

08004094 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004096:	4a05      	ldr	r2, [pc, #20]	; (80040ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8004098:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800409a:	4905      	ldr	r1, [pc, #20]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800409c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80040a0:	6808      	ldr	r0, [r1, #0]
 80040a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80040a4:	40d8      	lsrs	r0, r3
 80040a6:	4770      	bx	lr
 80040a8:	40023800 	.word	0x40023800
 80040ac:	08006ae4 	.word	0x08006ae4
 80040b0:	2000058c 	.word	0x2000058c

080040b4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80040b6:	4a05      	ldr	r2, [pc, #20]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80040b8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80040ba:	4905      	ldr	r1, [pc, #20]	; (80040d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040bc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80040c0:	6808      	ldr	r0, [r1, #0]
 80040c2:	5cd3      	ldrb	r3, [r2, r3]
}
 80040c4:	40d8      	lsrs	r0, r3
 80040c6:	4770      	bx	lr
 80040c8:	40023800 	.word	0x40023800
 80040cc:	08006ae4 	.word	0x08006ae4
 80040d0:	2000058c 	.word	0x2000058c

080040d4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d074      	beq.n	80041c2 <HAL_TIM_Base_Init+0xee>
{
 80040d8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040de:	4604      	mov	r4, r0
 80040e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d067      	beq.n	80041b8 <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e8:	6821      	ldr	r1, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ea:	4a37      	ldr	r2, [pc, #220]	; (80041c8 <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	2302      	movs	r3, #2
 80040ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f2:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80040f4:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f6:	d04b      	beq.n	8004190 <HAL_TIM_Base_Init+0xbc>
 80040f8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80040fc:	d031      	beq.n	8004162 <HAL_TIM_Base_Init+0x8e>
 80040fe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004102:	4291      	cmp	r1, r2
 8004104:	d02d      	beq.n	8004162 <HAL_TIM_Base_Init+0x8e>
 8004106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800410a:	4291      	cmp	r1, r2
 800410c:	d029      	beq.n	8004162 <HAL_TIM_Base_Init+0x8e>
 800410e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004112:	4291      	cmp	r1, r2
 8004114:	d025      	beq.n	8004162 <HAL_TIM_Base_Init+0x8e>
 8004116:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800411a:	4291      	cmp	r1, r2
 800411c:	d038      	beq.n	8004190 <HAL_TIM_Base_Init+0xbc>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004122:	4291      	cmp	r1, r2
 8004124:	d021      	beq.n	800416a <HAL_TIM_Base_Init+0x96>
 8004126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800412a:	4291      	cmp	r1, r2
 800412c:	d01d      	beq.n	800416a <HAL_TIM_Base_Init+0x96>
 800412e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004132:	4291      	cmp	r1, r2
 8004134:	d019      	beq.n	800416a <HAL_TIM_Base_Init+0x96>
 8004136:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800413a:	4291      	cmp	r1, r2
 800413c:	d015      	beq.n	800416a <HAL_TIM_Base_Init+0x96>
 800413e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004142:	4291      	cmp	r1, r2
 8004144:	d011      	beq.n	800416a <HAL_TIM_Base_Init+0x96>
 8004146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800414a:	4291      	cmp	r1, r2
 800414c:	d00d      	beq.n	800416a <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800414e:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004150:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004152:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004158:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800415a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800415c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800415e:	628a      	str	r2, [r1, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004160:	e010      	b.n	8004184 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8004162:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004168:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416a:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800416c:	69a2      	ldr	r2, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800416e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004174:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800417c:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800417e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004180:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004182:	628a      	str	r2, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004184:	2301      	movs	r3, #1
 8004186:	614b      	str	r3, [r1, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004188:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800418c:	2000      	movs	r0, #0
}
 800418e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004190:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004192:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004194:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800419a:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80041a8:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041aa:	68e3      	ldr	r3, [r4, #12]
 80041ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041ae:	6863      	ldr	r3, [r4, #4]
 80041b0:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80041b2:	6963      	ldr	r3, [r4, #20]
 80041b4:	630b      	str	r3, [r1, #48]	; 0x30
 80041b6:	e7e5      	b.n	8004184 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 80041b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80041bc:	f7fe f8b2 	bl	8002324 <HAL_TIM_Base_MspInit>
 80041c0:	e792      	b.n	80040e8 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80041c2:	2001      	movs	r0, #1
}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000

080041cc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041cc:	6803      	ldr	r3, [r0, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041dc:	2a06      	cmp	r2, #6
 80041de:	d003      	beq.n	80041e8 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	2000      	movs	r0, #0
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80041ec:	6803      	ldr	r3, [r0, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	f241 1111 	movw	r1, #4369	; 0x1111
 80041fc:	420a      	tst	r2, r1
 80041fe:	d108      	bne.n	8004212 <HAL_TIM_Base_Stop_IT+0x26>
 8004200:	6a19      	ldr	r1, [r3, #32]
 8004202:	f240 4244 	movw	r2, #1092	; 0x444
 8004206:	4211      	tst	r1, r2
 8004208:	d103      	bne.n	8004212 <HAL_TIM_Base_Stop_IT+0x26>
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
}
 8004212:	2000      	movs	r0, #0
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop

08004218 <HAL_TIM_PWM_MspInit>:
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop

0800421c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800421c:	2800      	cmp	r0, #0
 800421e:	d074      	beq.n	800430a <HAL_TIM_PWM_Init+0xee>
{
 8004220:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004222:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004226:	4604      	mov	r4, r0
 8004228:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800422c:	2b00      	cmp	r3, #0
 800422e:	d067      	beq.n	8004300 <HAL_TIM_PWM_Init+0xe4>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004230:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <HAL_TIM_PWM_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	2302      	movs	r3, #2
 8004236:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800423a:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 800423c:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800423e:	d04b      	beq.n	80042d8 <HAL_TIM_PWM_Init+0xbc>
 8004240:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004244:	d031      	beq.n	80042aa <HAL_TIM_PWM_Init+0x8e>
 8004246:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800424a:	4291      	cmp	r1, r2
 800424c:	d02d      	beq.n	80042aa <HAL_TIM_PWM_Init+0x8e>
 800424e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004252:	4291      	cmp	r1, r2
 8004254:	d029      	beq.n	80042aa <HAL_TIM_PWM_Init+0x8e>
 8004256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800425a:	4291      	cmp	r1, r2
 800425c:	d025      	beq.n	80042aa <HAL_TIM_PWM_Init+0x8e>
 800425e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004262:	4291      	cmp	r1, r2
 8004264:	d038      	beq.n	80042d8 <HAL_TIM_PWM_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004266:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800426a:	4291      	cmp	r1, r2
 800426c:	d021      	beq.n	80042b2 <HAL_TIM_PWM_Init+0x96>
 800426e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004272:	4291      	cmp	r1, r2
 8004274:	d01d      	beq.n	80042b2 <HAL_TIM_PWM_Init+0x96>
 8004276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800427a:	4291      	cmp	r1, r2
 800427c:	d019      	beq.n	80042b2 <HAL_TIM_PWM_Init+0x96>
 800427e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004282:	4291      	cmp	r1, r2
 8004284:	d015      	beq.n	80042b2 <HAL_TIM_PWM_Init+0x96>
 8004286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800428a:	4291      	cmp	r1, r2
 800428c:	d011      	beq.n	80042b2 <HAL_TIM_PWM_Init+0x96>
 800428e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004292:	4291      	cmp	r1, r2
 8004294:	d00d      	beq.n	80042b2 <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004296:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004298:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800429a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800429c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80042a2:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a4:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80042a6:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a8:	e010      	b.n	80042cc <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 80042aa:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80042b0:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b2:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	69a2      	ldr	r2, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b6:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042bc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c2:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80042c4:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80042c6:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c8:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80042ca:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80042cc:	2301      	movs	r3, #1
 80042ce:	614b      	str	r3, [r1, #20]
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80042d4:	2000      	movs	r0, #0
}
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80042d8:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042da:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80042e2:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ee:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80042f0:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80042f6:	6863      	ldr	r3, [r4, #4]
 80042f8:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80042fa:	6963      	ldr	r3, [r4, #20]
 80042fc:	630b      	str	r3, [r1, #48]	; 0x30
 80042fe:	e7e5      	b.n	80042cc <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004300:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004304:	f7ff ff88 	bl	8004218 <HAL_TIM_PWM_MspInit>
 8004308:	e792      	b.n	8004230 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 800430a:	2001      	movs	r0, #1
}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000

08004314 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004314:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	f000 80ce 	beq.w	80044ba <HAL_TIM_PWM_ConfigChannel+0x1a6>
{
 800431e:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004322:	2401      	movs	r4, #1
 8004324:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800432c:	2a0c      	cmp	r2, #12
 800432e:	d835      	bhi.n	800439c <HAL_TIM_PWM_ConfigChannel+0x88>
 8004330:	e8df f002 	tbb	[pc, r2]
 8004334:	34343407 	.word	0x34343407
 8004338:	3434346c 	.word	0x3434346c
 800433c:	34343498 	.word	0x34343498
 8004340:	3d          	.byte	0x3d
 8004341:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004342:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004344:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004348:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800434a:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800434c:	4e75      	ldr	r6, [pc, #468]	; (8004524 <HAL_TIM_PWM_ConfigChannel+0x210>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	f025 0501 	bic.w	r5, r5, #1
 8004352:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004354:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004356:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004358:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800435a:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800435e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004362:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8004364:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8004368:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800436c:	f000 80a7 	beq.w	80044be <HAL_TIM_PWM_ConfigChannel+0x1aa>
 8004370:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004374:	42b3      	cmp	r3, r6
 8004376:	f000 80a2 	beq.w	80044be <HAL_TIM_PWM_ConfigChannel+0x1aa>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800437a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800437c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800437e:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004380:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004382:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004384:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004386:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004388:	f044 0408 	orr.w	r4, r4, #8
 800438c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800438e:	6999      	ldr	r1, [r3, #24]
 8004390:	f021 0104 	bic.w	r1, r1, #4
 8004394:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	432a      	orrs	r2, r5
 800439a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800439c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800439e:	2201      	movs	r2, #1
 80043a0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80043a8:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80043aa:	4618      	mov	r0, r3
}
 80043ac:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ae:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b0:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043b4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b6:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	4e5a      	ldr	r6, [pc, #360]	; (8004524 <HAL_TIM_PWM_ConfigChannel+0x210>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ba:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80043be:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80043c0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80043c2:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80043c4:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80043c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043ca:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ce:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043d0:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d4:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d8:	f000 808e 	beq.w	80044f8 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 80043dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043e0:	42b3      	cmp	r3, r6
 80043e2:	f000 8089 	beq.w	80044f8 <HAL_TIM_PWM_ConfigChannel+0x1e4>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80043e8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80043ea:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80043ec:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043f0:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043f2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043f4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80043f8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043fa:	69d9      	ldr	r1, [r3, #28]
 80043fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004400:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004408:	61da      	str	r2, [r3, #28]
      break;
 800440a:	e7c7      	b.n	800439c <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800440c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800440e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004410:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004412:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004414:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8004524 <HAL_TIM_PWM_ConfigChannel+0x210>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004418:	f025 0510 	bic.w	r5, r5, #16
 800441c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800441e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004420:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004422:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004424:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004428:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800442c:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800442e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004432:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004436:	d04f      	beq.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8004438:	4f3b      	ldr	r7, [pc, #236]	; (8004528 <HAL_TIM_PWM_ConfigChannel+0x214>)
 800443a:	42bb      	cmp	r3, r7
 800443c:	d04c      	beq.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x1c4>
  TIMx->CCR2 = OC_Config->Pulse;
 800443e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004440:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004442:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004444:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004446:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004448:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800444a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800444c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004450:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004452:	6999      	ldr	r1, [r3, #24]
 8004454:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004458:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004460:	619a      	str	r2, [r3, #24]
      break;
 8004462:	e79b      	b.n	800439c <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004464:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004466:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004468:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800446a:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800446c:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8004524 <HAL_TIM_PWM_ConfigChannel+0x210>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004470:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8004474:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004476:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004478:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800447a:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800447c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004480:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004484:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004486:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800448a:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800448e:	d039      	beq.n	8004504 <HAL_TIM_PWM_ConfigChannel+0x1f0>
 8004490:	4f25      	ldr	r7, [pc, #148]	; (8004528 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8004492:	42bb      	cmp	r3, r7
 8004494:	d036      	beq.n	8004504 <HAL_TIM_PWM_ConfigChannel+0x1f0>
  TIMx->CCR3 = OC_Config->Pulse;
 8004496:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004498:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800449a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800449c:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800449e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044a0:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044a2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044a4:	f044 0408 	orr.w	r4, r4, #8
 80044a8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044aa:	69d9      	ldr	r1, [r3, #28]
 80044ac:	f021 0104 	bic.w	r1, r1, #4
 80044b0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	432a      	orrs	r2, r5
 80044b6:	61da      	str	r2, [r3, #28]
      break;
 80044b8:	e770      	b.n	800439c <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 80044ba:	2002      	movs	r0, #2
}
 80044bc:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80044be:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c0:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80044c4:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80044c6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ca:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80044ce:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d0:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d4:	4335      	orrs	r5, r6
 80044d6:	e750      	b.n	800437a <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044d8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80044da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044de:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044e2:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044e6:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044ea:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80044ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044f2:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80044f6:	e7a2      	b.n	800443e <HAL_TIM_PWM_ConfigChannel+0x12a>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044fa:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044fe:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004502:	e770      	b.n	80043e6 <HAL_TIM_PWM_ConfigChannel+0xd2>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004504:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800450a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800450e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004512:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004516:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800451a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800451e:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8004522:	e7b8      	b.n	8004496 <HAL_TIM_PWM_ConfigChannel+0x182>
 8004524:	40010000 	.word	0x40010000
 8004528:	40010400 	.word	0x40010400

0800452c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800452c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d074      	beq.n	800461e <HAL_TIM_ConfigClockSource+0xf2>
{
 8004534:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8004536:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8004538:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800453a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800453c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004544:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004546:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004548:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800454c:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004550:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004552:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004554:	d065      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0xf6>
 8004556:	d831      	bhi.n	80045bc <HAL_TIM_ConfigClockSource+0x90>
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	d048      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0xc2>
 800455c:	d921      	bls.n	80045a2 <HAL_TIM_ConfigClockSource+0x76>
 800455e:	2b50      	cmp	r3, #80	; 0x50
 8004560:	d116      	bne.n	8004590 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004562:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004564:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004566:	684c      	ldr	r4, [r1, #4]
 8004568:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456a:	f026 0601 	bic.w	r6, r6, #1
 800456e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004570:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004572:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800457a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800457e:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004580:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8004582:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004584:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800458a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458e:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8004590:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004592:	2201      	movs	r2, #1
 8004594:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004598:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800459c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800459e:	4618      	mov	r0, r3
}
 80045a0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d002      	beq.n	80045ac <HAL_TIM_ConfigClockSource+0x80>
 80045a6:	d91e      	bls.n	80045e6 <HAL_TIM_ConfigClockSource+0xba>
 80045a8:	2b30      	cmp	r3, #48	; 0x30
 80045aa:	d1f1      	bne.n	8004590 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80045ac:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ae:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045b2:	430b      	orrs	r3, r1
 80045b4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80045b8:	6093      	str	r3, [r2, #8]
}
 80045ba:	e7e9      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80045bc:	2b70      	cmp	r3, #112	; 0x70
 80045be:	d049      	beq.n	8004654 <HAL_TIM_ConfigClockSource+0x128>
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c4:	d1e4      	bne.n	8004590 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80045ca:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80045cc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ce:	432b      	orrs	r3, r5
 80045d0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045da:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045dc:	6893      	ldr	r3, [r2, #8]
 80045de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e2:	6093      	str	r3, [r2, #8]
      break;
 80045e4:	e7d4      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 80045e6:	f033 0110 	bics.w	r1, r3, #16
 80045ea:	d1d1      	bne.n	8004590 <HAL_TIM_ConfigClockSource+0x64>
 80045ec:	e7de      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 80045ee:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f0:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	684c      	ldr	r4, [r1, #4]
 80045f4:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f6:	f026 0601 	bic.w	r6, r6, #1
 80045fa:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fc:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fe:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004606:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800460a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800460c:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800460e:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004610:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004616:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800461a:	6093      	str	r3, [r2, #8]
}
 800461c:	e7b8      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 800461e:	2002      	movs	r0, #2
}
 8004620:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004622:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004624:	684d      	ldr	r5, [r1, #4]
 8004626:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004628:	f024 0410 	bic.w	r4, r4, #16
 800462c:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462e:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8004630:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004632:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004636:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800463a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800463e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004642:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004644:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004646:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800464c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004650:	6093      	str	r3, [r2, #8]
}
 8004652:	e79d      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004654:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8004658:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800465a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800465c:	432b      	orrs	r3, r5
 800465e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004662:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004666:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004668:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800466a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800466c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004670:	6093      	str	r3, [r2, #8]
      break;
 8004672:	e78d      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x64>

08004674 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004674:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004678:	2a01      	cmp	r2, #1
 800467a:	d049      	beq.n	8004710 <HAL_TIM_SlaveConfigSynchro+0x9c>
 800467c:	4603      	mov	r3, r0
{
 800467e:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8004682:	681c      	ldr	r4, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004688:	2001      	movs	r0, #1
 800468a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800468e:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 8004692:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004694:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004698:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 800469a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800469e:	4332      	orrs	r2, r6
  switch (sSlaveConfig->InputTrigger)
 80046a0:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80046a2:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80046a4:	d04d      	beq.n	8004742 <HAL_TIM_SlaveConfigSynchro+0xce>
 80046a6:	d825      	bhi.n	80046f4 <HAL_TIM_SlaveConfigSynchro+0x80>
 80046a8:	2d40      	cmp	r5, #64	; 0x40
 80046aa:	d033      	beq.n	8004714 <HAL_TIM_SlaveConfigSynchro+0xa0>
 80046ac:	2d50      	cmp	r5, #80	; 0x50
 80046ae:	d110      	bne.n	80046d2 <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpccer = TIMx->CCER;
 80046b0:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b2:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b4:	6888      	ldr	r0, [r1, #8]
 80046b6:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b8:	f026 0601 	bic.w	r6, r6, #1
 80046bc:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046be:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80046c8:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ca:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80046ce:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80046d0:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80046d2:	68e2      	ldr	r2, [r4, #12]
 80046d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d8:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80046da:	68e2      	ldr	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 80046de:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80046e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046e4:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80046e6:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80046ea:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 80046ee:	4608      	mov	r0, r1
}
 80046f0:	bcf0      	pop	{r4, r5, r6, r7}
 80046f2:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80046f4:	2d70      	cmp	r5, #112	; 0x70
 80046f6:	d1ec      	bne.n	80046d2 <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f8:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
 80046fc:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 80046fe:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004700:	432a      	orrs	r2, r5
 8004702:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004706:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800470a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800470c:	60a2      	str	r2, [r4, #8]
 800470e:	e7e0      	b.n	80046d2 <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 8004710:	2002      	movs	r0, #2
}
 8004712:	4770      	bx	lr
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004714:	2e05      	cmp	r6, #5
 8004716:	d00d      	beq.n	8004734 <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 8004718:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800471a:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800471c:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800471e:	f020 0001 	bic.w	r0, r0, #1
 8004722:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004724:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004726:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800472a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800472e:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004730:	6225      	str	r5, [r4, #32]
      break;
 8004732:	e7ce      	b.n	80046d2 <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 8004734:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8004736:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800473e:	bcf0      	pop	{r4, r5, r6, r7}
 8004740:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004742:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004744:	688d      	ldr	r5, [r1, #8]
 8004746:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004748:	f020 0010 	bic.w	r0, r0, #16
 800474c:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474e:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004750:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004752:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004756:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800475a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800475e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004762:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004764:	6222      	str	r2, [r4, #32]
 8004766:	e7b4      	b.n	80046d2 <HAL_TIM_SlaveConfigSynchro+0x5e>

08004768 <HAL_TIM_OC_DelayElapsedCallback>:
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop

0800476c <HAL_TIM_IC_CaptureCallback>:
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop

08004774 <HAL_TIM_TriggerCallback>:
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004778:	6803      	ldr	r3, [r0, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	0791      	lsls	r1, r2, #30
{
 800477e:	b510      	push	{r4, lr}
 8004780:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004782:	d502      	bpl.n	800478a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	0792      	lsls	r2, r2, #30
 8004788:	d45f      	bmi.n	800484a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	0750      	lsls	r0, r2, #29
 800478e:	d502      	bpl.n	8004796 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	0751      	lsls	r1, r2, #29
 8004794:	d446      	bmi.n	8004824 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	0712      	lsls	r2, r2, #28
 800479a:	d502      	bpl.n	80047a2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	0710      	lsls	r0, r2, #28
 80047a0:	d42e      	bmi.n	8004800 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	06d2      	lsls	r2, r2, #27
 80047a6:	d502      	bpl.n	80047ae <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	06d0      	lsls	r0, r2, #27
 80047ac:	d418      	bmi.n	80047e0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	07d1      	lsls	r1, r2, #31
 80047b2:	d502      	bpl.n	80047ba <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	07d2      	lsls	r2, r2, #31
 80047b8:	d45d      	bmi.n	8004876 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	0610      	lsls	r0, r2, #24
 80047be:	d502      	bpl.n	80047c6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	0611      	lsls	r1, r2, #24
 80047c4:	d45f      	bmi.n	8004886 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	0652      	lsls	r2, r2, #25
 80047ca:	d502      	bpl.n	80047d2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	0650      	lsls	r0, r2, #25
 80047d0:	d461      	bmi.n	8004896 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	0691      	lsls	r1, r2, #26
 80047d6:	d502      	bpl.n	80047de <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	0692      	lsls	r2, r2, #26
 80047dc:	d443      	bmi.n	8004866 <HAL_TIM_IRQHandler+0xee>
}
 80047de:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047e4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80047f0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f2:	d064      	beq.n	80048be <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80047f4:	f7ff ffba 	bl	800476c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f8:	2200      	movs	r2, #0
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	7722      	strb	r2, [r4, #28]
 80047fe:	e7d6      	b.n	80047ae <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004800:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004804:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004806:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004808:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800480e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004810:	d152      	bne.n	80048b8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004812:	f7ff ffa9 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004816:	4620      	mov	r0, r4
 8004818:	f7ff ffaa 	bl	8004770 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481c:	2200      	movs	r2, #0
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	7722      	strb	r2, [r4, #28]
 8004822:	e7be      	b.n	80047a2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004824:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004828:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800482a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800482c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004834:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004836:	d13c      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004838:	f7ff ff96 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	4620      	mov	r0, r4
 800483e:	f7ff ff97 	bl	8004770 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	2200      	movs	r2, #0
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	7722      	strb	r2, [r4, #28]
 8004848:	e7a5      	b.n	8004796 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800484a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800484e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004850:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004852:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	079b      	lsls	r3, r3, #30
 8004858:	d025      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800485a:	f7ff ff87 	bl	800476c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	2200      	movs	r2, #0
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	7722      	strb	r2, [r4, #28]
 8004864:	e791      	b.n	800478a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004866:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800486a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800486c:	611a      	str	r2, [r3, #16]
}
 800486e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004872:	f000 b9c3 	b.w	8004bfc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004876:	f06f 0201 	mvn.w	r2, #1
 800487a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800487c:	4620      	mov	r0, r4
 800487e:	f7fe f8c9 	bl	8002a14 <HAL_TIM_PeriodElapsedCallback>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	e799      	b.n	80047ba <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004886:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800488a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800488c:	4620      	mov	r0, r4
 800488e:	f000 f9b7 	bl	8004c00 <HAL_TIMEx_BreakCallback>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	e797      	b.n	80047c6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800489c:	4620      	mov	r0, r4
 800489e:	f7ff ff69 	bl	8004774 <HAL_TIM_TriggerCallback>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	e795      	b.n	80047d2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	f7ff ff5f 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048aa:	4620      	mov	r0, r4
 80048ac:	f7ff ff60 	bl	8004770 <HAL_TIM_PWM_PulseFinishedCallback>
 80048b0:	e7d5      	b.n	800485e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	f7ff ff5b 	bl	800476c <HAL_TIM_IC_CaptureCallback>
 80048b6:	e7c4      	b.n	8004842 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80048b8:	f7ff ff58 	bl	800476c <HAL_TIM_IC_CaptureCallback>
 80048bc:	e7ae      	b.n	800481c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	f7ff ff53 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7ff ff54 	bl	8004770 <HAL_TIM_PWM_PulseFinishedCallback>
 80048c8:	e796      	b.n	80047f8 <HAL_TIM_IRQHandler+0x80>
 80048ca:	bf00      	nop

080048cc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048cc:	4a2f      	ldr	r2, [pc, #188]	; (800498c <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 80048ce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d0:	4290      	cmp	r0, r2
{
 80048d2:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d4:	d043      	beq.n	800495e <TIM_Base_SetConfig+0x92>
 80048d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048da:	d034      	beq.n	8004946 <TIM_Base_SetConfig+0x7a>
 80048dc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80048e0:	4290      	cmp	r0, r2
 80048e2:	d030      	beq.n	8004946 <TIM_Base_SetConfig+0x7a>
 80048e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048e8:	4290      	cmp	r0, r2
 80048ea:	d02c      	beq.n	8004946 <TIM_Base_SetConfig+0x7a>
 80048ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048f0:	4290      	cmp	r0, r2
 80048f2:	d028      	beq.n	8004946 <TIM_Base_SetConfig+0x7a>
 80048f4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80048f8:	4290      	cmp	r0, r2
 80048fa:	d030      	beq.n	800495e <TIM_Base_SetConfig+0x92>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004900:	4290      	cmp	r0, r2
 8004902:	d024      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 8004904:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004908:	4290      	cmp	r0, r2
 800490a:	d020      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 800490c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004910:	4290      	cmp	r0, r2
 8004912:	d01c      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 8004914:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004918:	4290      	cmp	r0, r2
 800491a:	d018      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 800491c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004920:	4290      	cmp	r0, r2
 8004922:	d014      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 8004924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004928:	4290      	cmp	r0, r2
 800492a:	d010      	beq.n	800494e <TIM_Base_SetConfig+0x82>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800492c:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004930:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004936:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004938:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800493a:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800493c:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800493e:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004940:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8004942:	6143      	str	r3, [r0, #20]
}
 8004944:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004946:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800494c:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004952:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004954:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495a:	4333      	orrs	r3, r6
 800495c:	e7e9      	b.n	8004932 <TIM_Base_SetConfig+0x66>
    tmpcr1 |= Structure->CounterMode;
 800495e:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004960:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004962:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004968:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800496a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004974:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004976:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004978:	688b      	ldr	r3, [r1, #8]
 800497a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800497c:	680b      	ldr	r3, [r1, #0]
 800497e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004980:	690b      	ldr	r3, [r1, #16]
 8004982:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004984:	2301      	movs	r3, #1
}
 8004986:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8004988:	6143      	str	r3, [r0, #20]
}
 800498a:	4770      	bx	lr
 800498c:	40010000 	.word	0x40010000

08004990 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004990:	6a03      	ldr	r3, [r0, #32]
 8004992:	f023 0310 	bic.w	r3, r3, #16
 8004996:	6203      	str	r3, [r0, #32]
{
 8004998:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 800499a:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800499c:	4c13      	ldr	r4, [pc, #76]	; (80049ec <TIM_OC2_SetConfig+0x5c>)
  tmpcr2 =  TIMx->CR2;
 800499e:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80049a0:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049a2:	688e      	ldr	r6, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a4:	680d      	ldr	r5, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 80049a6:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049aa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049ae:	42a0      	cmp	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049b8:	d009      	beq.n	80049ce <TIM_OC2_SetConfig+0x3e>
 80049ba:	4d0d      	ldr	r5, [pc, #52]	; (80049f0 <TIM_OC2_SetConfig+0x60>)
 80049bc:	42a8      	cmp	r0, r5
 80049be:	d006      	beq.n	80049ce <TIM_OC2_SetConfig+0x3e>
  TIMx->CCR2 = OC_Config->Pulse;
 80049c0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80049c2:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80049c4:	6182      	str	r2, [r0, #24]
}
 80049c6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80049c8:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80049ca:	6203      	str	r3, [r0, #32]
}
 80049cc:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049ce:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049d8:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049dc:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e0:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e6:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 80049ea:	e7e9      	b.n	80049c0 <TIM_OC2_SetConfig+0x30>
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40010400 	.word	0x40010400

080049f4 <TIM_TI1_SetConfig>:
{
 80049f4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049f8:	4e1b      	ldr	r6, [pc, #108]	; (8004a68 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	f024 0401 	bic.w	r4, r4, #1
 80049fe:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a00:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8004a02:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004a04:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a06:	d01d      	beq.n	8004a44 <TIM_TI1_SetConfig+0x50>
 8004a08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004a0c:	d01a      	beq.n	8004a44 <TIM_TI1_SetConfig+0x50>
 8004a0e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8004a12:	42b0      	cmp	r0, r6
 8004a14:	d016      	beq.n	8004a44 <TIM_TI1_SetConfig+0x50>
 8004a16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a1a:	42b0      	cmp	r0, r6
 8004a1c:	d012      	beq.n	8004a44 <TIM_TI1_SetConfig+0x50>
 8004a1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a22:	42b0      	cmp	r0, r6
 8004a24:	d00e      	beq.n	8004a44 <TIM_TI1_SetConfig+0x50>
 8004a26:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8004a2a:	42b0      	cmp	r0, r6
 8004a2c:	d00a      	beq.n	8004a44 <TIM_TI1_SetConfig+0x50>
 8004a2e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8004a32:	42b0      	cmp	r0, r6
 8004a34:	d006      	beq.n	8004a44 <TIM_TI1_SetConfig+0x50>
 8004a36:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8004a3a:	42b0      	cmp	r0, r6
 8004a3c:	d002      	beq.n	8004a44 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a3e:	f044 0201 	orr.w	r2, r4, #1
 8004a42:	e002      	b.n	8004a4a <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a44:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004a48:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a4a:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a4c:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a50:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a56:	f001 010a 	and.w	r1, r1, #10
 8004a5a:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a5c:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8004a5e:	6183      	str	r3, [r0, #24]
}
 8004a60:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004a62:	6201      	str	r1, [r0, #32]
}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000

08004a6c <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop

08004a70 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d055      	beq.n	8004b20 <HAL_TIMEx_HallSensor_Init+0xb0>
{
 8004a74:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	460d      	mov	r5, r1
 8004a7e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d046      	beq.n	8004b16 <HAL_TIMEx_HallSensor_Init+0xa6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a88:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a90:	f851 0b04 	ldr.w	r0, [r1], #4
 8004a94:	f7ff ff1a 	bl	80048cc <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004a98:	68ab      	ldr	r3, [r5, #8]
 8004a9a:	6829      	ldr	r1, [r5, #0]
 8004a9c:	6820      	ldr	r0, [r4, #0]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	f7ff ffa8 	bl	80049f4 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004aa4:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004aa6:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004aa8:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004aaa:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004aac:	f022 020c 	bic.w	r2, r2, #12
 8004ab0:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004ab2:	6983      	ldr	r3, [r0, #24]
 8004ab4:	4333      	orrs	r3, r6
 8004ab6:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004ab8:	6843      	ldr	r3, [r0, #4]
 8004aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abe:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004ac0:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004ac2:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004aca:	6883      	ldr	r3, [r0, #8]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad0:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004ad2:	6883      	ldr	r3, [r0, #8]
 8004ad4:	f023 0307 	bic.w	r3, r3, #7
 8004ad8:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004ada:	6883      	ldr	r3, [r0, #8]
 8004adc:	f043 0304 	orr.w	r3, r3, #4
 8004ae0:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004ae2:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004ae4:	2370      	movs	r3, #112	; 0x70
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004ae6:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004ae8:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004aea:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aee:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004af2:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004af4:	f7ff ff4c 	bl	8004990 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b00:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004b02:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	2101      	movs	r1, #1
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004b06:	f042 0250 	orr.w	r2, r2, #80	; 0x50
  return HAL_OK;
 8004b0a:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004b0c:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 8004b0e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 8004b12:	b008      	add	sp, #32
 8004b14:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004b16:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004b1a:	f7ff ffa7 	bl	8004a6c <HAL_TIMEx_HallSensor_MspInit>
 8004b1e:	e7b3      	b.n	8004a88 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004b20:	2001      	movs	r0, #1
}
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d036      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b2c:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2e:	2202      	movs	r2, #2
{
 8004b30:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004b32:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004b36:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b38:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3a:	4d19      	ldr	r5, [pc, #100]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b40:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004b46:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	d019      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4e:	d016      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b50:	4a14      	ldr	r2, [pc, #80]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00f      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00b      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b66:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d007      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b6e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d003      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b76:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d104      	bne.n	8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b7e:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b80:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b84:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b86:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004b88:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004b90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004b94:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004b96:	4618      	mov	r0, r3
}
 8004b98:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b9a:	2002      	movs	r0, #2
}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40000400 	.word	0x40000400

08004ba8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ba8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d022      	beq.n	8004bf6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8004bb0:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bb2:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bbc:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bc0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bcc:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bd0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd6:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bdc:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bde:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004be0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be6:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8004be8:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004bea:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004bec:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 8004bf0:	4608      	mov	r0, r1
}
 8004bf2:	bc30      	pop	{r4, r5}
 8004bf4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004bf6:	2002      	movs	r0, #2
}
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop

08004bfc <HAL_TIMEx_CommutCallback>:
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <HAL_TIMEx_BreakCallback>:
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop

08004c04 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c04:	2800      	cmp	r0, #0
 8004c06:	f000 8098 	beq.w	8004d3a <HAL_UART_Init+0x136>
{
 8004c0a:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c0c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004c10:	4604      	mov	r4, r0
 8004c12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8087 	beq.w	8004d2a <HAL_UART_Init+0x126>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c1c:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c1e:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c20:	2224      	movs	r2, #36	; 0x24
 8004c22:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004c26:	68d8      	ldr	r0, [r3, #12]
 8004c28:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c2c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004c30:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c32:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c34:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c36:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004c3a:	4329      	orrs	r1, r5
 8004c3c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004c3e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c40:	6965      	ldr	r5, [r4, #20]
 8004c42:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8004c44:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c48:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004c4a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c4e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004c50:	430a      	orrs	r2, r1
 8004c52:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	69a1      	ldr	r1, [r4, #24]
 8004c58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c5c:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c62:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c64:	4a36      	ldr	r2, [pc, #216]	; (8004d40 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c66:	d037      	beq.n	8004cd8 <HAL_UART_Init+0xd4>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d032      	beq.n	8004cd2 <HAL_UART_Init+0xce>
 8004c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d02e      	beq.n	8004cd2 <HAL_UART_Init+0xce>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c74:	f7ff fa0e 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c78:	6863      	ldr	r3, [r4, #4]
 8004c7a:	4e32      	ldr	r6, [pc, #200]	; (8004d44 <HAL_UART_Init+0x140>)
 8004c7c:	2219      	movs	r2, #25
 8004c7e:	fba0 0102 	umull	r0, r1, r0, r2
 8004c82:	009a      	lsls	r2, r3, #2
 8004c84:	0f9b      	lsrs	r3, r3, #30
 8004c86:	f7fb fa9f 	bl	80001c8 <__aeabi_uldivmod>
 8004c8a:	fba6 2500 	umull	r2, r5, r6, r0
 8004c8e:	096d      	lsrs	r5, r5, #5
 8004c90:	2164      	movs	r1, #100	; 0x64
 8004c92:	fb01 0215 	mls	r2, r1, r5, r0
 8004c96:	0112      	lsls	r2, r2, #4
 8004c98:	3232      	adds	r2, #50	; 0x32
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	fba6 1202 	umull	r1, r2, r6, r2
 8004ca0:	012d      	lsls	r5, r5, #4
 8004ca2:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8004ca6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb0:	695a      	ldr	r2, [r3, #20]
 8004cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004cb8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cba:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004cbc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004cbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cc6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 8004cce:	4628      	mov	r0, r5
}
 8004cd0:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cd2:	f7ff f9ef 	bl	80040b4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd6:	e7cf      	b.n	8004c78 <HAL_UART_Init+0x74>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02b      	beq.n	8004d34 <HAL_UART_Init+0x130>
 8004cdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d027      	beq.n	8004d34 <HAL_UART_Init+0x130>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7ff f9d6 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ce8:	6862      	ldr	r2, [r4, #4]
 8004cea:	4e16      	ldr	r6, [pc, #88]	; (8004d44 <HAL_UART_Init+0x140>)
 8004cec:	1892      	adds	r2, r2, r2
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	f04f 0119 	mov.w	r1, #25
 8004cf6:	415b      	adcs	r3, r3
 8004cf8:	fba0 0101 	umull	r0, r1, r0, r1
 8004cfc:	f7fb fa64 	bl	80001c8 <__aeabi_uldivmod>
 8004d00:	fba6 2100 	umull	r2, r1, r6, r0
 8004d04:	094d      	lsrs	r5, r1, #5
 8004d06:	2164      	movs	r1, #100	; 0x64
 8004d08:	fb01 0215 	mls	r2, r1, r5, r0
 8004d0c:	00d2      	lsls	r2, r2, #3
 8004d0e:	3232      	adds	r2, #50	; 0x32
 8004d10:	fba6 1202 	umull	r1, r2, r6, r2
 8004d14:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004d18:	0912      	lsrs	r2, r2, #4
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004d20:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004d24:	440a      	add	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	e7be      	b.n	8004ca8 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004d2a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004d2e:	f7fd fbeb 	bl	8002508 <HAL_UART_MspInit>
 8004d32:	e773      	b.n	8004c1c <HAL_UART_Init+0x18>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d34:	f7ff f9be 	bl	80040b4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d38:	e7d6      	b.n	8004ce8 <HAL_UART_Init+0xe4>
    return HAL_ERROR;
 8004d3a:	2001      	movs	r0, #1
}
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40011000 	.word	0x40011000
 8004d44:	51eb851f 	.word	0x51eb851f

08004d48 <HAL_UART_Transmit>:
{
 8004d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004d4e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8004d52:	2820      	cmp	r0, #32
 8004d54:	d17c      	bne.n	8004e50 <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 8004d56:	460e      	mov	r6, r1
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d055      	beq.n	8004e08 <HAL_UART_Transmit+0xc0>
 8004d5c:	4615      	mov	r5, r2
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	d052      	beq.n	8004e08 <HAL_UART_Transmit+0xc0>
 8004d62:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8004d64:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d071      	beq.n	8004e50 <HAL_UART_Transmit+0x108>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6c:	2700      	movs	r7, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d6e:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8004d70:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d72:	63e7      	str	r7, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8004d74:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004d7c:	f7fe faa6 	bl	80032cc <HAL_GetTick>
    huart->TxXferCount = Size;
 8004d80:	84e5      	strh	r5, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d82:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8004d84:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8004d88:	b29b      	uxth	r3, r3
    huart->TxXferSize = Size;
 8004d8a:	84a5      	strh	r5, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8004d8c:	4607      	mov	r7, r0
    while (huart->TxXferCount > 0U)
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	b1a3      	cbz	r3, 8004dbc <HAL_UART_Transmit+0x74>
      huart->TxXferCount--;
 8004d92:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d94:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8004d96:	3a01      	subs	r2, #1
 8004d98:	b292      	uxth	r2, r2
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d9a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8004d9e:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004da0:	d024      	beq.n	8004dec <HAL_UART_Transmit+0xa4>
 8004da2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004da6:	d132      	bne.n	8004e0e <HAL_UART_Transmit+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	0618      	lsls	r0, r3, #24
 8004dac:	d5fc      	bpl.n	8004da8 <HAL_UART_Transmit+0x60>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004dae:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004db2:	606b      	str	r3, [r5, #4]
    while (huart->TxXferCount > 0U)
 8004db4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ea      	bne.n	8004d92 <HAL_UART_Transmit+0x4a>
 8004dbc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004dc0:	d149      	bne.n	8004e56 <HAL_UART_Transmit+0x10e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	065a      	lsls	r2, r3, #25
 8004dc6:	d5fc      	bpl.n	8004dc2 <HAL_UART_Transmit+0x7a>
    huart->gState = HAL_UART_STATE_READY;
 8004dc8:	2320      	movs	r3, #32
 8004dca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8004dce:	2000      	movs	r0, #0
}
 8004dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	d40e      	bmi.n	8004df8 <HAL_UART_Transmit+0xb0>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dda:	f1b8 0f00 	cmp.w	r8, #0
 8004dde:	d022      	beq.n	8004e26 <HAL_UART_Transmit+0xde>
 8004de0:	f7fe fa74 	bl	80032cc <HAL_GetTick>
 8004de4:	1bc0      	subs	r0, r0, r7
 8004de6:	4580      	cmp	r8, r0
 8004de8:	6825      	ldr	r5, [r4, #0]
 8004dea:	d31c      	bcc.n	8004e26 <HAL_UART_Transmit+0xde>
 8004dec:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_UART_Transmit+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df2:	682b      	ldr	r3, [r5, #0]
 8004df4:	061a      	lsls	r2, r3, #24
 8004df6:	d5fc      	bpl.n	8004df2 <HAL_UART_Transmit+0xaa>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004df8:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004dfa:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e00:	606b      	str	r3, [r5, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e02:	bb1a      	cbnz	r2, 8004e4c <HAL_UART_Transmit+0x104>
          pData += 2U;
 8004e04:	3602      	adds	r6, #2
 8004e06:	e7d5      	b.n	8004db4 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8004e08:	2001      	movs	r0, #1
}
 8004e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	0619      	lsls	r1, r3, #24
 8004e12:	d4cc      	bmi.n	8004dae <HAL_UART_Transmit+0x66>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e14:	f1b8 0f00 	cmp.w	r8, #0
 8004e18:	d005      	beq.n	8004e26 <HAL_UART_Transmit+0xde>
 8004e1a:	f7fe fa57 	bl	80032cc <HAL_GetTick>
 8004e1e:	1bc0      	subs	r0, r0, r7
 8004e20:	4580      	cmp	r8, r0
 8004e22:	6825      	ldr	r5, [r4, #0]
 8004e24:	d2bd      	bcs.n	8004da2 <HAL_UART_Transmit+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e26:	68eb      	ldr	r3, [r5, #12]
 8004e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e2c:	60eb      	str	r3, [r5, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2e:	696b      	ldr	r3, [r5, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004e30:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8004e36:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	616b      	str	r3, [r5, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004e3a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8004e3e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8004e42:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
      return HAL_TIMEOUT;
 8004e46:	2003      	movs	r0, #3
}
 8004e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pData += 1U;
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	e7b1      	b.n	8004db4 <HAL_UART_Transmit+0x6c>
    return HAL_BUSY;
 8004e50:	2002      	movs	r0, #2
}
 8004e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e56:	682b      	ldr	r3, [r5, #0]
 8004e58:	065b      	lsls	r3, r3, #25
 8004e5a:	d4b5      	bmi.n	8004dc8 <HAL_UART_Transmit+0x80>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e5c:	f1b8 0f00 	cmp.w	r8, #0
 8004e60:	d0e1      	beq.n	8004e26 <HAL_UART_Transmit+0xde>
 8004e62:	f7fe fa33 	bl	80032cc <HAL_GetTick>
 8004e66:	1bc0      	subs	r0, r0, r7
 8004e68:	4580      	cmp	r8, r0
 8004e6a:	6825      	ldr	r5, [r4, #0]
 8004e6c:	d2a6      	bcs.n	8004dbc <HAL_UART_Transmit+0x74>
 8004e6e:	e7da      	b.n	8004e26 <HAL_UART_Transmit+0xde>

08004e70 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8004e70:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8004e72:	8840      	ldrh	r0, [r0, #2]
 8004e74:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8004e78:	0c00      	lsrs	r0, r0, #16
 8004e7a:	4770      	bx	lr

08004e7c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8004e7c:	b410      	push	{r4}
 8004e7e:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004e80:	8802      	ldrh	r2, [r0, #0]
 8004e82:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8004e84:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004e88:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8004e8c:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004e90:	42a2      	cmp	r2, r4
{
 8004e92:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004e94:	d219      	bcs.n	8004eca <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8004e96:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8004e9a:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8004e9e:	b2e4      	uxtb	r4, r4
 8004ea0:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8004ea4:	8882      	ldrh	r2, [r0, #4]
 8004ea6:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004eaa:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004eb0:	bfbc      	itt	lt
 8004eb2:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8004eb6:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bfbc      	itt	lt
 8004ebc:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8004ec0:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004ec2:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004ec6:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8004eca:	b289      	uxth	r1, r1
 8004ecc:	2000      	movs	r0, #0
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f361 000f 	bfi	r0, r1, #0, #16
 8004ed4:	f363 401f 	bfi	r0, r3, #16, #16
}
 8004ed8:	b005      	add	sp, #20
 8004eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8004ee4:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8004ee6:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8004eea:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8004eee:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8004ef2:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8004ef6:	4770      	bx	lr

08004ef8 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004ef8:	b120      	cbz	r0, 8004f04 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8004efa:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8004efe:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004f00:	9b00      	ldr	r3, [sp, #0]
 8004f02:	60c3      	str	r3, [r0, #12]
  }
}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop

08004f08 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8004f08:	b190      	cbz	r0, 8004f30 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8004f0a:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8004f0c:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8004f0e:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004f10:	b151      	cbz	r1, 8004f28 <FCP_CalcCRC+0x20>
 8004f12:	1c82      	adds	r2, r0, #2
 8004f14:	3901      	subs	r1, #1
 8004f16:	fa52 f181 	uxtab	r1, r2, r1
 8004f1a:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8004f1c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004f20:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004f22:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8004f24:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004f26:	d1f9      	bne.n	8004f1c <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8004f28:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8004f2c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8004f34:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004f36:	8ac2      	ldrh	r2, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 8004f38:	7844      	ldrb	r4, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 8004f3a:	8a85      	ldrh	r5, [r0, #20]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004f3c:	e9d0 130a 	ldrd	r1, r3, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004f40:	fb12 f204 	smulbb	r2, r2, r4
  hMaxReliableElSpeedUnit *= 2u;
 8004f44:	fb15 f504 	smulbb	r5, r5, r4
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8004f48:	b292      	uxth	r2, r2
  hMaxReliableElSpeedUnit *= 2u;
 8004f4a:	006d      	lsls	r5, r5, #1

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004f4c:	0c0e      	lsrs	r6, r1, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8004f4e:	2a03      	cmp	r2, #3
  hMaxReliableElSpeedUnit *= 2u;
 8004f50:	b2ad      	uxth	r5, r5
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8004f52:	f8a0 60c2 	strh.w	r6, [r0, #194]	; 0xc2
  if ( hMinReliableElSpeedUnit == 0u )
 8004f56:	d968      	bls.n	800502a <HALL_Init+0xf6>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8004f58:	0892      	lsrs	r2, r2, #2
 8004f5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004f5e:	f242 7410 	movw	r4, #10000	; 0x2710
 8004f62:	0052      	lsls	r2, r2, #1
 8004f64:	fbb4 f2f2 	udiv	r2, r4, r2
 8004f68:	b294      	uxth	r4, r2
 8004f6a:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004f6e:	4f30      	ldr	r7, [pc, #192]	; (8005030 <HALL_Init+0xfc>)
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004f70:	4c30      	ldr	r4, [pc, #192]	; (8005034 <HALL_Init+0x100>)
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8004f72:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004f76:	fb02 f206 	mul.w	r2, r2, r6
 8004f7a:	fba7 6202 	umull	r6, r2, r7, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004f7e:	fba4 4101 	umull	r4, r1, r4, r1
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004f82:	69c4      	ldr	r4, [r0, #28]
 8004f84:	8b46      	ldrh	r6, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004f86:	0992      	lsrs	r2, r2, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004f88:	0889      	lsrs	r1, r1, #2

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004f8a:	eb01 0781 	add.w	r7, r1, r1, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004f8e:	fbb1 f1f6 	udiv	r1, r1, r6
 8004f92:	fb04 f101 	mul.w	r1, r4, r1
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8004f96:	0414      	lsls	r4, r2, #16
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004f98:	007f      	lsls	r7, r7, #1
                       / hMaxReliableElSpeedUnit);
 8004f9a:	fbb7 f5f5 	udiv	r5, r7, r5
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004f9e:	e9c0 452e 	strd	r4, r5, [r0, #184]	; 0xb8
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004fa2:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004fa6:	699c      	ldr	r4, [r3, #24]

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8004fa8:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004fac:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004fb0:	f8a0 20ae 	strh.w	r2, [r0, #174]	; 0xae
 8004fb4:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8004fb8:	b292      	uxth	r2, r2
 8004fba:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004fbe:	fb06 f101 	mul.w	r1, r6, r1
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8004fc2:	8c85      	ldrh	r5, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004fc4:	fbb1 f1f5 	udiv	r1, r1, r5
  pHandle->SensorIsReliable = true;
 8004fc8:	2501      	movs	r5, #1
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8004fca:	3901      	subs	r1, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004fcc:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
  pHandle->SensorIsReliable = true;
 8004fd0:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
 8004fd4:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004fd8:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8004fda:	2100      	movs	r1, #0
 8004fdc:	432a      	orrs	r2, r5
 8004fde:	615a      	str	r2, [r3, #20]
 8004fe0:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	f042 0204 	orr.w	r2, r2, #4
 8004fe8:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	f042 0202 	orr.w	r2, r2, #2
 8004ff0:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	432a      	orrs	r2, r5
 8004ff6:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8004ff8:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8004ffa:	6a1a      	ldr	r2, [r3, #32]
 8004ffc:	432a      	orrs	r2, r5
 8004ffe:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	432a      	orrs	r2, r5
 8005004:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8005006:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800500a:	b163      	cbz	r3, 8005026 <HALL_Init+0xf2>
 800500c:	3b01      	subs	r3, #1
 800500e:	b2d9      	uxtb	r1, r3
 8005010:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8005014:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8005018:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800501c:	304c      	adds	r0, #76	; 0x4c
 800501e:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8005022:	4298      	cmp	r0, r3
 8005024:	d1fb      	bne.n	800501e <HALL_Init+0xea>
  }
}
 8005026:	bcf0      	pop	{r4, r5, r6, r7}
 8005028:	4770      	bx	lr
 800502a:	2296      	movs	r2, #150	; 0x96
    pHandle->HallTimeout = 150u;
 800502c:	4614      	mov	r4, r2
 800502e:	e79c      	b.n	8004f6a <HALL_Init+0x36>
 8005030:	10624dd3 	.word	0x10624dd3
 8005034:	aaaaaaab 	.word	0xaaaaaaab

08005038 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005038:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800503a:	68d1      	ldr	r1, [r2, #12]

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 800503c:	2300      	movs	r3, #0
{
 800503e:	b430      	push	{r4, r5}
 8005040:	f021 0102 	bic.w	r1, r1, #2

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8005044:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 8005048:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 800504a:	2401      	movs	r4, #1
  pHandle->RatioDec = false;
 800504c:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->SpeedFIFOIdx = 0u;
 8005050:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->RatioInc = false;
 8005054:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->_Super.bSpeedErrorNumber = 0;
 8005058:	7003      	strb	r3, [r0, #0]
  pHandle->FirstCapt = 0u;
 800505a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->Direction = POSITIVE;
 800505e:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
  pHandle->BufferFilled = 0u;
 8005062:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 8005066:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 8005068:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 800506c:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 8005070:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8005074:	6295      	str	r5, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8005076:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005078:	6813      	ldr	r3, [r2, #0]
 800507a:	4323      	orrs	r3, r4
 800507c:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800507e:	68d3      	ldr	r3, [r2, #12]
 8005080:	f043 0302 	orr.w	r3, r3, #2
 8005084:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005086:	f890 3020 	ldrb.w	r3, [r0, #32]
 800508a:	bb03      	cbnz	r3, 80050ce <HALL_Clear+0x96>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800508c:	6c03      	ldr	r3, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800508e:	6b82      	ldr	r2, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8005090:	6919      	ldr	r1, [r3, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005092:	6c43      	ldr	r3, [r0, #68]	; 0x44
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005094:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005096:	6915      	ldr	r5, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005098:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800509a:	438b      	bics	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800509c:	bf08      	it	eq
 800509e:	2304      	moveq	r3, #4
 80050a0:	6911      	ldr	r1, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80050a2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80050a4:	bf18      	it	ne
 80050a6:	2300      	movne	r3, #0
 80050a8:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80050aa:	bf0c      	ite	eq
 80050ac:	2402      	moveq	r4, #2
 80050ae:	2400      	movne	r4, #0
 80050b0:	4323      	orrs	r3, r4
 80050b2:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80050b4:	bf08      	it	eq
 80050b6:	f043 0301 	orreq.w	r3, r3, #1
 80050ba:	1e5a      	subs	r2, r3, #1
 80050bc:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 80050c0:	2a05      	cmp	r2, #5
 80050c2:	d857      	bhi.n	8005174 <HALL_Clear+0x13c>
 80050c4:	e8df f002 	tbb	[pc, r2]
 80050c8:	42382e24 	.word	0x42382e24
 80050cc:	1a4c      	.short	0x1a4c
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80050ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80050d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80050d2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80050d4:	6919      	ldr	r1, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80050d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80050d8:	6912      	ldr	r2, [r2, #16]
 80050da:	6925      	ldr	r5, [r4, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80050dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80050de:	4393      	bics	r3, r2
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80050e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80050e2:	bf0c      	ite	eq
 80050e4:	2302      	moveq	r3, #2
 80050e6:	2300      	movne	r3, #0
 80050e8:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80050ea:	bf08      	it	eq
 80050ec:	f043 0301 	orreq.w	r3, r3, #1
 80050f0:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80050f2:	bf14      	ite	ne
 80050f4:	2204      	movne	r2, #4
 80050f6:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80050f8:	4313      	orrs	r3, r2
 80050fa:	e7de      	b.n	80050ba <HALL_Clear+0x82>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80050fc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80050fe:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8005102:	3b3f      	subs	r3, #63	; 0x3f
 8005104:	b21b      	sxth	r3, r3
 8005106:	8083      	strh	r3, [r0, #4]
}
 8005108:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800510a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800510e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005110:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005112:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8005116:	333f      	adds	r3, #63	; 0x3f
 8005118:	b21b      	sxth	r3, r3
}
 800511a:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 800511c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800511e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005122:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005124:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005126:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 800512a:	3b2a      	subs	r3, #42	; 0x2a
 800512c:	b21b      	sxth	r3, r3
}
 800512e:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005130:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005132:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005136:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005138:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800513a:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 800513e:	332a      	adds	r3, #42	; 0x2a
 8005140:	b21b      	sxth	r3, r3
}
 8005142:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005144:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005146:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800514a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 800514c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800514e:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8005152:	3b15      	subs	r3, #21
 8005154:	b21b      	sxth	r3, r3
}
 8005156:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005158:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800515a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800515e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005160:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005162:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8005166:	3315      	adds	r3, #21
 8005168:	b21b      	sxth	r3, r3
}
 800516a:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800516c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800516e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005172:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 8005174:	2200      	movs	r2, #0
 8005176:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800517a:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 800517e:	e7c3      	b.n	8005108 <HALL_Clear+0xd0>

08005180 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005180:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8005184:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005188:	429a      	cmp	r2, r3
 800518a:	d013      	beq.n	80051b4 <HALL_CalcElAngle+0x34>
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800518c:	8883      	ldrh	r3, [r0, #4]
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800518e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
{
 8005192:	b410      	push	{r4}
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005194:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005198:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800519c:	b292      	uxth	r2, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800519e:	4413      	add	r3, r2
 80051a0:	4423      	add	r3, r4
 80051a2:	b21b      	sxth	r3, r3
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80051a4:	440a      	add	r2, r1
 80051a6:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80051aa:	8083      	strh	r3, [r0, #4]
}
 80051ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051b0:	4618      	mov	r0, r3
 80051b2:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 80051b4:	8883      	ldrh	r3, [r0, #4]
 80051b6:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 80051ba:	4413      	add	r3, r2
 80051bc:	b21b      	sxth	r3, r3
 80051be:	8083      	strh	r3, [r0, #4]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	4770      	bx	lr

080051c4 <HALL_CalcAvrgMecSpeedUnit>:
{
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 80051c8:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 80051cc:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 80051ce:	b180      	cbz	r0, 80051f2 <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80051d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 80051d2:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	429a      	cmp	r2, r3
 80051da:	d811      	bhi.n	8005200 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 80051e0:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 80051e2:	4629      	mov	r1, r5
 80051e4:	4620      	mov	r0, r4
 80051e6:	f000 ff95 	bl	8006114 <SPD_IsMecSpeedReliable>
 80051ea:	f9b5 3000 	ldrsh.w	r3, [r5]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80051ee:	81a3      	strh	r3, [r4, #12]
}
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80051f2:	78e3      	ldrb	r3, [r4, #3]
 80051f4:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 80051f6:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 80051f8:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 80051fa:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80051fc:	81a3      	strh	r3, [r4, #12]
}
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8005200:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8005204:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8005206:	b31b      	cbz	r3, 8005250 <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005208:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800520c:	4293      	cmp	r3, r2
 800520e:	d01d      	beq.n	800524c <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 8005210:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8005214:	b9f2      	cbnz	r2, 8005254 <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8005216:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 800521a:	88a0      	ldrh	r0, [r4, #4]
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 800521c:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8005220:	1a12      	subs	r2, r2, r0
 8005222:	b212      	sxth	r2, r2
 8005224:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 8005228:	fb92 f2f1 	sdiv	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800522c:	8b60      	ldrh	r0, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800522e:	7861      	ldrb	r1, [r4, #1]
 8005230:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8005234:	fb03 f300 	mul.w	r3, r3, r0
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005238:	69e2      	ldr	r2, [r4, #28]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800523a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800523e:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005240:	fb02 f201 	mul.w	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005244:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8005248:	802b      	strh	r3, [r5, #0]
 800524a:	e7ca      	b.n	80051e2 <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 800524c:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8005250:	802b      	strh	r3, [r5, #0]
 8005252:	e7c6      	b.n	80051e2 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8005254:	2200      	movs	r2, #0
 8005256:	e7e9      	b.n	800522c <HALL_CalcAvrgMecSpeedUnit+0x68>

08005258 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005258:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800525c:	2b00      	cmp	r3, #0
 800525e:	d029      	beq.n	80052b4 <HALL_TIMx_CC_IRQHandler+0x5c>
{
 8005260:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8005262:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 8005266:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 800526a:	f990 50a2 	ldrsb.w	r5, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800526e:	b31b      	cbz	r3, 80052b8 <HALL_TIMx_CC_IRQHandler+0x60>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005270:	6b83      	ldr	r3, [r0, #56]	; 0x38
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005272:	6c02      	ldr	r2, [r0, #64]	; 0x40
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005274:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005276:	691c      	ldr	r4, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005278:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800527a:	6912      	ldr	r2, [r2, #16]
 800527c:	6937      	ldr	r7, [r6, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 800527e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8005280:	4393      	bics	r3, r2
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005282:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005284:	bf0c      	ite	eq
 8005286:	2302      	moveq	r3, #2
 8005288:	2300      	movne	r3, #0
 800528a:	43be      	bics	r6, r7
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 800528c:	bf08      	it	eq
 800528e:	f043 0301 	orreq.w	r3, r3, #1
 8005292:	43a2      	bics	r2, r4
 8005294:	bf14      	ite	ne
 8005296:	2204      	movne	r2, #4
 8005298:	2200      	moveq	r2, #0
 800529a:	4313      	orrs	r3, r2
 800529c:	1e5a      	subs	r2, r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800529e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80052a0:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 80052a4:	2a05      	cmp	r2, #5
 80052a6:	f200 8166 	bhi.w	8005576 <HALL_TIMx_CC_IRQHandler+0x31e>
 80052aa:	e8df f002 	tbb	[pc, r2]
 80052ae:	6373      	.short	0x6373
 80052b0:	1c364653 	.word	0x1c364653
}
 80052b4:	2000      	movs	r0, #0
 80052b6:	4770      	bx	lr
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80052b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80052ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80052bc:	691f      	ldr	r7, [r3, #16]
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80052be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80052c0:	6916      	ldr	r6, [r2, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80052c2:	6b04      	ldr	r4, [r0, #48]	; 0x30
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80052c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80052c6:	6924      	ldr	r4, [r4, #16]
 80052c8:	43bb      	bics	r3, r7
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80052ca:	bf0c      	ite	eq
 80052cc:	2304      	moveq	r3, #4
 80052ce:	2300      	movne	r3, #0
 80052d0:	43b2      	bics	r2, r6
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80052d2:	6b42      	ldr	r2, [r0, #52]	; 0x34
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80052d4:	bf0c      	ite	eq
 80052d6:	2602      	moveq	r6, #2
 80052d8:	2600      	movne	r6, #0
 80052da:	4333      	orrs	r3, r6
 80052dc:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80052de:	bf08      	it	eq
 80052e0:	f043 0301 	orreq.w	r3, r3, #1
 80052e4:	e7da      	b.n	800529c <HALL_TIMx_CC_IRQHandler+0x44>
        if ( bPrevHallState == STATE_2 )
 80052e6:	2902      	cmp	r1, #2
 80052e8:	d07f      	beq.n	80053ea <HALL_TIMx_CC_IRQHandler+0x192>
        else if ( bPrevHallState == STATE_4 )
 80052ea:	2904      	cmp	r1, #4
 80052ec:	f000 80a1 	beq.w	8005432 <HALL_TIMx_CC_IRQHandler+0x1da>
    PrevDirection = pHandle->Direction;
 80052f0:	4629      	mov	r1, r5
    if (pHandle->HallMtpa == true)
 80052f2:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 80052f6:	b113      	cbz	r3, 80052fe <HALL_TIMx_CC_IRQHandler+0xa6>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 80052f8:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
 80052fc:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 80052fe:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8005302:	2b00      	cmp	r3, #0
 8005304:	f040 80a1 	bne.w	800544a <HALL_TIMx_CC_IRQHandler+0x1f2>
      pHandle->FirstCapt++;
 8005308:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800530c:	3301      	adds	r3, #1
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8005314:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8005316:	2000      	movs	r0, #0
 8005318:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( bPrevHallState == STATE_4 )
 800531a:	2904      	cmp	r1, #4
 800531c:	d06f      	beq.n	80053fe <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if ( bPrevHallState == STATE_1 )
 800531e:	2901      	cmp	r1, #1
 8005320:	d1e6      	bne.n	80052f0 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005322:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005324:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8005328:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800532a:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 800532c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005330:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005334:	f04f 31ff 	mov.w	r1, #4294967295
 8005338:	e045      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_6 )
 800533a:	2906      	cmp	r1, #6
 800533c:	d06f      	beq.n	800541e <HALL_TIMx_CC_IRQHandler+0x1c6>
        else if ( bPrevHallState == STATE_5 )
 800533e:	2905      	cmp	r1, #5
 8005340:	d1d6      	bne.n	80052f0 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005342:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005344:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005348:	22ff      	movs	r2, #255	; 0xff
 800534a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 800534e:	f04f 31ff 	mov.w	r1, #4294967295
 8005352:	e038      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_1 )
 8005354:	2901      	cmp	r1, #1
 8005356:	d059      	beq.n	800540c <HALL_TIMx_CC_IRQHandler+0x1b4>
        else if ( bPrevHallState == STATE_2 )
 8005358:	2902      	cmp	r1, #2
 800535a:	d1c9      	bne.n	80052f0 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800535c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800535e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8005362:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 8005364:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005366:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800536a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800536e:	f04f 31ff 	mov.w	r1, #4294967295
 8005372:	e028      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_3 )
 8005374:	2903      	cmp	r1, #3
 8005376:	d02e      	beq.n	80053d6 <HALL_TIMx_CC_IRQHandler+0x17e>
        else if ( bPrevHallState == STATE_6 )
 8005378:	2906      	cmp	r1, #6
 800537a:	d1b9      	bne.n	80052f0 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800537c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800537e:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8005382:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8005384:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005386:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800538a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800538e:	f04f 31ff 	mov.w	r1, #4294967295
 8005392:	e018      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_5 )
 8005394:	2905      	cmp	r1, #5
 8005396:	d00d      	beq.n	80053b4 <HALL_TIMx_CC_IRQHandler+0x15c>
        else if ( bPrevHallState == STATE_3 )
 8005398:	2903      	cmp	r1, #3
 800539a:	d1a9      	bne.n	80052f0 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800539c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800539e:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80053a2:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80053a4:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80053a6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80053aa:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80053ae:	f04f 31ff 	mov.w	r1, #4294967295
 80053b2:	e008      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80053b4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053b6:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 80053ba:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 80053bc:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80053be:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80053c2:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    if (pHandle->Direction != PrevDirection)
 80053c6:	428d      	cmp	r5, r1
 80053c8:	d093      	beq.n	80052f2 <HALL_TIMx_CC_IRQHandler+0x9a>
      pHandle->BufferFilled = 0 ;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 80053d0:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 80053d4:	e78d      	b.n	80052f2 <HALL_TIMx_CC_IRQHandler+0x9a>
                                                  + S16_60_PHASE_SHIFT );
 80053d6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053d8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80053dc:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 80053de:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 80053e0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80053e4:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 80053e8:	e7ed      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80053ea:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80053ec:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80053f0:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = POSITIVE;
 80053f2:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80053f4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80053f8:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80053fc:	e7e3      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80053fe:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005400:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8005404:	2101      	movs	r1, #1
 8005406:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 800540a:	e7dc      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800540c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 800540e:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005412:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8005416:	3355      	adds	r3, #85	; 0x55
 8005418:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 800541c:	e7d3      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800541e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005420:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8005424:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8005426:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005428:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 800542c:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005430:	e7c9      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005432:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005434:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8005438:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800543a:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800543c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005440:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005444:	f04f 31ff 	mov.w	r1, #4294967295
 8005448:	e7bd      	b.n	80053c6 <HALL_TIMx_CC_IRQHandler+0x16e>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800544a:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800544e:	f890 5026 	ldrb.w	r5, [r0, #38]	; 0x26
 8005452:	42ab      	cmp	r3, r5
 8005454:	d205      	bcs.n	8005462 <HALL_TIMx_CC_IRQHandler+0x20a>
        pHandle->BufferFilled++;
 8005456:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800545a:	3301      	adds	r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
 8005462:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005466:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005468:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 800546c:	f890 704e 	ldrb.w	r7, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005470:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8005472:	b292      	uxth	r2, r2
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005474:	fa13 f68c 	uxtah	r6, r3, ip
      if ( pHandle->OVFCounter != 0u )
 8005478:	f007 0eff 	and.w	lr, r7, #255	; 0xff
 800547c:	2f00      	cmp	r7, #0
 800547e:	d043      	beq.n	8005508 <HALL_TIMx_CC_IRQHandler+0x2b0>
        hAux = hPrscBuf + 1u;
 8005480:	3201      	adds	r2, #1
        if ( pHandle->RatioInc )
 8005482:	f890 704b 	ldrb.w	r7, [r0, #75]	; 0x4b
        wCaptBuf *= hAux;
 8005486:	b293      	uxth	r3, r2
 8005488:	fb06 f303 	mul.w	r3, r6, r3
        if ( pHandle->RatioInc )
 800548c:	2f00      	cmp	r7, #0
 800548e:	d045      	beq.n	800551c <HALL_TIMx_CC_IRQHandler+0x2c4>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8005490:	2200      	movs	r2, #0
 8005492:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 8005496:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800549a:	429a      	cmp	r2, r3
 800549c:	d82f      	bhi.n	80054fe <HALL_TIMx_CC_IRQHandler+0x2a6>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800549e:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80054a2:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80054a6:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 80054aa:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80054ae:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80054b0:	f8dc 7050 	ldr.w	r7, [ip, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80054b4:	bf88      	it	hi
 80054b6:	fb01 f603 	mulhi.w	r6, r1, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80054ba:	eba4 0407 	sub.w	r4, r4, r7
          pHandle->SpeedFIFOIdx++;
 80054be:	f102 0201 	add.w	r2, r2, #1
 80054c2:	b2d2      	uxtb	r2, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80054c4:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80054c8:	bf8a      	itet	hi
 80054ca:	19a4      	addhi	r4, r4, r6
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 80054cc:	434e      	mulls	r6, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80054ce:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 80054d2:	4295      	cmp	r5, r2
 80054d4:	f8cc 6050 	str.w	r6, [ip, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 80054d8:	bf08      	it	eq
 80054da:	2200      	moveq	r2, #0
 80054dc:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 80054e0:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
 80054e4:	b332      	cbz	r2, 8005534 <HALL_TIMx_CC_IRQHandler+0x2dc>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80054e6:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80054ea:	4295      	cmp	r5, r2
 80054ec:	d938      	bls.n	8005560 <HALL_TIMx_CC_IRQHandler+0x308>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80054ee:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 80054f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f6:	fb13 f101 	smulbb	r1, r3, r1
 80054fa:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 80054fe:	2300      	movs	r3, #0
 8005500:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 8005504:	2000      	movs	r0, #0
 8005506:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 8005508:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 800550c:	b1ab      	cbz	r3, 800553a <HALL_TIMx_CC_IRQHandler+0x2e2>
          hAux = hPrscBuf + 2u;
 800550e:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 8005510:	b292      	uxth	r2, r2
 8005512:	fb06 f302 	mul.w	r3, r6, r2
          pHandle->RatioDec = false;
 8005516:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
 800551a:	e7bc      	b.n	8005496 <HALL_TIMx_CC_IRQHandler+0x23e>
 800551c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 800551e:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	; 0xae
 8005522:	4296      	cmp	r6, r2
 8005524:	d9b7      	bls.n	8005496 <HALL_TIMx_CC_IRQHandler+0x23e>
 8005526:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8005528:	2601      	movs	r6, #1
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 800552a:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800552c:	62a2      	str	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 800552e:	f880 604b 	strb.w	r6, [r0, #75]	; 0x4b
 8005532:	e7b0      	b.n	8005496 <HALL_TIMx_CC_IRQHandler+0x23e>
            pHandle->AvrElSpeedDpp = 0;
 8005534:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 8005538:	e7e1      	b.n	80054fe <HALL_TIMx_CC_IRQHandler+0x2a6>
          uint16_t hAux = hPrscBuf + 1u;
 800553a:	3201      	adds	r2, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 800553c:	fa1f fc8c 	uxth.w	ip, ip
          wCaptBuf *= hAux;
 8005540:	b292      	uxth	r2, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005542:	f5bc 4faa 	cmp.w	ip, #21760	; 0x5500
          wCaptBuf *= hAux;
 8005546:	fb06 f302 	mul.w	r3, r6, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 800554a:	d2a4      	bcs.n	8005496 <HALL_TIMx_CC_IRQHandler+0x23e>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800554c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 800554e:	2a00      	cmp	r2, #0
 8005550:	d0a1      	beq.n	8005496 <HALL_TIMx_CC_IRQHandler+0x23e>
 8005552:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 8005554:	2601      	movs	r6, #1
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8005556:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8005558:	62a2      	str	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 800555a:	f880 604a 	strb.w	r6, [r0, #74]	; 0x4a
 800555e:	e79a      	b.n	8005496 <HALL_TIMx_CC_IRQHandler+0x23e>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8005560:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8005564:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8005568:	fb92 f5f5 	sdiv	r5, r2, r5
 800556c:	fb93 f3f5 	sdiv	r3, r3, r5
 8005570:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8005574:	e7c3      	b.n	80054fe <HALL_TIMx_CC_IRQHandler+0x2a6>
        pHandle->SensorIsReliable = false;
 8005576:	2300      	movs	r3, #0
 8005578:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 800557c:	e6b8      	b.n	80052f0 <HALL_TIMx_CC_IRQHandler+0x98>
 800557e:	bf00      	nop

08005580 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005580:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8005584:	b1e3      	cbz	r3, 80055c0 <HALL_TIMx_UP_IRQHandler+0x40>
{
 8005586:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 8005588:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800558c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 800558e:	f8b0 40c0 	ldrh.w	r4, [r0, #192]	; 0xc0
 8005592:	f8b0 30c2 	ldrh.w	r3, [r0, #194]	; 0xc2
    pHandle->OVFCounter++;
 8005596:	3201      	adds	r2, #1
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 800559e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80055a0:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80055a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a8:	fb05 2202 	mla	r2, r5, r2, r2
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80055ac:	fb03 f304 	mul.w	r3, r3, r4
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80055b0:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	4299      	cmp	r1, r3
 80055b8:	d204      	bcs.n	80055c4 <HALL_TIMx_UP_IRQHandler+0x44>
}
 80055ba:	2000      	movs	r0, #0
 80055bc:	bc30      	pop	{r4, r5}
 80055be:	4770      	bx	lr
 80055c0:	2000      	movs	r0, #0
 80055c2:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80055c4:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 80055c8:	2200      	movs	r2, #0
 80055ca:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80055cc:	bb03      	cbnz	r3, 8005610 <HALL_TIMx_UP_IRQHandler+0x90>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80055ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80055d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80055d2:	6919      	ldr	r1, [r3, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80055d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80055d6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80055d8:	6915      	ldr	r5, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80055da:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80055dc:	438b      	bics	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80055de:	bf08      	it	eq
 80055e0:	2304      	moveq	r3, #4
 80055e2:	6911      	ldr	r1, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80055e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80055e6:	bf18      	it	ne
 80055e8:	2300      	movne	r3, #0
 80055ea:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80055ec:	bf0c      	ite	eq
 80055ee:	2402      	moveq	r4, #2
 80055f0:	2400      	movne	r4, #0
 80055f2:	4323      	orrs	r3, r4
 80055f4:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80055f6:	bf08      	it	eq
 80055f8:	f043 0301 	orreq.w	r3, r3, #1
 80055fc:	1e5a      	subs	r2, r3, #1
 80055fe:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
  switch ( pHandle->HallState )
 8005602:	2a05      	cmp	r2, #5
 8005604:	d86a      	bhi.n	80056dc <HALL_TIMx_UP_IRQHandler+0x15c>
 8005606:	e8df f002 	tbb	[pc, r2]
 800560a:	5b62      	.short	0x5b62
 800560c:	1a464d54 	.word	0x1a464d54
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005610:	6b83      	ldr	r3, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005612:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005614:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005616:	6919      	ldr	r1, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005618:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800561a:	6912      	ldr	r2, [r2, #16]
 800561c:	6925      	ldr	r5, [r4, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800561e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005620:	4393      	bics	r3, r2
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005622:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005624:	bf0c      	ite	eq
 8005626:	2302      	moveq	r3, #2
 8005628:	2300      	movne	r3, #0
 800562a:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800562c:	bf08      	it	eq
 800562e:	f043 0301 	orreq.w	r3, r3, #1
 8005632:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005634:	bf14      	ite	ne
 8005636:	2204      	movne	r2, #4
 8005638:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800563a:	4313      	orrs	r3, r2
 800563c:	e7de      	b.n	80055fc <HALL_TIMx_UP_IRQHandler+0x7c>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800563e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005640:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8005644:	3b3f      	subs	r3, #63	; 0x3f
 8005646:	b21b      	sxth	r3, r3
 8005648:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800564a:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800564e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 8005652:	2300      	movs	r3, #0
 8005654:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 8005658:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800565c:	b17c      	cbz	r4, 800567e <HALL_TIMx_UP_IRQHandler+0xfe>
 800565e:	1e62      	subs	r2, r4, #1
 8005660:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8005662:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8005666:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800566a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800566e:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8005672:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005676:	429a      	cmp	r2, r3
 8005678:	d1fb      	bne.n	8005672 <HALL_TIMx_UP_IRQHandler+0xf2>
 800567a:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 800567e:	2300      	movs	r3, #0
 8005680:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005684:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005688:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 800568c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8005690:	bc30      	pop	{r4, r5}
 8005692:	2000      	movs	r0, #0
 8005694:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005696:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005698:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800569c:	3315      	adds	r3, #21
 800569e:	b21b      	sxth	r3, r3
 80056a0:	8083      	strh	r3, [r0, #4]
      break;
 80056a2:	e7d2      	b.n	800564a <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80056a4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80056a6:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80056aa:	3b15      	subs	r3, #21
 80056ac:	b21b      	sxth	r3, r3
 80056ae:	8083      	strh	r3, [r0, #4]
      break;
 80056b0:	e7cb      	b.n	800564a <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80056b2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80056b4:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80056b8:	332a      	adds	r3, #42	; 0x2a
 80056ba:	b21b      	sxth	r3, r3
 80056bc:	8083      	strh	r3, [r0, #4]
      break;
 80056be:	e7c4      	b.n	800564a <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80056c0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80056c2:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80056c6:	3b2a      	subs	r3, #42	; 0x2a
 80056c8:	b21b      	sxth	r3, r3
 80056ca:	8083      	strh	r3, [r0, #4]
      break;
 80056cc:	e7bd      	b.n	800564a <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80056ce:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80056d0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80056d4:	333f      	adds	r3, #63	; 0x3f
 80056d6:	b21b      	sxth	r3, r3
 80056d8:	8083      	strh	r3, [r0, #4]
      break;
 80056da:	e7b6      	b.n	800564a <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->SensorIsReliable = false;
 80056dc:	2200      	movs	r2, #0
 80056de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80056e2:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 80056e6:	e7b0      	b.n	800564a <HALL_TIMx_UP_IRQHandler+0xca>

080056e8 <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80056e8:	6f02      	ldr	r2, [r0, #112]	; 0x70

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80056ea:	4b20      	ldr	r3, [pc, #128]	; (800576c <ICS_GetPhaseCurrents+0x84>)
{
 80056ec:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80056ee:	68d4      	ldr	r4, [r2, #12]
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80056f0:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 80056f2:	6a22      	ldr	r2, [r4, #32]

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 80056f4:	4d1e      	ldr	r5, [pc, #120]	; (8005770 <ICS_GetPhaseCurrents+0x88>)
 80056f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056fa:	6222      	str	r2, [r4, #32]
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8005700:	b29b      	uxth	r3, r3
 8005702:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 8005704:	42ab      	cmp	r3, r5
 8005706:	da18      	bge.n	800573a <ICS_GetPhaseCurrents+0x52>
  {
    pStator_Currents->a = -INT16_MAX;
 8005708:	800d      	strh	r5, [r1, #0]
 800570a:	f248 0201 	movw	r2, #32769	; 0x8001
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 800570e:	4b19      	ldr	r3, [pc, #100]	; (8005774 <ICS_GetPhaseCurrents+0x8c>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8005710:	6e06      	ldr	r6, [r0, #96]	; 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8005714:	4c16      	ldr	r4, [pc, #88]	; (8005770 <ICS_GetPhaseCurrents+0x88>)
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8005716:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8005718:	b29b      	uxth	r3, r3
 800571a:	1b9b      	subs	r3, r3, r6
  if ( aux < -INT16_MAX )
 800571c:	42a3      	cmp	r3, r4
 800571e:	da15      	bge.n	800574c <ICS_GetPhaseCurrents+0x64>
  {
    pStator_Currents->b = -INT16_MAX;
 8005720:	804c      	strh	r4, [r1, #2]
 8005722:	f248 0301 	movw	r3, #32769	; 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005726:	4413      	add	r3, r2
 8005728:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 800572a:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 800572e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005732:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

}
 8005736:	bc70      	pop	{r4, r5, r6}
 8005738:	4770      	bx	lr
  else  if ( aux > INT16_MAX )
 800573a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573e:	db11      	blt.n	8005764 <ICS_GetPhaseCurrents+0x7c>
    pStator_Currents->a = INT16_MAX;
 8005740:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005744:	461a      	mov	r2, r3
 8005746:	800b      	strh	r3, [r1, #0]
 8005748:	461d      	mov	r5, r3
 800574a:	e7e0      	b.n	800570e <ICS_GetPhaseCurrents+0x26>
  else  if ( aux > INT16_MAX )
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005750:	db04      	blt.n	800575c <ICS_GetPhaseCurrents+0x74>
    pStator_Currents->b = INT16_MAX;
 8005752:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8005756:	4623      	mov	r3, r4
 8005758:	804c      	strh	r4, [r1, #2]
 800575a:	e7e4      	b.n	8005726 <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->b = ( int16_t )aux;
 800575c:	b21c      	sxth	r4, r3
 800575e:	804c      	strh	r4, [r1, #2]
 8005760:	b29b      	uxth	r3, r3
 8005762:	e7e0      	b.n	8005726 <ICS_GetPhaseCurrents+0x3e>
    pStator_Currents->a = ( int16_t )aux;
 8005764:	b21d      	sxth	r5, r3
 8005766:	800d      	strh	r5, [r1, #0]
 8005768:	b29a      	uxth	r2, r3
 800576a:	e7d0      	b.n	800570e <ICS_GetPhaseCurrents+0x26>
 800576c:	40012000 	.word	0x40012000
 8005770:	ffff8001 	.word	0xffff8001
 8005774:	40012100 	.word	0x40012100

08005778 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005778:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	6a13      	ldr	r3, [r2, #32]
 800577e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005782:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005784:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8005788:	2b0f      	cmp	r3, #15
 800578a:	d814      	bhi.n	80057b6 <ICS_HFCurrentsCalibration+0x3e>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 800578c:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <ICS_HFCurrentsCalibration+0x44>)
 800578e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8005790:	b430      	push	{r4, r5}
    pHandle->PhaseAOffset += ADC1->JDR1;
 8005792:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8005794:	4c0a      	ldr	r4, [pc, #40]	; (80057c0 <ICS_HFCurrentsCalibration+0x48>)
 8005796:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += ADC1->JDR1;
 8005798:	442b      	add	r3, r5
 800579a:	65c3      	str	r3, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 800579c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    pHandle->PolarizationCounter++;
 800579e:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80057a2:	3301      	adds	r3, #1
 80057a4:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 80057a6:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80057a8:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80057ac:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 80057ae:	6602      	str	r2, [r0, #96]	; 0x60
  pStator_Currents->b = 0;
}
 80057b0:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 80057b2:	600b      	str	r3, [r1, #0]
}
 80057b4:	4770      	bx	lr
  pStator_Currents->a = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	600b      	str	r3, [r1, #0]
 80057ba:	4770      	bx	lr
 80057bc:	40012000 	.word	0x40012000
 80057c0:	40012100 	.word	0x40012100

080057c4 <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80057c4:	6f01      	ldr	r1, [r0, #112]	; 0x70
 80057c6:	68cb      	ldr	r3, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80057d0:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 80057d4:	b132      	cbz	r2, 80057e4 <ICS_Init+0x20>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80057d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057da:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057e2:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 80057ec:	790a      	ldrb	r2, [r1, #4]
 80057ee:	2a02      	cmp	r2, #2
 80057f0:	d034      	beq.n	800585c <ICS_Init+0x98>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 80057f2:	780a      	ldrb	r2, [r1, #0]
 80057f4:	2a01      	cmp	r2, #1
 80057f6:	d03d      	beq.n	8005874 <ICS_Init+0xb0>
  SET_BIT(TIMx->CCER, Channels);
 80057f8:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80057fa:	4921      	ldr	r1, [pc, #132]	; (8005880 <ICS_Init+0xbc>)
 80057fc:	f442 62aa 	orr.w	r2, r2, #1360	; 0x550
 8005800:	f042 0205 	orr.w	r2, r2, #5
 8005804:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <ICS_Init+0xc0>)
 8005808:	428b      	cmp	r3, r1
 800580a:	68d3      	ldr	r3, [r2, #12]
 800580c:	bf0c      	ite	eq
 800580e:	f043 0301 	orreq.w	r3, r3, #1
 8005812:	f043 0302 	orrne.w	r3, r3, #2
 8005816:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8005818:	bf08      	it	eq
 800581a:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800581e:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <ICS_Init+0xc4>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM8_CH4;
 8005820:	bf18      	it	ne
 8005822:	f44f 11f0 	movne.w	r1, #1966080	; 0x1e0000
 8005826:	6681      	str	r1, [r0, #104]	; 0x68
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	4918      	ldr	r1, [pc, #96]	; (800588c <ICS_Init+0xc8>)
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	609a      	str	r2, [r3, #8]
 8005832:	688a      	ldr	r2, [r1, #8]
 8005834:	f042 0201 	orr.w	r2, r2, #1
 8005838:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800583c:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005840:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005844:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005846:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8005848:	685a      	ldr	r2, [r3, #4]
    pHandle->OverCurrentFlag = false;
 800584a:	2100      	movs	r1, #0
 800584c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
    pHandle->_Super.DTTest = 0u;
 8005856:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 800585a:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800585c:	794a      	ldrb	r2, [r1, #5]
 800585e:	2a01      	cmp	r2, #1
 8005860:	d108      	bne.n	8005874 <ICS_Init+0xb0>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8005862:	7a09      	ldrb	r1, [r1, #8]
 8005864:	2903      	cmp	r1, #3
 8005866:	d105      	bne.n	8005874 <ICS_Init+0xb0>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005868:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005872:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8005874:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8005878:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 800587a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800587c:	e7bc      	b.n	80057f8 <ICS_Init+0x34>
 800587e:	bf00      	nop
 8005880:	40010000 	.word	0x40010000
 8005884:	e0042000 	.word	0xe0042000
 8005888:	40012000 	.word	0x40012000
 800588c:	40012100 	.word	0x40012100

08005890 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005890:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 8005892:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005894:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005896:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800589a:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800589c:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80058a0:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80058a2:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80058a4:	63d3      	str	r3, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80058a6:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80058a8:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;
 80058aa:	07db      	lsls	r3, r3, #31
 80058ac:	d5fc      	bpl.n	80058a8 <ICS_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80058ae:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80058b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b4:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80058b6:	7c0b      	ldrb	r3, [r1, #16]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d000      	beq.n	80058be <ICS_TurnOnLowSides+0x2e>
 80058bc:	4770      	bx	lr
{
 80058be:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80058c0:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80058c2:	694d      	ldr	r5, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80058c4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80058c6:	698e      	ldr	r6, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80058c8:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80058ca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80058cc:	61ae      	str	r6, [r5, #24]
 80058ce:	6184      	str	r4, [r0, #24]
  }
}
 80058d0:	bc70      	pop	{r4, r5, r6}
 80058d2:	619a      	str	r2, [r3, #24]
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop

080058d8 <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80058d8:	6f01      	ldr	r1, [r0, #112]	; 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80058da:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80058de:	68cb      	ldr	r3, [r1, #12]
{
 80058e0:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80058e2:	2400      	movs	r4, #0
 80058e4:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80058e8:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80058ea:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80058ee:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80058f0:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80058f2:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80058f4:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80058f8:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80058fa:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80058fc:	07d2      	lsls	r2, r2, #31
 80058fe:	d5fc      	bpl.n	80058fa <ICS_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005900:	f06f 0201 	mvn.w	r2, #1
 8005904:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800590c:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800590e:	7c0a      	ldrb	r2, [r1, #16]
 8005910:	2a02      	cmp	r2, #2
 8005912:	d008      	beq.n	8005926 <ICS_SwitchOnPWM+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005914:	f06f 0201 	mvn.w	r2, #1
 8005918:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	f042 0201 	orr.w	r2, r2, #1
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 8005920:	bcf0      	pop	{r4, r5, r6, r7}
 8005922:	60da      	str	r2, [r3, #12]
 8005924:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005926:	6a18      	ldr	r0, [r3, #32]
 8005928:	f240 5255 	movw	r2, #1365	; 0x555
 800592c:	4382      	bics	r2, r0
 800592e:	d00c      	beq.n	800594a <ICS_SwitchOnPWM+0x72>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005930:	698c      	ldr	r4, [r1, #24]
 8005932:	6a08      	ldr	r0, [r1, #32]
 8005934:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005936:	694f      	ldr	r7, [r1, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005938:	69ce      	ldr	r6, [r1, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800593a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800593c:	0424      	lsls	r4, r4, #16
 800593e:	0400      	lsls	r0, r0, #16
 8005940:	0412      	lsls	r2, r2, #16
 8005942:	61bc      	str	r4, [r7, #24]
 8005944:	61b0      	str	r0, [r6, #24]
 8005946:	61aa      	str	r2, [r5, #24]
}
 8005948:	e7e4      	b.n	8005914 <ICS_SwitchOnPWM+0x3c>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800594a:	694c      	ldr	r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800594c:	69c8      	ldr	r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800594e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005950:	698d      	ldr	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005952:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005954:	6a0c      	ldr	r4, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005956:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8005958:	6184      	str	r4, [r0, #24]
 800595a:	6191      	str	r1, [r2, #24]
}
 800595c:	e7da      	b.n	8005914 <ICS_SwitchOnPWM+0x3c>
 800595e:	bf00      	nop

08005960 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005960:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005962:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005964:	68d1      	ldr	r1, [r2, #12]
 8005966:	f021 0101 	bic.w	r1, r1, #1
{
 800596a:	b4f0      	push	{r4, r5, r6, r7}
 800596c:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800596e:	6c51      	ldr	r1, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8005970:	2400      	movs	r4, #0
 8005972:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8005976:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
 800597a:	6451      	str	r1, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800597c:	7c19      	ldrb	r1, [r3, #16]
 800597e:	2902      	cmp	r1, #2
 8005980:	d10b      	bne.n	800599a <ICS_SwitchOffPWM+0x3a>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005982:	699c      	ldr	r4, [r3, #24]
 8005984:	6a18      	ldr	r0, [r3, #32]
 8005986:	6a99      	ldr	r1, [r3, #40]	; 0x28
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005988:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800598a:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800598c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800598e:	0424      	lsls	r4, r4, #16
 8005990:	0400      	lsls	r0, r0, #16
 8005992:	0409      	lsls	r1, r1, #16
 8005994:	61bc      	str	r4, [r7, #24]
 8005996:	61b0      	str	r0, [r6, #24]
 8005998:	61a9      	str	r1, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800599a:	f06f 0301 	mvn.w	r3, #1
 800599e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80059a0:	6913      	ldr	r3, [r2, #16]
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80059a2:	07db      	lsls	r3, r3, #31
 80059a4:	d5fc      	bpl.n	80059a0 <ICS_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80059a6:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 80059aa:	bcf0      	pop	{r4, r5, r6, r7}
 80059ac:	6113      	str	r3, [r2, #16]
 80059ae:	4770      	bx	lr

080059b0 <ICS_CurrentReadingCalibration>:
{
 80059b0:	b538      	push	{r3, r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80059b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80059b4:	4924      	ldr	r1, [pc, #144]	; (8005a48 <ICS_CurrentReadingCalibration+0x98>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80059b6:	68dc      	ldr	r4, [r3, #12]
  pHandle->PhaseAOffset = 0u;
 80059b8:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 80059ba:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  CLEAR_BIT(TIMx->CCER, Channels);
 80059be:	6a23      	ldr	r3, [r4, #32]
  pHandle->PhaseAOffset = 0u;
 80059c0:	65c2      	str	r2, [r0, #92]	; 0x5c
 80059c2:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 80059c6:	4605      	mov	r5, r0
 80059c8:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 80059cc:	6602      	str	r2, [r0, #96]	; 0x60
 80059ce:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80059d0:	6041      	str	r1, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 80059d2:	f7ff ff81 	bl	80058d8 <ICS_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80059d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80059d8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80059dc:	7a1a      	ldrb	r2, [r3, #8]
 80059de:	4620      	mov	r0, r4
 80059e0:	f105 0366 	add.w	r3, r5, #102	; 0x66
 80059e4:	f000 fa08 	bl	8005df8 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 80059e8:	4628      	mov	r0, r5
 80059ea:	f7ff ffb9 	bl	8005960 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80059ee:	e9d5 0217 	ldrd	r0, r2, [r5, #92]	; 0x5c
 80059f2:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseAOffset >>= 3;
 80059f4:	08c0      	lsrs	r0, r0, #3
  pHandle->PhaseBOffset >>= 3;
 80059f6:	e9c5 0217 	strd	r0, r2, [r5, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80059fa:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 80059fc:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 8005a00:	4912      	ldr	r1, [pc, #72]	; (8005a4c <ICS_CurrentReadingCalibration+0x9c>)
 8005a02:	f022 0208 	bic.w	r2, r2, #8
 8005a06:	61a2      	str	r2, [r4, #24]
 8005a08:	69a2      	ldr	r2, [r4, #24]
 8005a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a0e:	61a2      	str	r2, [r4, #24]
 8005a10:	69e2      	ldr	r2, [r4, #28]
 8005a12:	f022 0208 	bic.w	r2, r2, #8
 8005a16:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005a18:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005a1a:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005a1c:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005a1e:	69a3      	ldr	r3, [r4, #24]
 8005a20:	f043 0308 	orr.w	r3, r3, #8
 8005a24:	61a3      	str	r3, [r4, #24]
 8005a26:	69a3      	ldr	r3, [r4, #24]
 8005a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a2c:	61a3      	str	r3, [r4, #24]
 8005a2e:	69e3      	ldr	r3, [r4, #28]
 8005a30:	f043 0308 	orr.w	r3, r3, #8
 8005a34:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8005a36:	6a23      	ldr	r3, [r4, #32]
 8005a38:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8005a3c:	f043 0305 	orr.w	r3, r3, #5
 8005a40:	6223      	str	r3, [r4, #32]
 8005a42:	6069      	str	r1, [r5, #4]
}
 8005a44:	bd38      	pop	{r3, r4, r5, pc}
 8005a46:	bf00      	nop
 8005a48:	08005779 	.word	0x08005779
 8005a4c:	080056e9 	.word	0x080056e9

08005a50 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a50:	6f03      	ldr	r3, [r0, #112]	; 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8005a52:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a54:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8005a56:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
{
 8005a58:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 8005a5a:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005a5c:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005a5e:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005a60:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005a62:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8005a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a68:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop

08005a70 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8005a70:	4922      	ldr	r1, [pc, #136]	; (8005afc <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005a72:	680b      	ldr	r3, [r1, #0]
{
 8005a74:	b4f0      	push	{r4, r5, r6, r7}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8005a76:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a7a:	6f04      	ldr	r4, [r0, #112]	; 0x70

  if ( adcinjflags == CONV_STARTED )
 8005a7c:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a7e:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 8005a80:	d026      	beq.n	8005ad0 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8005a82:	b94b      	cbnz	r3, 8005a98 <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8005a84:	8861      	ldrh	r1, [r4, #2]
 8005a86:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005a88:	428b      	cmp	r3, r1
 8005a8a:	d3fc      	bcc.n	8005a86 <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005a8c:	491b      	ldr	r1, [pc, #108]	; (8005afc <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005a8e:	680b      	ldr	r3, [r1, #0]
 8005a90:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d026      	beq.n	8005ae6 <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8005a98:	4f18      	ldr	r7, [pc, #96]	; (8005afc <ICS_TIMx_UP_IRQHandler+0x8c>)
 8005a9a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	4e18      	ldr	r6, [pc, #96]	; (8005b00 <ICS_TIMx_UP_IRQHandler+0x90>)
 8005aa0:	f403 2570 	and.w	r5, r3, #983040	; 0xf0000
 8005aa4:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8005aa8:	4329      	orrs	r1, r5
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	68b3      	ldr	r3, [r6, #8]
 8005aae:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005ab2:	432b      	orrs	r3, r5
 8005ab4:	60b3      	str	r3, [r6, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 8005ab6:	79a3      	ldrb	r3, [r4, #6]
 8005ab8:	03db      	lsls	r3, r3, #15
 8005aba:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8005abc:	79e3      	ldrb	r3, [r4, #7]
 8005abe:	03db      	lsls	r3, r3, #15
 8005ac0:	63b3      	str	r3, [r6, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8005ac2:	6a13      	ldr	r3, [r2, #32]
 8005ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 8005ac8:	3046      	adds	r0, #70	; 0x46
 8005aca:	bcf0      	pop	{r4, r5, r6, r7}
 8005acc:	6213      	str	r3, [r2, #32]
 8005ace:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005ad0:	680b      	ldr	r3, [r1, #0]
 8005ad2:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d0de      	beq.n	8005a98 <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005ada:	680b      	ldr	r3, [r1, #0]
 8005adc:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8005ae0:	2b0c      	cmp	r3, #12
 8005ae2:	d1f5      	bne.n	8005ad0 <ICS_TIMx_UP_IRQHandler+0x60>
 8005ae4:	e7d8      	b.n	8005a98 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005ae6:	680b      	ldr	r3, [r1, #0]
 8005ae8:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	d0d3      	beq.n	8005a98 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8005af0:	680b      	ldr	r3, [r1, #0]
 8005af2:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8005af6:	2b0c      	cmp	r3, #12
 8005af8:	d1f5      	bne.n	8005ae6 <ICS_TIMx_UP_IRQHandler+0x76>
 8005afa:	e7cd      	b.n	8005a98 <ICS_TIMx_UP_IRQHandler+0x28>
 8005afc:	40012000 	.word	0x40012000
 8005b00:	40012100 	.word	0x40012100

08005b04 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005b04:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005b06:	7c1a      	ldrb	r2, [r3, #16]
 8005b08:	2a02      	cmp	r2, #2
 8005b0a:	d004      	beq.n	8005b16 <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
}
 8005b12:	3046      	adds	r0, #70	; 0x46
 8005b14:	4770      	bx	lr
{
 8005b16:	b4f0      	push	{r4, r5, r6, r7}
 8005b18:	6a19      	ldr	r1, [r3, #32]
 8005b1a:	699c      	ldr	r4, [r3, #24]
 8005b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005b1e:	695f      	ldr	r7, [r3, #20]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005b20:	69de      	ldr	r6, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005b22:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005b24:	0424      	lsls	r4, r4, #16
 8005b26:	0409      	lsls	r1, r1, #16
 8005b28:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61bc      	str	r4, [r7, #24]
}
 8005b2e:	3046      	adds	r0, #70	; 0x46
 8005b30:	61b1      	str	r1, [r6, #24]
 8005b32:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 8005b34:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 8005b38:	bcf0      	pop	{r4, r5, r6, r7}
 8005b3a:	4770      	bx	lr

08005b3c <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8005b3c:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005b40:	b90b      	cbnz	r3, 8005b46 <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8005b42:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8005b44:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8005b46:	2300      	movs	r3, #0
 8005b48:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    retval = MC_BREAK_IN;
 8005b4c:	2040      	movs	r0, #64	; 0x40
 8005b4e:	4770      	bx	lr

08005b50 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8005b50:	b510      	push	{r4, lr}
 8005b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b56:	4604      	mov	r4, r0
 8005b58:	2100      	movs	r1, #0
 8005b5a:	f000 fe07 	bl	800676c <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	bf00      	nop

08005b68 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005b68:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8005b6c:	1c53      	adds	r3, r2, #1
 8005b6e:	b29b      	uxth	r3, r3
{
 8005b70:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8005b72:	2b7f      	cmp	r3, #127	; 0x7f
{
 8005b74:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8005b76:	bf88      	it	hi
 8005b78:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005b7a:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8005b7e:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8005b80:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8005b84:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005b88:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8005b8c:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8005b8e:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005b90:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005b94:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005b96:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005b98:	d1fa      	bne.n	8005b90 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	bfb8      	it	lt
 8005b9e:	327f      	addlt	r2, #127	; 0x7f
 8005ba0:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8005ba2:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8005ba6:	bc70      	pop	{r4, r5, r6}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop

08005bac <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8005bac:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop

08005bb4 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8005bb4:	8a03      	ldrh	r3, [r0, #16]
 8005bb6:	8b42      	ldrh	r2, [r0, #26]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d306      	bcc.n	8005bca <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8005bbc:	8b82      	ldrh	r2, [r0, #28]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d901      	bls.n	8005bc6 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8005bc2:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8005bc4:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8005bc6:	8ac0      	ldrh	r0, [r0, #22]
 8005bc8:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8005bca:	2008      	movs	r0, #8
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop

08005bd0 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	8203      	strh	r3, [r0, #16]
}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop

08005bd8 <NTC_Init>:
{
 8005bd8:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005bda:	7803      	ldrb	r3, [r0, #0]
{
 8005bdc:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005bde:	b123      	cbz	r3, 8005bea <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005be0:	8a43      	ldrh	r3, [r0, #18]
 8005be2:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8005be4:	2200      	movs	r2, #0
 8005be6:	82c2      	strh	r2, [r0, #22]
}
 8005be8:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005bea:	3004      	adds	r0, #4
 8005bec:	f7fc f9ec 	bl	8001fc8 <RCM_RegisterRegConv>
 8005bf0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f7ff ffeb 	bl	8005bd0 <NTC_Clear>
}
 8005bfa:	bd10      	pop	{r4, pc}

08005bfc <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8005bfc:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005bfe:	7803      	ldrb	r3, [r0, #0]
{
 8005c00:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005c02:	b113      	cbz	r3, 8005c0a <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8005c04:	2000      	movs	r0, #0
 8005c06:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8005c08:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005c0a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005c0e:	f7fc faad 	bl	800216c <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8005c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c16:	4298      	cmp	r0, r3
 8005c18:	d007      	beq.n	8005c2a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005c1a:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8005c1c:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005c1e:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8005c20:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8005c24:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8005c28:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f7ff ffc2 	bl	8005bb4 <NTC_SetFaultState>
 8005c30:	82e0      	strh	r0, [r4, #22]
}
 8005c32:	bd10      	pop	{r4, pc}

08005c34 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005c34:	7803      	ldrb	r3, [r0, #0]
 8005c36:	b983      	cbnz	r3, 8005c5a <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8005c38:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005c3a:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8005c3c:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005c40:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005c42:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8005c44:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bfbc      	itt	lt
 8005c4c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005c50:	33ff      	addlt	r3, #255	; 0xff
 8005c52:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8005c56:	b200      	sxth	r0, r0
 8005c58:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8005c5a:	8a80      	ldrh	r0, [r0, #20]
}
 8005c5c:	b200      	sxth	r0, r0
 8005c5e:	4770      	bx	lr

08005c60 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8005c60:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005c62:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005c64:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005c66:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005c68:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8005c6a:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8005c6c:	6283      	str	r3, [r0, #40]	; 0x28
}
 8005c6e:	4770      	bx	lr

08005c70 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8005c70:	8081      	strh	r1, [r0, #4]
}
 8005c72:	4770      	bx	lr

08005c74 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8005c74:	80c1      	strh	r1, [r0, #6]
}
 8005c76:	4770      	bx	lr

08005c78 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8005c78:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop

08005c80 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8005c80:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop

08005c88 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8005c88:	6081      	str	r1, [r0, #8]

  return;
}
 8005c8a:	4770      	bx	lr

08005c8c <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8005c8c:	8b00      	ldrh	r0, [r0, #24]
 8005c8e:	4770      	bx	lr

08005c90 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8005c90:	8b40      	ldrh	r0, [r0, #26]
 8005c92:	4770      	bx	lr

08005c94 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8005c94:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8005c96:	4770      	bx	lr

08005c98 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8005c98:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop

08005ca0 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005ca0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8005ca4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8005ca8:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005cae:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005cb2:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8005cb6:	b162      	cbz	r2, 8005cd2 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005cb8:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005cba:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8005cbe:	1872      	adds	r2, r6, r1
 8005cc0:	d420      	bmi.n	8005d04 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8005cc2:	2e00      	cmp	r6, #0
 8005cc4:	db29      	blt.n	8005d1a <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005cc6:	68c1      	ldr	r1, [r0, #12]
 8005cc8:	4291      	cmp	r1, r2
 8005cca:	db03      	blt.n	8005cd4 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8005ccc:	6901      	ldr	r1, [r0, #16]
 8005cce:	4291      	cmp	r1, r2
 8005cd0:	dc00      	bgt.n	8005cd4 <PI_Controller+0x34>
 8005cd2:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8005cd4:	8b86      	ldrh	r6, [r0, #28]
 8005cd6:	8bc2      	ldrh	r2, [r0, #30]
 8005cd8:	4133      	asrs	r3, r6
 8005cda:	fa41 f202 	asr.w	r2, r1, r2
 8005cde:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	da05      	bge.n	8005cf0 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8005ce4:	1ae3      	subs	r3, r4, r3
 8005ce6:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8005ce8:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8005cea:	4620      	mov	r0, r4
 8005cec:	bc70      	pop	{r4, r5, r6}
 8005cee:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8005cf0:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8005cf2:	bfc9      	itett	gt
 8005cf4:	1aeb      	subgt	r3, r5, r3
 8005cf6:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8005cf8:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8005cfa:	18c9      	addgt	r1, r1, r3
 8005cfc:	6081      	str	r1, [r0, #8]
}
 8005cfe:	4620      	mov	r0, r4
 8005d00:	bc70      	pop	{r4, r5, r6}
 8005d02:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	ddde      	ble.n	8005cc6 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8005d08:	2900      	cmp	r1, #0
 8005d0a:	dddc      	ble.n	8005cc6 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005d0c:	68c1      	ldr	r1, [r0, #12]
 8005d0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005d12:	4291      	cmp	r1, r2
 8005d14:	d1de      	bne.n	8005cd4 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8005d16:	460a      	mov	r2, r1
 8005d18:	e7db      	b.n	8005cd2 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8005d1a:	4e03      	ldr	r6, [pc, #12]	; (8005d28 <PI_Controller+0x88>)
 8005d1c:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8005d20:	bf28      	it	cs
 8005d22:	4632      	movcs	r2, r6
 8005d24:	e7cf      	b.n	8005cc6 <PI_Controller+0x26>
 8005d26:	bf00      	nop
 8005d28:	80000001 	.word	0x80000001

08005d2c <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8005d2c:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005d2e:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005d32:	8b11      	ldrh	r1, [r2, #24]
 8005d34:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005d36:	8995      	ldrh	r5, [r2, #12]
 8005d38:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005d3a:	fb13 f301 	smulbb	r3, r3, r1
{
 8005d3e:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005d40:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005d44:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005d48:	f7ff f892 	bl	8004e70 <VBS_GetAvBusVoltage_V>
 8005d4c:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8005d50:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005d52:	480e      	ldr	r0, [pc, #56]	; (8005d8c <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8005d54:	490e      	ldr	r1, [pc, #56]	; (8005d90 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8005d56:	bfb8      	it	lt
 8005d58:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005d5c:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8005d60:	bfb8      	it	lt
 8005d62:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005d64:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8005d66:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005d68:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8005d6c:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8005d70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005d74:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8005d76:	fb81 2103 	smull	r2, r1, r1, r3
 8005d7a:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8005d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005d86:	f7ff beef 	b.w	8005b68 <MPM_CalcElMotorPower>
 8005d8a:	bf00      	nop
 8005d8c:	1b4e81b5 	.word	0x1b4e81b5
 8005d90:	66666667 	.word	0x66666667

08005d94 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8005d94:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <startTimers+0x60>)
 8005d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8005d98:	07d2      	lsls	r2, r2, #31
 8005d9a:	d415      	bmi.n	8005dc8 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8005d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005da6:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005da8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005dac:	f002 0201 	and.w	r2, r2, #1
 8005db0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005db2:	9a01      	ldr	r2, [sp, #4]
 8005db4:	694a      	ldr	r2, [r1, #20]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8005dc4:	b002      	add	sp, #8
 8005dc6:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8005dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dcc:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005dce:	6859      	ldr	r1, [r3, #4]
 8005dd0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005dd4:	f041 0120 	orr.w	r1, r1, #32
 8005dd8:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005dda:	6959      	ldr	r1, [r3, #20]
 8005ddc:	f041 0101 	orr.w	r1, r1, #1
 8005de0:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005de2:	6859      	ldr	r1, [r3, #4]
 8005de4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005de8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005dec:	430a      	orrs	r2, r1
 8005dee:	605a      	str	r2, [r3, #4]
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800

08005df8 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8005df8:	b4f0      	push	{r4, r5, r6, r7}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 8005dfa:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8005dfc:	f004 0460 	and.w	r4, r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8005e00:	3201      	adds	r2, #1
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8005e02:	2c60      	cmp	r4, #96	; 0x60
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8005e04:	bf18      	it	ne
 8005e06:	0856      	lsrne	r6, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005e08:	f06f 0702 	mvn.w	r7, #2
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8005e0c:	bf0c      	ite	eq
 8005e0e:	0156      	lsleq	r6, r2, #5
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8005e10:	0176      	lslne	r6, r6, #5
 8005e12:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8005e14:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8005e16:	781c      	ldrb	r4, [r3, #0]
 8005e18:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8005e1a:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8005e1e:	d80b      	bhi.n	8005e38 <waitForPolarizationEnd+0x40>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005e20:	6904      	ldr	r4, [r0, #16]
 8005e22:	07a4      	lsls	r4, r4, #30
 8005e24:	d5f7      	bpl.n	8005e16 <waitForPolarizationEnd+0x1e>
      hCalibrationPeriodCounter++;
 8005e26:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005e28:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005e2a:	6107      	str	r7, [r0, #16]
 8005e2c:	d8f3      	bhi.n	8005e16 <waitForPolarizationEnd+0x1e>
      {
        if (*cnt < NB_CONVERSIONS)
 8005e2e:	781c      	ldrb	r4, [r3, #0]
 8005e30:	2c0f      	cmp	r4, #15
 8005e32:	d8f0      	bhi.n	8005e16 <waitForPolarizationEnd+0x1e>
        {
          *SWerror = 1u;
 8005e34:	2301      	movs	r3, #1
 8005e36:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8005e38:	bcf0      	pop	{r4, r5, r6, r7}
 8005e3a:	4770      	bx	lr

08005e3c <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8005e3c:	6843      	ldr	r3, [r0, #4]
 8005e3e:	4718      	bx	r3

08005e40 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8005e40:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005e42:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005e46:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8005e48:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005e4a:	140c      	asrs	r4, r1, #16
{
 8005e4c:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005e4e:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005e52:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005e54:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005e58:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8005e5c:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005e60:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8005e64:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005e68:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005e70:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8005e74:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005e78:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8005e7c:	db77      	blt.n	8005f6e <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8005e7e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005e82:	db4e      	blt.n	8005f22 <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005e84:	1aad      	subs	r5, r5, r2
 8005e86:	bf44      	itt	mi
 8005e88:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005e8c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005e90:	2900      	cmp	r1, #0
 8005e92:	bfbc      	itt	lt
 8005e94:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8005e98:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfb8      	it	lt
 8005ea0:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005ea4:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005ea8:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005eac:	bfb8      	it	lt
 8005eae:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8005eb2:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8005eb4:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005eb8:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8005ebc:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8005ec0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8005ec4:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005ec6:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8005ec8:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8005ecc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8005ed0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005ed4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ed8:	b292      	uxth	r2, r2
 8005eda:	b289      	uxth	r1, r1
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005ee0:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8005ee2:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8005ee4:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8005ee6:	d118      	bne.n	8005f1a <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8005ee8:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8005eec:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8005ef0:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8005ef2:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8005ef6:	bfcc      	ite	gt
 8005ef8:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8005efa:	1b12      	suble	r2, r2, r4
 8005efc:	b292      	uxth	r2, r2
 8005efe:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8005f00:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8005f04:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8005f06:	bfcc      	ite	gt
 8005f08:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005f0a:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8005f0c:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005f0e:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8005f10:	bfcc      	ite	gt
 8005f12:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8005f14:	1b1b      	suble	r3, r3, r4
 8005f16:	8681      	strh	r1, [r0, #52]	; 0x34
 8005f18:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005f1a:	6983      	ldr	r3, [r0, #24]
}
 8005f1c:	b003      	add	sp, #12
 8005f1e:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005f20:	4718      	bx	r3
      if ( wX <= 0 )
 8005f22:	2c00      	cmp	r4, #0
 8005f24:	dd47      	ble.n	8005fb6 <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005f26:	1aa5      	subs	r5, r4, r2
 8005f28:	bf44      	itt	mi
 8005f2a:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005f2e:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005f32:	2900      	cmp	r1, #0
 8005f34:	bfb8      	it	lt
 8005f36:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8005f3a:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8005f3e:	bfb8      	it	lt
 8005f40:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8005f44:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005f48:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8005f4a:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005f4c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005f50:	bfb8      	it	lt
 8005f52:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005f56:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005f5a:	bfb8      	it	lt
 8005f5c:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005f60:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8005f64:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8005f68:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005f6a:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8005f6c:	e7ac      	b.n	8005ec8 <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 8005f6e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005f72:	db69      	blt.n	8006048 <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8005f74:	2c00      	cmp	r4, #0
 8005f76:	dd43      	ble.n	8006000 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005f78:	1b2d      	subs	r5, r5, r4
 8005f7a:	bf48      	it	mi
 8005f7c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8005f80:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005f84:	bf48      	it	mi
 8005f86:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bfb8      	it	lt
 8005f8e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8005f92:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005f96:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005f9a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8005f9e:	bfb8      	it	lt
 8005fa0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8005fa4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005fa8:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8005fac:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005fae:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005fb0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005fb4:	e788      	b.n	8005ec8 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005fb6:	1b2d      	subs	r5, r5, r4
 8005fb8:	bf44      	itt	mi
 8005fba:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005fbe:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	bfb8      	it	lt
 8005fc6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8005fca:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8005fce:	bfb8      	it	lt
 8005fd0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8005fd4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8005fd8:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005fda:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005fde:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005fe2:	bfb8      	it	lt
 8005fe4:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8005fe8:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005fec:	bfb8      	it	lt
 8005fee:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8005ff2:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8005ff6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8005ffa:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005ffc:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8005ffe:	e763      	b.n	8005ec8 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006000:	1aa5      	subs	r5, r4, r2
 8006002:	bf44      	itt	mi
 8006004:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006008:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 800600c:	2900      	cmp	r1, #0
 800600e:	bfb8      	it	lt
 8006010:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8006014:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8006018:	bfb8      	it	lt
 800601a:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 800601e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006022:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006024:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006026:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800602a:	bfb8      	it	lt
 800602c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006030:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006034:	bfb8      	it	lt
 8006036:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800603a:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 800603e:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006040:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006042:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006046:	e73f      	b.n	8005ec8 <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006048:	1aad      	subs	r5, r5, r2
 800604a:	bf44      	itt	mi
 800604c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006050:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006054:	2900      	cmp	r1, #0
 8006056:	bfbc      	itt	lt
 8006058:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800605c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006060:	2b00      	cmp	r3, #0
 8006062:	bfb8      	it	lt
 8006064:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006068:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800606c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006070:	bfb8      	it	lt
 8006072:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8006076:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8006078:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800607c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8006080:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8006084:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006086:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8006088:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800608c:	e71c      	b.n	8005ec8 <PWMC_SetPhaseVoltage+0x88>
 800608e:	bf00      	nop

08006090 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006090:	6883      	ldr	r3, [r0, #8]
 8006092:	4718      	bx	r3

08006094 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006094:	b510      	push	{r4, lr}
 8006096:	4604      	mov	r4, r0
 8006098:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800609a:	b199      	cbz	r1, 80060c4 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800609c:	2901      	cmp	r1, #1
 800609e:	d002      	beq.n	80060a6 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80060a0:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 80060a2:	b002      	add	sp, #8
 80060a4:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80060a6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80060aa:	b1cb      	cbz	r3, 80060e0 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	9101      	str	r1, [sp, #4]
 80060b2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1f2      	bne.n	80060a0 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 80060ba:	6903      	ldr	r3, [r0, #16]
 80060bc:	4798      	blx	r3
        retVal = true;
 80060be:	9901      	ldr	r1, [sp, #4]
 80060c0:	4608      	mov	r0, r1
 80060c2:	e7ee      	b.n	80060a2 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 80060c4:	f7ff ffe4 	bl	8006090 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80060c8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80060cc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e5      	bne.n	80060a0 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 80060d4:	4620      	mov	r0, r4
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	4798      	blx	r3
      retVal = true;
 80060da:	2001      	movs	r0, #1
}
 80060dc:	b002      	add	sp, #8
 80060de:	bd10      	pop	{r4, pc}
      retVal = true;
 80060e0:	4608      	mov	r0, r1
}
 80060e2:	b002      	add	sp, #8
 80060e4:	bd10      	pop	{r4, pc}
 80060e6:	bf00      	nop

080060e8 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80060e8:	69c3      	ldr	r3, [r0, #28]
 80060ea:	4718      	bx	r3

080060ec <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 80060ec:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 80060ee:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 80060f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 80060f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 80060f8:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 80060fa:	4770      	bx	lr

080060fc <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 80060fc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop

08006104 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006104:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop

0800610c <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 800610c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop

08006114 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006114:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006118:	8a81      	ldrh	r1, [r0, #20]
{
 800611a:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 800611c:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800611e:	bfb8      	it	lt
 8006120:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006122:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006124:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006126:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8006128:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800612a:	429d      	cmp	r5, r3
 800612c:	d817      	bhi.n	800615e <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800612e:	4299      	cmp	r1, r3
 8006130:	bf2c      	ite	cs
 8006132:	2300      	movcs	r3, #0
 8006134:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8006136:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800613a:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 800613c:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800613e:	bfb8      	it	lt
 8006140:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8006142:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006144:	428d      	cmp	r5, r1
 8006146:	d300      	bcc.n	800614a <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006148:	b15b      	cbz	r3, 8006162 <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800614a:	4294      	cmp	r4, r2
 800614c:	d901      	bls.n	8006152 <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 800614e:	3201      	adds	r2, #1
 8006150:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006152:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8006154:	1b10      	subs	r0, r2, r4
 8006156:	bf18      	it	ne
 8006158:	2001      	movne	r0, #1
 800615a:	bc30      	pop	{r4, r5}
 800615c:	4770      	bx	lr
    SpeedError = true;
 800615e:	2301      	movs	r3, #1
 8006160:	e7e9      	b.n	8006136 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 8006162:	4294      	cmp	r4, r2
 8006164:	bf88      	it	hi
 8006166:	2200      	movhi	r2, #0
 8006168:	e7f3      	b.n	8006152 <SPD_IsMecSpeedReliable+0x3e>
 800616a:	bf00      	nop

0800616c <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 800616c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006170:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8006174:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006178:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 800617c:	b200      	sxth	r0, r0
 800617e:	4770      	bx	lr

08006180 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8006180:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006182:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006186:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 800618a:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 800618e:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006190:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006192:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 8006194:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006196:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 800619a:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 800619c:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800619e:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 80061a0:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80061a2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80061a4:	6183      	str	r3, [r0, #24]
}
 80061a6:	4770      	bx	lr

080061a8 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80061a8:	6940      	ldr	r0, [r0, #20]
 80061aa:	4770      	bx	lr

080061ac <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80061ac:	7803      	ldrb	r3, [r0, #0]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d000      	beq.n	80061b4 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80061b2:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80061b4:	6900      	ldr	r0, [r0, #16]
 80061b6:	2100      	movs	r1, #0
 80061b8:	f7ff bd66 	b.w	8005c88 <PID_SetIntegralTerm>

080061bc <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80061bc:	6840      	ldr	r0, [r0, #4]
 80061be:	2800      	cmp	r0, #0
 80061c0:	bfbc      	itt	lt
 80061c2:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80061c6:	30ff      	addlt	r0, #255	; 0xff
}
 80061c8:	1400      	asrs	r0, r0, #16
 80061ca:	4770      	bx	lr

080061cc <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 80061cc:	6880      	ldr	r0, [r0, #8]
 80061ce:	2800      	cmp	r0, #0
 80061d0:	bfbc      	itt	lt
 80061d2:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80061d6:	30ff      	addlt	r0, #255	; 0xff
}
 80061d8:	1400      	asrs	r0, r0, #16
 80061da:	4770      	bx	lr

080061dc <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80061dc:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 80061de:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80061e0:	60c3      	str	r3, [r0, #12]
}
 80061e2:	4770      	bx	lr

080061e4 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80061e6:	7806      	ldrb	r6, [r0, #0]
{
 80061e8:	4604      	mov	r4, r0
 80061ea:	460d      	mov	r5, r1
 80061ec:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80061ee:	b326      	cbz	r6, 800623a <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80061f0:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80061f2:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80061f4:	2800      	cmp	r0, #0
 80061f6:	bfbc      	itt	lt
 80061f8:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80061fc:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80061fe:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006200:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006204:	dd01      	ble.n	800620a <STC_ExecRamp+0x26>
      AllowedRange = false;
 8006206:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800620a:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800620e:	42a9      	cmp	r1, r5
 8006210:	dcf9      	bgt.n	8006206 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8006212:	8c23      	ldrh	r3, [r4, #32]
 8006214:	429d      	cmp	r5, r3
 8006216:	da03      	bge.n	8006220 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006218:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800621c:	42ab      	cmp	r3, r5
 800621e:	dbf2      	blt.n	8006206 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8006220:	b9af      	cbnz	r7, 800624e <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006222:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006224:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006226:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8006228:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800622c:	bf0c      	ite	eq
 800622e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006230:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8006232:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8006234:	61a3      	str	r3, [r4, #24]
 8006236:	2001      	movs	r0, #1
}
 8006238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800623a:	f7ff ffc7 	bl	80061cc <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800623e:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8006240:	42b5      	cmp	r5, r6
 8006242:	dce0      	bgt.n	8006206 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006244:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8006248:	42ab      	cmp	r3, r5
 800624a:	dcdc      	bgt.n	8006206 <STC_ExecRamp+0x22>
 800624c:	e7e8      	b.n	8006220 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800624e:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8006250:	4a07      	ldr	r2, [pc, #28]	; (8006270 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8006252:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006254:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800625e:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006260:	1a2d      	subs	r5, r5, r0
 8006262:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8006264:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006266:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 800626a:	2001      	movs	r0, #1
 800626c:	61a5      	str	r5, [r4, #24]
}
 800626e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006270:	10624dd3 	.word	0x10624dd3

08006274 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8006274:	2300      	movs	r3, #0
 8006276:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006278:	6183      	str	r3, [r0, #24]
}
 800627a:	4770      	bx	lr

0800627c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800627c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800627e:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006282:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006284:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8006286:	2a00      	cmp	r2, #0
 8006288:	bf08      	it	eq
 800628a:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 800628c:	2b01      	cmp	r3, #1
{
 800628e:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8006290:	d90c      	bls.n	80062ac <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006292:	6981      	ldr	r1, [r0, #24]
 8006294:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006296:	3b01      	subs	r3, #1
 8006298:	2e00      	cmp	r6, #0
 800629a:	60c3      	str	r3, [r0, #12]
 800629c:	4630      	mov	r0, r6
 800629e:	db09      	blt.n	80062b4 <STC_CalcTorqueReference+0x38>
 80062a0:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 80062a2:	2a01      	cmp	r2, #1
 80062a4:	d00a      	beq.n	80062bc <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 80062a6:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80062a8:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80062ac:	d012      	beq.n	80062d4 <STC_CalcTorqueReference+0x58>
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	4630      	mov	r0, r6
 80062b2:	daf5      	bge.n	80062a0 <STC_CalcTorqueReference+0x24>
 80062b4:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 80062b8:	30ff      	adds	r0, #255	; 0xff
 80062ba:	e7f1      	b.n	80062a0 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80062bc:	6960      	ldr	r0, [r4, #20]
 80062be:	f7ff ff21 	bl	8006104 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 80062c2:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 80062c4:	b201      	sxth	r1, r0
 80062c6:	6920      	ldr	r0, [r4, #16]
 80062c8:	f7ff fcea 	bl	8005ca0 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80062cc:	0403      	lsls	r3, r0, #16
 80062ce:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 80062d2:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80062d4:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 80062d8:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80062da:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 80062dc:	60c3      	str	r3, [r0, #12]
 80062de:	e7e0      	b.n	80062a2 <STC_CalcTorqueReference+0x26>

080062e0 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 80062e0:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop

080062e8 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 80062e8:	8bc0      	ldrh	r0, [r0, #30]
 80062ea:	4770      	bx	lr

080062ec <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 80062ec:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop

080062f4 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 80062f4:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 80062f8:	2200      	movs	r2, #0
 80062fa:	b299      	uxth	r1, r3
 80062fc:	f361 020f 	bfi	r2, r1, #0, #16
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006306:	b082      	sub	sp, #8
}
 8006308:	4610      	mov	r0, r2
 800630a:	b002      	add	sp, #8
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop

08006310 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006310:	b510      	push	{r4, lr}
 8006312:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006314:	6940      	ldr	r0, [r0, #20]
 8006316:	f7ff fef5 	bl	8006104 <SPD_GetAvrgMecSpeedUnit>
 800631a:	0400      	lsls	r0, r0, #16
 800631c:	6060      	str	r0, [r4, #4]
}
 800631e:	bd10      	pop	{r4, pc}

08006320 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006320:	2300      	movs	r3, #0
 8006322:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006324:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop

0800632c <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800632c:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800632e:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006330:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 8006332:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006334:	430b      	orrs	r3, r1
 8006336:	ea23 0202 	bic.w	r2, r3, r2
 800633a:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800633c:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800633e:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006340:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006342:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8006344:	d008      	beq.n	8006358 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8006346:	b912      	cbnz	r2, 800634e <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8006348:	4620      	mov	r0, r4
 800634a:	bc30      	pop	{r4, r5}
 800634c:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800634e:	240a      	movs	r4, #10
 8006350:	7004      	strb	r4, [r0, #0]
}
 8006352:	4620      	mov	r0, r4
 8006354:	bc30      	pop	{r4, r5}
 8006356:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8006358:	2a00      	cmp	r2, #0
 800635a:	d1f5      	bne.n	8006348 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 800635c:	240b      	movs	r4, #11
 800635e:	7004      	strb	r4, [r0, #0]
}
 8006360:	4620      	mov	r0, r4
 8006362:	bc30      	pop	{r4, r5}
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop

08006368 <STM_NextState>:
{
 8006368:	b508      	push	{r3, lr}
 800636a:	7803      	ldrb	r3, [r0, #0]
 800636c:	2b14      	cmp	r3, #20
 800636e:	d810      	bhi.n	8006392 <STM_NextState+0x2a>
 8006370:	e8df f003 	tbb	[pc, r3]
 8006374:	240d545e 	.word	0x240d545e
 8006378:	390d352e 	.word	0x390d352e
 800637c:	0f0f3f3c 	.word	0x0f0f3f3c
 8006380:	47650b44 	.word	0x47650b44
 8006384:	504d1b4a 	.word	0x504d1b4a
 8006388:	5b          	.byte	0x5b
 8006389:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800638a:	290e      	cmp	r1, #14
 800638c:	d013      	beq.n	80063b6 <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 800638e:	2907      	cmp	r1, #7
 8006390:	d011      	beq.n	80063b6 <STM_NextState+0x4e>
 8006392:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006396:	2b01      	cmp	r3, #1
 8006398:	d018      	beq.n	80063cc <STM_NextState+0x64>
 800639a:	2907      	cmp	r1, #7
 800639c:	d016      	beq.n	80063cc <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800639e:	2200      	movs	r2, #0
 80063a0:	2180      	movs	r1, #128	; 0x80
 80063a2:	f7ff ffc3 	bl	800632c <STM_FaultProcessing>
 80063a6:	2000      	movs	r0, #0
}
 80063a8:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80063aa:	2914      	cmp	r1, #20
 80063ac:	d8f1      	bhi.n	8006392 <STM_NextState+0x2a>
 80063ae:	4b26      	ldr	r3, [pc, #152]	; (8006448 <STM_NextState+0xe0>)
 80063b0:	40cb      	lsrs	r3, r1
 80063b2:	07db      	lsls	r3, r3, #31
 80063b4:	d5ed      	bpl.n	8006392 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 80063b6:	7001      	strb	r1, [r0, #0]
 80063b8:	2001      	movs	r0, #1
}
 80063ba:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80063bc:	2911      	cmp	r1, #17
 80063be:	d8ee      	bhi.n	800639e <STM_NextState+0x36>
 80063c0:	4b22      	ldr	r3, [pc, #136]	; (800644c <STM_NextState+0xe4>)
 80063c2:	40cb      	lsrs	r3, r1
 80063c4:	07da      	lsls	r2, r3, #31
 80063c6:	d4f6      	bmi.n	80063b6 <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80063c8:	2903      	cmp	r1, #3
 80063ca:	d1e8      	bne.n	800639e <STM_NextState+0x36>
 80063cc:	2000      	movs	r0, #0
}
 80063ce:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80063d0:	2913      	cmp	r1, #19
 80063d2:	d0f0      	beq.n	80063b6 <STM_NextState+0x4e>
 80063d4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80063d8:	2b05      	cmp	r3, #5
 80063da:	d1dc      	bne.n	8006396 <STM_NextState+0x2e>
 80063dc:	e7eb      	b.n	80063b6 <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80063de:	1f8b      	subs	r3, r1, #6
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d8d6      	bhi.n	8006392 <STM_NextState+0x2a>
 80063e4:	e7e7      	b.n	80063b6 <STM_NextState+0x4e>
      if ( bState == STOP )
 80063e6:	2908      	cmp	r1, #8
 80063e8:	d1d3      	bne.n	8006392 <STM_NextState+0x2a>
 80063ea:	e7e4      	b.n	80063b6 <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 80063ec:	2909      	cmp	r1, #9
 80063ee:	d1d0      	bne.n	8006392 <STM_NextState+0x2a>
 80063f0:	e7e1      	b.n	80063b6 <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80063f2:	2900      	cmp	r1, #0
 80063f4:	d0df      	beq.n	80063b6 <STM_NextState+0x4e>
 80063f6:	290c      	cmp	r1, #12
 80063f8:	d1cb      	bne.n	8006392 <STM_NextState+0x2a>
 80063fa:	e7dc      	b.n	80063b6 <STM_NextState+0x4e>
      if ( bState == IDLE )
 80063fc:	2900      	cmp	r1, #0
 80063fe:	d0da      	beq.n	80063b6 <STM_NextState+0x4e>
 8006400:	e7c7      	b.n	8006392 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8006402:	2902      	cmp	r1, #2
 8006404:	d1c3      	bne.n	800638e <STM_NextState+0x26>
 8006406:	e7d6      	b.n	80063b6 <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006408:	2911      	cmp	r1, #17
 800640a:	d1c0      	bne.n	800638e <STM_NextState+0x26>
 800640c:	e7d3      	b.n	80063b6 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800640e:	2904      	cmp	r1, #4
 8006410:	d1bd      	bne.n	800638e <STM_NextState+0x26>
 8006412:	e7d0      	b.n	80063b6 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006414:	1f0b      	subs	r3, r1, #4
 8006416:	2b01      	cmp	r3, #1
 8006418:	d8b9      	bhi.n	800638e <STM_NextState+0x26>
 800641a:	e7cc      	b.n	80063b6 <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800641c:	2907      	cmp	r1, #7
 800641e:	d0ca      	beq.n	80063b6 <STM_NextState+0x4e>
 8006420:	f1a1 030d 	sub.w	r3, r1, #13
 8006424:	2b01      	cmp	r3, #1
 8006426:	d8b4      	bhi.n	8006392 <STM_NextState+0x2a>
 8006428:	e7c5      	b.n	80063b6 <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800642a:	2912      	cmp	r1, #18
 800642c:	d1af      	bne.n	800638e <STM_NextState+0x26>
 800642e:	e7c2      	b.n	80063b6 <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006430:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8006434:	2b01      	cmp	r3, #1
 8006436:	d0be      	beq.n	80063b6 <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 8006438:	290c      	cmp	r1, #12
 800643a:	d1ae      	bne.n	800639a <STM_NextState+0x32>
 800643c:	e7bb      	b.n	80063b6 <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800643e:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8006442:	2b07      	cmp	r3, #7
 8006444:	d1a5      	bne.n	8006392 <STM_NextState+0x2a>
 8006446:	e7b6      	b.n	80063b6 <STM_NextState+0x4e>
 8006448:	00140080 	.word	0x00140080
 800644c:	00030092 	.word	0x00030092

08006450 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8006450:	7800      	ldrb	r0, [r0, #0]
 8006452:	4770      	bx	lr

08006454 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8006454:	7803      	ldrb	r3, [r0, #0]
 8006456:	2b0b      	cmp	r3, #11
 8006458:	d001      	beq.n	800645e <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800645a:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 800645c:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800645e:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006460:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8006462:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006464:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8006466:	2001      	movs	r0, #1
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop

0800646c <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800646c:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800646e:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8006470:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop

08006478 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8006478:	f7fe bd32 	b.w	8004ee0 <FCP_Init>

0800647c <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800647c:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8006480:	b16a      	cbz	r2, 800649e <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8006482:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 8006486:	4603      	mov	r3, r0
 8006488:	b1a2      	cbz	r2, 80064b4 <UFCP_TX_IRQ_Handler+0x38>
 800648a:	2a01      	cmp	r2, #1
 800648c:	d108      	bne.n	80064a0 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800648e:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006490:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8006494:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8006496:	3201      	adds	r2, #1
 8006498:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800649c:	4770      	bx	lr
 800649e:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80064a0:	7d41      	ldrb	r1, [r0, #21]
 80064a2:	3101      	adds	r1, #1
 80064a4:	428a      	cmp	r2, r1
 80064a6:	dc07      	bgt.n	80064b8 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80064a8:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80064aa:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 80064ae:	7d09      	ldrb	r1, [r1, #20]
 80064b0:	6041      	str	r1, [r0, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80064b2:	e7f0      	b.n	8006496 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 80064b4:	7d01      	ldrb	r1, [r0, #20]
        break;
 80064b6:	e7eb      	b.n	8006490 <UFCP_TX_IRQ_Handler+0x14>
{
 80064b8:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80064ba:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 80064be:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 80064c2:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80064c4:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80064c6:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80064ca:	2500      	movs	r5, #0
 80064cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80064d0:	60d1      	str	r1, [r2, #12]
 80064d2:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80064d6:	4623      	mov	r3, r4
}
 80064d8:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80064da:	4718      	bx	r3

080064dc <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 80064dc:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 80064e0:	b10b      	cbz	r3, 80064e6 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80064e2:	2001      	movs	r0, #1
  }

  return ret_val;
}
 80064e4:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 80064e6:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80064f0:	68d3      	ldr	r3, [r2, #12]
 80064f2:	f043 0320 	orr.w	r3, r3, #32
 80064f6:	60d3      	str	r3, [r2, #12]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 80064f8:	2002      	movs	r0, #2
 80064fa:	4770      	bx	lr

080064fc <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8006500:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8006504:	b108      	cbz	r0, 800650a <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006506:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 800650a:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 800650c:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800650e:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8006510:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8006512:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8006516:	b34b      	cbz	r3, 800656c <UFCP_Send+0x70>
 8006518:	f104 011a 	add.w	r1, r4, #26
 800651c:	1d17      	adds	r7, r2, #4
 800651e:	45bc      	cmp	ip, r7
 8006520:	bf38      	it	cc
 8006522:	428a      	cmpcc	r2, r1
 8006524:	d336      	bcc.n	8006594 <UFCP_Send+0x98>
 8006526:	2807      	cmp	r0, #7
 8006528:	d934      	bls.n	8006594 <UFCP_Send+0x98>
 800652a:	0899      	lsrs	r1, r3, #2
 800652c:	3901      	subs	r1, #1
 800652e:	b2c9      	uxtb	r1, r1
 8006530:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8006534:	4665      	mov	r5, ip
 8006536:	4611      	mov	r1, r2
 8006538:	f851 6b04 	ldr.w	r6, [r1], #4
 800653c:	f845 6b04 	str.w	r6, [r5], #4
 8006540:	42b9      	cmp	r1, r7
 8006542:	d1f9      	bne.n	8006538 <UFCP_Send+0x3c>
 8006544:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8006548:	1a40      	subs	r0, r0, r1
 800654a:	428b      	cmp	r3, r1
 800654c:	b2c0      	uxtb	r0, r0
 800654e:	eb02 0601 	add.w	r6, r2, r1
 8006552:	eb0c 0501 	add.w	r5, ip, r1
 8006556:	d009      	beq.n	800656c <UFCP_Send+0x70>
 8006558:	5c53      	ldrb	r3, [r2, r1]
 800655a:	f80c 3001 	strb.w	r3, [ip, r1]
 800655e:	b128      	cbz	r0, 800656c <UFCP_Send+0x70>
 8006560:	7873      	ldrb	r3, [r6, #1]
 8006562:	706b      	strb	r3, [r5, #1]
 8006564:	2801      	cmp	r0, #1
 8006566:	d001      	beq.n	800656c <UFCP_Send+0x70>
 8006568:	78b3      	ldrb	r3, [r6, #2]
 800656a:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800656c:	f104 0014 	add.w	r0, r4, #20
 8006570:	f7fe fcca 	bl	8004f08 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8006574:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006578:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 800657c:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800657e:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8006580:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006584:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006588:	68d3      	ldr	r3, [r2, #12]
 800658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658e:	60d3      	str	r3, [r2, #12]
 8006590:	2002      	movs	r0, #2
}
 8006592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006594:	3001      	adds	r0, #1
 8006596:	4410      	add	r0, r2
 8006598:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 800659c:	f812 1b01 	ldrb.w	r1, [r2], #1
 80065a0:	f803 1f01 	strb.w	r1, [r3, #1]!
 80065a4:	4282      	cmp	r2, r0
 80065a6:	d1f9      	bne.n	800659c <UFCP_Send+0xa0>
 80065a8:	e7e0      	b.n	800656c <UFCP_Send+0x70>
 80065aa:	bf00      	nop

080065ac <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 80065ac:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 80065b0:	b90b      	cbnz	r3, 80065b6 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80065b2:	482d      	ldr	r0, [pc, #180]	; (8006668 <UFCP_RX_IRQ_Handler+0xbc>)
}
 80065b4:	4770      	bx	lr
{
 80065b6:	b570      	push	{r4, r5, r6, lr}
    switch ( pBaseHandle->RxFrameLevel )
 80065b8:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 80065bc:	b082      	sub	sp, #8
 80065be:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 80065c0:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 80065c2:	b1d3      	cbz	r3, 80065fa <UFCP_RX_IRQ_Handler+0x4e>
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d00d      	beq.n	80065e4 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 80065c8:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 80065cc:	3101      	adds	r1, #1
 80065ce:	428b      	cmp	r3, r1
 80065d0:	dc1d      	bgt.n	800660e <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 80065d2:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80065d4:	4824      	ldr	r0, [pc, #144]	; (8006668 <UFCP_RX_IRQ_Handler+0xbc>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 80065d6:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 80065da:	3301      	adds	r3, #1
 80065dc:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80065e0:	b002      	add	sp, #8
 80065e2:	bd70      	pop	{r4, r5, r6, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80065e4:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 80065e6:	bf54      	ite	pl
 80065e8:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 80065ea:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 80065ec:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 80065f0:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80065f4:	481c      	ldr	r0, [pc, #112]	; (8006668 <UFCP_RX_IRQ_Handler+0xbc>)
}
 80065f6:	b002      	add	sp, #8
 80065f8:	bd70      	pop	{r4, r5, r6, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80065fa:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 80065fc:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8006600:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006602:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 8006604:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8006608:	4818      	ldr	r0, [pc, #96]	; (800666c <UFCP_RX_IRQ_Handler+0xc0>)
}
 800660a:	b002      	add	sp, #8
 800660c:	bd70      	pop	{r4, r5, r6, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800660e:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8006612:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006616:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 8006618:	2500      	movs	r5, #0
 800661a:	f023 0320 	bic.w	r3, r3, #32
 800661e:	8245      	strh	r5, [r0, #18]
 8006620:	60cb      	str	r3, [r1, #12]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006622:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006624:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006628:	f7fe fc6e 	bl	8004f08 <FCP_CalcCRC>
 800662c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8006630:	4283      	cmp	r3, r0
 8006632:	d10c      	bne.n	800664e <UFCP_RX_IRQ_Handler+0xa2>
        	packetCount = 0;
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <UFCP_RX_IRQ_Handler+0xc4>)
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8006636:	68a6      	ldr	r6, [r4, #8]
        	packetCount = 0;
 8006638:	701d      	strb	r5, [r3, #0]
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8006640:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8006644:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8006648:	47b0      	blx	r6
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800664a:	480a      	ldr	r0, [pc, #40]	; (8006674 <UFCP_RX_IRQ_Handler+0xc8>)
 800664c:	e7d3      	b.n	80065f6 <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800664e:	4620      	mov	r0, r4
 8006650:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 8006652:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006654:	f10d 0207 	add.w	r2, sp, #7
 8006658:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 800665a:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800665e:	f7ff ff4d 	bl	80064fc <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006662:	4804      	ldr	r0, [pc, #16]	; (8006674 <UFCP_RX_IRQ_Handler+0xc8>)
  return ret_val;
 8006664:	e7c7      	b.n	80065f6 <UFCP_RX_IRQ_Handler+0x4a>
 8006666:	bf00      	nop
 8006668:	08006aec 	.word	0x08006aec
 800666c:	08006aee 	.word	0x08006aee
 8006670:	200007c5 	.word	0x200007c5
 8006674:	08006af0 	.word	0x08006af0

08006678 <UFCP_OVR_IRQ_Handler>:
{
 8006678:	b510      	push	{r4, lr}
 800667a:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 800667c:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800667e:	2301      	movs	r3, #1
 8006680:	f10d 0207 	add.w	r2, sp, #7
 8006684:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8006686:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800668a:	f7ff ff37 	bl	80064fc <UFCP_Send>
}
 800668e:	b002      	add	sp, #8
 8006690:	bd10      	pop	{r4, pc}
 8006692:	bf00      	nop

08006694 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006694:	2300      	movs	r3, #0
 8006696:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800669a:	4770      	bx	lr

0800669c <VVBS_Init>:
  * @retval none
  */
__weak void VVBS_Init( VirtualBusVoltageSensor_Handle_t * pHandle )
{
  pHandle->_Super.FaultState = MC_NO_ERROR;
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 800669c:	8942      	ldrh	r2, [r0, #10]
  pHandle->_Super.FaultState = MC_NO_ERROR;
 800669e:	2300      	movs	r3, #0
 80066a0:	8103      	strh	r3, [r0, #8]
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 80066a2:	f362 030f 	bfi	r3, r2, #0, #16
 80066a6:	f362 431f 	bfi	r3, r2, #16, #16
 80066aa:	6043      	str	r3, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = pHandle->ExpectedVbus_d;
}
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop

080066b0 <RUC_SetPhaseDurationms>:
 80066b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80066b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066b8:	818a      	strh	r2, [r1, #12]
 80066ba:	4770      	bx	lr

080066bc <RUC_SetPhaseFinalMecSpeedUnit>:
 80066bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80066c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066c4:	81ca      	strh	r2, [r1, #14]
 80066c6:	4770      	bx	lr

080066c8 <RUC_SetPhaseFinalTorque>:
 80066c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80066cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066d0:	820a      	strh	r2, [r1, #16]
 80066d2:	4770      	bx	lr

080066d4 <RUC_GetPhaseDurationms>:
 80066d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80066d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066dc:	8988      	ldrh	r0, [r1, #12]
 80066de:	4770      	bx	lr

080066e0 <RUC_GetPhaseFinalMecSpeedUnit>:
 80066e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80066e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066e8:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop

080066f0 <RUC_GetPhaseFinalTorque>:
 80066f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80066f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066f8:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop

08006700 <RUC_GetNumberOfPhases>:
 8006700:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop

08006708 <__errno>:
 8006708:	4b01      	ldr	r3, [pc, #4]	; (8006710 <__errno+0x8>)
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000598 	.word	0x20000598

08006714 <__libc_init_array>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4d0d      	ldr	r5, [pc, #52]	; (800674c <__libc_init_array+0x38>)
 8006718:	4c0d      	ldr	r4, [pc, #52]	; (8006750 <__libc_init_array+0x3c>)
 800671a:	1b64      	subs	r4, r4, r5
 800671c:	10a4      	asrs	r4, r4, #2
 800671e:	2600      	movs	r6, #0
 8006720:	42a6      	cmp	r6, r4
 8006722:	d109      	bne.n	8006738 <__libc_init_array+0x24>
 8006724:	4d0b      	ldr	r5, [pc, #44]	; (8006754 <__libc_init_array+0x40>)
 8006726:	4c0c      	ldr	r4, [pc, #48]	; (8006758 <__libc_init_array+0x44>)
 8006728:	f000 f8a0 	bl	800686c <_init>
 800672c:	1b64      	subs	r4, r4, r5
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	2600      	movs	r6, #0
 8006732:	42a6      	cmp	r6, r4
 8006734:	d105      	bne.n	8006742 <__libc_init_array+0x2e>
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	f855 3b04 	ldr.w	r3, [r5], #4
 800673c:	4798      	blx	r3
 800673e:	3601      	adds	r6, #1
 8006740:	e7ee      	b.n	8006720 <__libc_init_array+0xc>
 8006742:	f855 3b04 	ldr.w	r3, [r5], #4
 8006746:	4798      	blx	r3
 8006748:	3601      	adds	r6, #1
 800674a:	e7f2      	b.n	8006732 <__libc_init_array+0x1e>
 800674c:	08006afc 	.word	0x08006afc
 8006750:	08006afc 	.word	0x08006afc
 8006754:	08006afc 	.word	0x08006afc
 8006758:	08006b00 	.word	0x08006b00

0800675c <malloc>:
 800675c:	4b02      	ldr	r3, [pc, #8]	; (8006768 <malloc+0xc>)
 800675e:	4601      	mov	r1, r0
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	f000 b80b 	b.w	800677c <_malloc_r>
 8006766:	bf00      	nop
 8006768:	20000598 	.word	0x20000598

0800676c <memset>:
 800676c:	4402      	add	r2, r0
 800676e:	4603      	mov	r3, r0
 8006770:	4293      	cmp	r3, r2
 8006772:	d100      	bne.n	8006776 <memset+0xa>
 8006774:	4770      	bx	lr
 8006776:	f803 1b01 	strb.w	r1, [r3], #1
 800677a:	e7f9      	b.n	8006770 <memset+0x4>

0800677c <_malloc_r>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	1ccd      	adds	r5, r1, #3
 8006780:	f025 0503 	bic.w	r5, r5, #3
 8006784:	3508      	adds	r5, #8
 8006786:	2d0c      	cmp	r5, #12
 8006788:	bf38      	it	cc
 800678a:	250c      	movcc	r5, #12
 800678c:	2d00      	cmp	r5, #0
 800678e:	4606      	mov	r6, r0
 8006790:	db01      	blt.n	8006796 <_malloc_r+0x1a>
 8006792:	42a9      	cmp	r1, r5
 8006794:	d903      	bls.n	800679e <_malloc_r+0x22>
 8006796:	230c      	movs	r3, #12
 8006798:	6033      	str	r3, [r6, #0]
 800679a:	2000      	movs	r0, #0
 800679c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800679e:	f000 f857 	bl	8006850 <__malloc_lock>
 80067a2:	4921      	ldr	r1, [pc, #132]	; (8006828 <_malloc_r+0xac>)
 80067a4:	680a      	ldr	r2, [r1, #0]
 80067a6:	4614      	mov	r4, r2
 80067a8:	b99c      	cbnz	r4, 80067d2 <_malloc_r+0x56>
 80067aa:	4f20      	ldr	r7, [pc, #128]	; (800682c <_malloc_r+0xb0>)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	b923      	cbnz	r3, 80067ba <_malloc_r+0x3e>
 80067b0:	4621      	mov	r1, r4
 80067b2:	4630      	mov	r0, r6
 80067b4:	f000 f83c 	bl	8006830 <_sbrk_r>
 80067b8:	6038      	str	r0, [r7, #0]
 80067ba:	4629      	mov	r1, r5
 80067bc:	4630      	mov	r0, r6
 80067be:	f000 f837 	bl	8006830 <_sbrk_r>
 80067c2:	1c43      	adds	r3, r0, #1
 80067c4:	d123      	bne.n	800680e <_malloc_r+0x92>
 80067c6:	230c      	movs	r3, #12
 80067c8:	6033      	str	r3, [r6, #0]
 80067ca:	4630      	mov	r0, r6
 80067cc:	f000 f846 	bl	800685c <__malloc_unlock>
 80067d0:	e7e3      	b.n	800679a <_malloc_r+0x1e>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	1b5b      	subs	r3, r3, r5
 80067d6:	d417      	bmi.n	8006808 <_malloc_r+0x8c>
 80067d8:	2b0b      	cmp	r3, #11
 80067da:	d903      	bls.n	80067e4 <_malloc_r+0x68>
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	441c      	add	r4, r3
 80067e0:	6025      	str	r5, [r4, #0]
 80067e2:	e004      	b.n	80067ee <_malloc_r+0x72>
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	42a2      	cmp	r2, r4
 80067e8:	bf0c      	ite	eq
 80067ea:	600b      	streq	r3, [r1, #0]
 80067ec:	6053      	strne	r3, [r2, #4]
 80067ee:	4630      	mov	r0, r6
 80067f0:	f000 f834 	bl	800685c <__malloc_unlock>
 80067f4:	f104 000b 	add.w	r0, r4, #11
 80067f8:	1d23      	adds	r3, r4, #4
 80067fa:	f020 0007 	bic.w	r0, r0, #7
 80067fe:	1ac2      	subs	r2, r0, r3
 8006800:	d0cc      	beq.n	800679c <_malloc_r+0x20>
 8006802:	1a1b      	subs	r3, r3, r0
 8006804:	50a3      	str	r3, [r4, r2]
 8006806:	e7c9      	b.n	800679c <_malloc_r+0x20>
 8006808:	4622      	mov	r2, r4
 800680a:	6864      	ldr	r4, [r4, #4]
 800680c:	e7cc      	b.n	80067a8 <_malloc_r+0x2c>
 800680e:	1cc4      	adds	r4, r0, #3
 8006810:	f024 0403 	bic.w	r4, r4, #3
 8006814:	42a0      	cmp	r0, r4
 8006816:	d0e3      	beq.n	80067e0 <_malloc_r+0x64>
 8006818:	1a21      	subs	r1, r4, r0
 800681a:	4630      	mov	r0, r6
 800681c:	f000 f808 	bl	8006830 <_sbrk_r>
 8006820:	3001      	adds	r0, #1
 8006822:	d1dd      	bne.n	80067e0 <_malloc_r+0x64>
 8006824:	e7cf      	b.n	80067c6 <_malloc_r+0x4a>
 8006826:	bf00      	nop
 8006828:	20000668 	.word	0x20000668
 800682c:	2000066c 	.word	0x2000066c

08006830 <_sbrk_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d06      	ldr	r5, [pc, #24]	; (800684c <_sbrk_r+0x1c>)
 8006834:	2300      	movs	r3, #0
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	f7fb ff8e 	bl	800275c <_sbrk>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_sbrk_r+0x1a>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_sbrk_r+0x1a>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	20000a18 	.word	0x20000a18

08006850 <__malloc_lock>:
 8006850:	4801      	ldr	r0, [pc, #4]	; (8006858 <__malloc_lock+0x8>)
 8006852:	f000 b809 	b.w	8006868 <__retarget_lock_acquire_recursive>
 8006856:	bf00      	nop
 8006858:	20000a20 	.word	0x20000a20

0800685c <__malloc_unlock>:
 800685c:	4801      	ldr	r0, [pc, #4]	; (8006864 <__malloc_unlock+0x8>)
 800685e:	f000 b804 	b.w	800686a <__retarget_lock_release_recursive>
 8006862:	bf00      	nop
 8006864:	20000a20 	.word	0x20000a20

08006868 <__retarget_lock_acquire_recursive>:
 8006868:	4770      	bx	lr

0800686a <__retarget_lock_release_recursive>:
 800686a:	4770      	bx	lr

0800686c <_init>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr

08006878 <_fini>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr
